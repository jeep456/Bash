Python Library Documentation: package telegram

NNAAMMEE
    telegram

PPAACCKKAAGGEE  CCOONNTTEENNTTSS
    __main__
    base
    bot
    callbackquery
    chat
    chataction
    chatmember
    choseninlineresult
    constants
    error
    ext (package)
    files (package)
    forcereply
    games (package)
    inline (package)
    keyboardbutton
    message
    messageentity
    parsemode
    passport (package)
    payment (package)
    replykeyboardmarkup
    replykeyboardremove
    replymarkup
    update
    user
    userprofilephotos
    utils (package)
    vendor (package)
    version
    webhookinfo

CCLLAASSSSEESS
    builtins.Exception(builtins.BaseException)
        telegram.error.TelegramError
            telegram.passport.credentials.TelegramDecryptionError
    builtins.object
        telegram.base.TelegramObject
            telegram.bot.Bot
            telegram.callbackquery.CallbackQuery
            telegram.chat.Chat
            telegram.chatmember.ChatMember
            telegram.choseninlineresult.ChosenInlineResult
            telegram.files.animation.Animation
            telegram.files.audio.Audio
            telegram.files.chatphoto.ChatPhoto
            telegram.files.contact.Contact
            telegram.files.document.Document
            telegram.files.file.File
            telegram.files.inputmedia.InputMedia
                telegram.files.inputmedia.InputMediaAnimation
                telegram.files.inputmedia.InputMediaAudio
                telegram.files.inputmedia.InputMediaDocument
                telegram.files.inputmedia.InputMediaPhoto
                telegram.files.inputmedia.InputMediaVideo
            telegram.files.location.Location
            telegram.files.photosize.PhotoSize
            telegram.files.sticker.MaskPosition
            telegram.files.sticker.Sticker
            telegram.files.sticker.StickerSet
            telegram.files.venue.Venue
            telegram.files.video.Video
            telegram.files.videonote.VideoNote
            telegram.files.voice.Voice
            telegram.games.callbackgame.CallbackGame
            telegram.games.game.Game
            telegram.games.gamehighscore.GameHighScore
            telegram.inline.inlinekeyboardbutton.InlineKeyboardButton
            telegram.inline.inlinequery.InlineQuery
            telegram.inline.inlinequeryresult.InlineQueryResult
                telegram.inline.inlinequeryresultarticle.InlineQueryResultArticle
                telegram.inline.inlinequeryresultaudio.InlineQueryResultAudio
                telegram.inline.inlinequeryresultcachedaudio.InlineQueryResultCachedAudio
                telegram.inline.inlinequeryresultcacheddocument.InlineQueryResultCachedDocument
                telegram.inline.inlinequeryresultcachedgif.InlineQueryResultCachedGif
                telegram.inline.inlinequeryresultcachedmpeg4gif.InlineQueryResultCachedMpeg4Gif
                telegram.inline.inlinequeryresultcachedphoto.InlineQueryResultCachedPhoto
                telegram.inline.inlinequeryresultcachedsticker.InlineQueryResultCachedSticker
                telegram.inline.inlinequeryresultcachedvideo.InlineQueryResultCachedVideo
                telegram.inline.inlinequeryresultcachedvoice.InlineQueryResultCachedVoice
                telegram.inline.inlinequeryresultcontact.InlineQueryResultContact
                telegram.inline.inlinequeryresultdocument.InlineQueryResultDocument
                telegram.inline.inlinequeryresultgame.InlineQueryResultGame
                telegram.inline.inlinequeryresultgif.InlineQueryResultGif
                telegram.inline.inlinequeryresultlocation.InlineQueryResultLocation
                telegram.inline.inlinequeryresultmpeg4gif.InlineQueryResultMpeg4Gif
                telegram.inline.inlinequeryresultphoto.InlineQueryResultPhoto
                telegram.inline.inlinequeryresultvenue.InlineQueryResultVenue
                telegram.inline.inlinequeryresultvideo.InlineQueryResultVideo
                telegram.inline.inlinequeryresultvoice.InlineQueryResultVoice
            telegram.inline.inputmessagecontent.InputMessageContent
                telegram.inline.inputcontactmessagecontent.InputContactMessageContent
                telegram.inline.inputlocationmessagecontent.InputLocationMessageContent
                telegram.inline.inputtextmessagecontent.InputTextMessageContent
                telegram.inline.inputvenuemessagecontent.InputVenueMessageContent
            telegram.keyboardbutton.KeyboardButton
            telegram.message.Message
            telegram.messageentity.MessageEntity
            telegram.passport.credentials.Credentials
            telegram.passport.credentials.EncryptedCredentials
            telegram.passport.credentials.SecureData
            telegram.passport.data.IdDocumentData
            telegram.passport.data.PersonalDetails
            telegram.passport.data.ResidentialAddress
            telegram.passport.encryptedpassportelement.EncryptedPassportElement
            telegram.passport.passportdata.PassportData
            telegram.passport.passportelementerrors.PassportElementError
                telegram.passport.passportelementerrors.PassportElementErrorDataField
                telegram.passport.passportelementerrors.PassportElementErrorFile
                telegram.passport.passportelementerrors.PassportElementErrorFiles
                telegram.passport.passportelementerrors.PassportElementErrorFrontSide
                telegram.passport.passportelementerrors.PassportElementErrorReverseSide
                telegram.passport.passportelementerrors.PassportElementErrorSelfie
                telegram.passport.passportelementerrors.PassportElementErrorTranslationFile
                telegram.passport.passportelementerrors.PassportElementErrorTranslationFiles
                telegram.passport.passportelementerrors.PassportElementErrorUnspecified
            telegram.passport.passportfile.PassportFile
            telegram.payment.invoice.Invoice
            telegram.payment.labeledprice.LabeledPrice
            telegram.payment.orderinfo.OrderInfo
            telegram.payment.precheckoutquery.PreCheckoutQuery
            telegram.payment.shippingaddress.ShippingAddress
            telegram.payment.shippingoption.ShippingOption
            telegram.payment.shippingquery.ShippingQuery
            telegram.payment.successfulpayment.SuccessfulPayment
            telegram.replymarkup.ReplyMarkup
                telegram.forcereply.ForceReply
                telegram.inline.inlinekeyboardmarkup.InlineKeyboardMarkup
                telegram.replykeyboardmarkup.ReplyKeyboardMarkup
                telegram.replykeyboardremove.ReplyKeyboardRemove
            telegram.update.Update
            telegram.user.User
            telegram.userprofilephotos.UserProfilePhotos
            telegram.webhookinfo.WebhookInfo
        telegram.chataction.ChatAction
        telegram.files.inputfile.InputFile
        telegram.parsemode.ParseMode
    telegram.passport.credentials._CredentialsBase(telegram.base.TelegramObject)
        telegram.passport.credentials.DataCredentials
        telegram.passport.credentials.FileCredentials
    
    class AAnniimmaattiioonn(telegram.base.TelegramObject)
     |  This object represents an animation file to be displayed in the message containing a game.
     |  
     |  Attributes:
     |      file_id (:obj:`str`): Unique file identifier.
     |      width (:obj:`int`): Video width as defined by sender.
     |      height (:obj:`int`): Video height as defined by sender.
     |      duration (:obj:`int`): Duration of the video in seconds as defined by sender.
     |      thumb (:class:`telegram.PhotoSize`): Optional. Animation thumbnail as defined
     |          by sender.
     |      file_name (:obj:`str`): Optional. Original animation filename as defined by sender.
     |      mime_type (:obj:`str`): Optional. MIME type of the file as defined by sender.
     |      file_size (:obj:`int`): Optional. File size.
     |  
     |  Args:
     |      file_id (:obj:`str`): Unique file identifier.
     |      width (:obj:`int`): Video width as defined by sender.
     |      height (:obj:`int`): Video height as defined by sender.
     |      duration (:obj:`int`): Duration of the video in seconds as defined by sender.
     |      thumb (:class:`telegram.PhotoSize`, optional): Animation thumbnail as defined by sender.
     |      file_name (:obj:`str`, optional): Original animation filename as defined by sender.
     |      mime_type (:obj:`str`, optional): MIME type of the file as defined by sender.
     |      file_size (:obj:`int`, optional): File size.
     |  
     |  Method resolution order:
     |      Animation
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, file_id, width, height, duration, thumb=None, file_name=None, mime_type=None, file_size=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class AAuuddiioo(telegram.base.TelegramObject)
     |  This object represents an audio file to be treated as music by the Telegram clients.
     |  
     |  Attributes:
     |      file_id (:obj:`str`): Unique identifier for this file.
     |      duration (:obj:`int`): Duration of the audio in seconds.
     |      performer (:obj:`str`): Optional. Performer of the audio as defined by sender or by audio
     |          tags.
     |      title (:obj:`str`): Optional. Title of the audio as defined by sender or by audio tags.
     |      mime_type (:obj:`str`): Optional. MIME type of the file as defined by sender.
     |      file_size (:obj:`int`): Optional. File size.
     |      thumb (:class:`telegram.PhotoSize`): Optional. Thumbnail of the album cover to
     |          which the music file belongs
     |      bot (:class:`telegram.Bot`): Optional. The Bot to use for instance methods.
     |  
     |  Args:
     |      file_id (:obj:`str`): Unique identifier for this file.
     |      duration (:obj:`int`): Duration of the audio in seconds as defined by sender.
     |      performer (:obj:`str`, optional): Performer of the audio as defined by sender or by audio
     |          tags.
     |      title (:obj:`str`, optional): Title of the audio as defined by sender or by audio tags.
     |      mime_type (:obj:`str`, optional): MIME type of the file as defined by sender.
     |      file_size (:obj:`int`, optional): File size.
     |      thumb (:class:`telegram.PhotoSize`, optional): Thumbnail of the album cover to
     |          which the music file belongs
     |      bot (:class:`telegram.Bot`, optional): The Bot to use for instance methods.
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      Audio
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, file_id, duration, performer=None, title=None, mime_type=None, file_size=None, thumb=None, bot=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ggeett__ffiillee(self, timeout=None, **kwargs)
     |      Convenience wrapper over :attr:`telegram.Bot.get_file`
     |      
     |      Args:
     |          timeout (:obj:`int` | :obj:`float`, optional): If this value is specified, use it as
     |              the read timeout from the server (instead of the one specified during creation of
     |              the connection pool).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |      
     |      Returns:
     |          :class:`telegram.File`
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class BBoott(telegram.base.TelegramObject)
     |  This object represents a Telegram Bot.
     |  
     |  Args:
     |      token (:obj:`str`): Bot's unique authentication.
     |      base_url (:obj:`str`, optional): Telegram Bot API service URL.
     |      base_file_url (:obj:`str`, optional): Telegram Bot API file URL.
     |      request (:obj:`telegram.utils.request.Request`, optional): Pre initialized
     |          :obj:`telegram.utils.request.Request`.
     |      private_key (:obj:`bytes`, optional): Private key for decryption of telegram passport data.
     |      private_key_password (:obj:`bytes`, optional): Password for above private key.
     |  
     |  Method resolution order:
     |      Bot
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, token, base_url=None, base_file_url=None, request=None, private_key=None, private_key_password=None)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ____rreedduuccee____(self)
     |      helper for pickle
     |  
     |  aaddddSSttiicckkeerrTTooSSeett = add_sticker_to_set(self, user_id, name, png_sticker, emojis, mask_position=None, timeout=None, **kwargs)
     |  
     |  aadddd__ssttiicckkeerr__ttoo__sseett(self, user_id, name, png_sticker, emojis, mask_position=None, timeout=None, **kwargs)
     |      Use this method to add a new sticker to a set created by the bot.
     |      
     |      Note:
     |          The png_sticker argument can be either a file_id, an URL or a file from disk
     |          ``open(filename, 'rb')``
     |      
     |      Args:
     |          user_id (:obj:`int`): User identifier of created sticker set owner.
     |          name (:obj:`str`): Sticker set name.
     |          png_sticker (:obj:`str` | `filelike object`): Png image with the sticker, must be up
     |              to 512 kilobytes in size, dimensions must not exceed 512px,
     |              and either width or height must be exactly 512px. Pass a file_id as a String to
     |              send a file that already exists on the Telegram servers, pass an HTTP URL as a
     |              String for Telegram to get a file from the Internet, or upload a new one
     |              using multipart/form-data.
     |          emojis (:obj:`str`): One or more emoji corresponding to the sticker.
     |          mask_position (:class:`telegram.MaskPosition`, optional): Position where the mask
     |              should beplaced on faces.
     |          timeout (:obj:`int` | :obj:`float`, optional): If this value is specified, use it as
     |              the read timeout from the server (instead of the one specified during
     |              creation of the connection pool).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |      
     |      Returns:
     |          :obj:`bool`: On success, ``True`` is returned.
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  aannsswweerrCCaallllbbaacckkQQuueerryy = answer_callback_query(self, callback_query_id, text=None, show_alert=False, url=None, cache_time=None, timeout=None, **kwargs)
     |  
     |  aannsswweerrIInnlliinneeQQuueerryy = answer_inline_query(self, inline_query_id, results, cache_time=300, is_personal=None, next_offset=None, switch_pm_text=None, switch_pm_parameter=None, timeout=None, **kwargs)
     |  
     |  aannsswweerrPPrreeCChheecckkoouuttQQuueerryy = answer_pre_checkout_query(self, pre_checkout_query_id, ok, error_message=None, timeout=None, **kwargs)
     |  
     |  aannsswweerrSShhiippppiinnggQQuueerryy = answer_shipping_query(self, shipping_query_id, ok, shipping_options=None, error_message=None, timeout=None, **kwargs)
     |  
     |  aannsswweerr__ccaallllbbaacckk__qquueerryy(self, callback_query_id, text=None, show_alert=False, url=None, cache_time=None, timeout=None, **kwargs)
     |      Use this method to send answers to callback queries sent from inline keyboards. The answer
     |      will be displayed to the user as a notification at the top of the chat screen or as an
     |      alert.
     |      Alternatively, the user can be redirected to the specified Game URL. For this option to
     |      work, you must first create a game for your bot via BotFather and accept the terms.
     |      Otherwise, you may use links like t.me/your_bot?start=XXXX that open your bot with
     |      a parameter.
     |      
     |      Args:
     |          callback_query_id (:obj:`str`): Unique identifier for the query to be answered.
     |          text (:obj:`str`, optional): Text of the notification. If not specified, nothing will
     |              be shown to the user, 0-200 characters.
     |          show_alert (:obj:`bool`, optional): If true, an alert will be shown by the client
     |              instead of a notification at the top of the chat screen. Defaults to false.
     |          url (:obj:`str`, optional): URL that will be opened by the user's client. If you have
     |              created a Game and accepted the conditions via @Botfather, specify the URL that
     |              opens your game - note that this will only work if the query comes from a callback
     |              game button. Otherwise, you may use links like t.me/your_bot?start=XXXX that open
     |              your bot with a parameter.
     |          cache_time (:obj:`int`, optional): The maximum amount of time in seconds that the
     |              result of the callback query may be cached client-side. Defaults to 0.
     |          timeout (:obj:`int` | :obj:`float`, optional): If this value is specified, use it as
     |              the read timeout from the server (instead of the one specified during creation of
     |              the connection pool).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |      
     |      Returns:
     |          :obj:`bool` On success, ``True`` is returned.
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  aannsswweerr__iinnlliinnee__qquueerryy(self, inline_query_id, results, cache_time=300, is_personal=None, next_offset=None, switch_pm_text=None, switch_pm_parameter=None, timeout=None, **kwargs)
     |      Use this method to send answers to an inline query. No more than 50 results per query are
     |      allowed.
     |      
     |      Args:
     |          inline_query_id (:obj:`str`): Unique identifier for the answered query.
     |          results (List[:class:`telegram.InlineQueryResult`)]: A list of results for the inline
     |              query.
     |          cache_time (:obj:`int`, optional): The maximum amount of time in seconds that the
     |              result of the inline query may be cached on the server. Defaults to 300.
     |          is_personal (:obj:`bool`, optional): Pass True, if results may be cached on the server
     |              side only for the user that sent the query. By default, results may be returned to
     |              any user who sends the same query.
     |          next_offset (:obj:`str`, optional): Pass the offset that a client should send in the
     |              next query with the same text to receive more results. Pass an empty string if
     |              there are no more results or if you don't support pagination. Offset length can't
     |              exceed 64 bytes.
     |          switch_pm_text (:obj:`str`, optional): If passed, clients will display a button with
     |              specified text that switches the user to a private chat with the bot and sends the
     |              bot a start message with the parameter switch_pm_parameter.
     |          switch_pm_parameter (:obj:`str`, optional): Deep-linking parameter for the /start
     |              message sent to the bot when user presses the switch button. 1-64 characters,
     |              only A-Z, a-z, 0-9, _ and - are allowed.
     |          timeout (:obj:`int` | :obj:`float`, optional): If this value is specified, use it as
     |              he read timeout from the server (instead of the one specified during creation of
     |              the connection pool).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |      
     |      Example:
     |          An inline bot that sends YouTube videos can ask the user to connect the bot to their
     |          YouTube account to adapt search results accordingly. To do this, it displays a
     |          'Connect your YouTube account' button above the results, or even before showing any.
     |          The user presses the button, switches to a private chat with the bot and, in doing so,
     |          passes a start parameter that instructs the bot to return an oauth link. Once done, the
     |          bot can offer a switch_inline button so that the user can easily return to the chat
     |          where they wanted to use the bot's inline capabilities.
     |      
     |      Returns:
     |          :obj:`bool` On success, ``True`` is returned.
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  aannsswweerr__pprree__cchheecckkoouutt__qquueerryy(self, pre_checkout_query_id, ok, error_message=None, timeout=None, **kwargs)
     |      Once the user has confirmed their payment and shipping details, the Bot API sends the final
     |      confirmation in the form of an Update with the field pre_checkout_query. Use this method to
     |      respond to such pre-checkout queries.
     |      
     |      Note:
     |          The Bot API must receive an answer within 10 seconds after the pre-checkout
     |          query was sent.
     |      
     |      Args:
     |          pre_checkout_query_id (:obj:`str`): Unique identifier for the query to be answered.
     |          ok (:obj:`bool`): Specify True if everything is alright (goods are available, etc.) and
     |              the bot is ready to proceed with the order. Use False if there are any problems.
     |          error_message (:obj:`str`, optional): Required if ok is False. Error message in  human
     |              readable form that explains the reason for failure to proceed with the checkout
     |              (e.g. "Sorry, somebody just bought the last of our amazing black T-shirts while you
     |              were busy filling out your payment details. Please choose a different color or
     |              garment!"). Telegram will display this message to the user.
     |          timeout (:obj:`int` | :obj:`float`, optional): If this value is specified, use it as
     |              the read timeout from the server (instead of the one specified during creation of
     |              the connection pool).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |      
     |      Returns:
     |          :obj:`bool`: On success, ``True`` is returned.
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  aannsswweerr__sshhiippppiinngg__qquueerryy(self, shipping_query_id, ok, shipping_options=None, error_message=None, timeout=None, **kwargs)
     |      If you sent an invoice requesting a shipping address and the parameter is_flexible was
     |      specified, the Bot API will send an Update with a shipping_query field to the bot. Use
     |      this method to reply to shipping queries.
     |      
     |      Args:
     |          shipping_query_id (:obj:`str`): Unique identifier for the query to be answered.
     |          ok (:obj:`bool`): Specify True if delivery to the specified address is possible and
     |              False if there are any problems (for example, if delivery to the specified address
     |              is not possible).
     |          shipping_options (List[:class:`telegram.ShippingOption`]), optional]: Required if ok is
     |              True. A JSON-serialized array of available shipping options.
     |          error_message (:obj:`str`, optional): Required if ok is False. Error message in
     |              human readable form that explains why it is impossible to complete the order (e.g.
     |              "Sorry, delivery to your desired address is unavailable"). Telegram will display
     |              this message to the user.
     |          timeout (:obj:`int` | :obj:`float`, optional): If this value is specified, use it as
     |              the read timeout from the server (instead of the one specified during creation of
     |              the connection pool).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |      
     |      Returns:
     |          :obj:`bool`; On success, True is returned.
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  ccrreeaatteeNNeewwSSttiicckkeerrSSeett = create_new_sticker_set(self, user_id, name, title, png_sticker, emojis, contains_masks=None, mask_position=None, timeout=None, **kwargs)
     |  
     |  ccrreeaattee__nneeww__ssttiicckkeerr__sseett(self, user_id, name, title, png_sticker, emojis, contains_masks=None, mask_position=None, timeout=None, **kwargs)
     |      Use this method to create new sticker set owned by a user.
     |      
     |      The bot will be able to edit the created sticker set.
     |      
     |      Note:
     |          The png_sticker argument can be either a file_id, an URL or a file from disk
     |          ``open(filename, 'rb')``
     |      
     |      Args:
     |          user_id (:obj:`int`): User identifier of created sticker set owner.
     |          name (:obj:`str`): Short name of sticker set, to be used in t.me/addstickers/ URLs
     |              (e.g., animals). Can contain only english letters, digits and underscores.
     |              Must begin with a letter, can't contain consecutive underscores and
     |              must end in "_by_<bot username>". <bot_username> is case insensitive.
     |              1-64 characters.
     |          title (:obj:`str`): Sticker set title, 1-64 characters.
     |          png_sticker (:obj:`str` | `filelike object`): Png image with the sticker, must be up
     |              to 512 kilobytes in size, dimensions must not exceed 512px,
     |              and either width or height must be exactly 512px. Pass a file_id as a String to
     |              send a file that already exists on the Telegram servers, pass an HTTP URL as a
     |              String for Telegram to get a file from the Internet, or upload a new one
     |              using multipart/form-data.
     |          emojis (:obj:`str`): One or more emoji corresponding to the sticker.
     |          contains_masks (:obj:`bool`, optional): Pass True, if a set of mask stickers should be
     |              created.
     |          mask_position (:class:`telegram.MaskPosition`, optional): Position where the mask
     |              should be placed on faces.
     |          timeout (:obj:`int` | :obj:`float`, optional): If this value is specified, use it as
     |              the read timeout from the server (instead of the one specified during
     |              creation of the connection pool).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |      
     |      Returns:
     |          :obj:`bool`: On success, ``True`` is returned.
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  ddeelleetteeCChhaattPPhhoottoo = delete_chat_photo(self, chat_id, timeout=None, **kwargs)
     |  
     |  ddeelleetteeCChhaattSSttiicckkeerrSSeett = delete_chat_sticker_set(self, chat_id, timeout=None, **kwargs)
     |  
     |  ddeelleetteeMMeessssaaggee = delete_message(self, chat_id, message_id, timeout=None, **kwargs)
     |  
     |  ddeelleetteeSSttiicckkeerrFFrroommSSeett = delete_sticker_from_set(self, sticker, timeout=None, **kwargs)
     |  
     |  ddeelleetteeWWeebbhhooookk = delete_webhook(self, timeout=None, **kwargs)
     |  
     |  ddeelleettee__cchhaatt__pphhoottoo(self, chat_id, timeout=None, **kwargs)
     |      Use this method to delete a chat photo. Photos can't be changed for private chats. The bot
     |      must be an administrator in the chat for this to work and must have the appropriate admin
     |      rights.
     |      
     |      Args:
     |          chat_id (:obj:`int` | :obj:`str`): Unique identifier for the target chat or username
     |              of the target`channel (in the format @channelusername).
     |          timeout (:obj:`int` | :obj:`float`, optional): If this value is specified, use it as
     |              the read timeout from the server (instead of the one specified during creation of
     |              the connection pool).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments
     |      
     |      Note:
     |          In regular groups (non-supergroups), this method will only work if the
     |          'All Members Are Admins' setting is off in the target group.
     |      
     |      Returns:
     |          :obj:`bool`: Returns ``True`` on success.
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  ddeelleettee__cchhaatt__ssttiicckkeerr__sseett(self, chat_id, timeout=None, **kwargs)
     |      Use this method to delete a group sticker set from a supergroup. The bot must be an
     |      administrator in the chat for this to work and must have the appropriate admin rights.
     |      Use the field :attr:`telegram.Chat.can_set_sticker_set` optionally returned in
     |      :attr:`get_chat` requests to check if the bot can use this method.
     |      
     |      Args:
     |          chat_id (:obj:`int` | :obj:`str`): Unique identifier for the target chat or username
     |              of the target supergroup (in the format @supergroupusername).
     |          timeout (:obj:`int` | :obj:`float`, optional): If this value is specified, use it as
     |              the read timeout from the server (instead of the one specified during creation of
     |              the connection pool).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |      
     |      Returns:
     |           :obj:`bool`: True on success.
     |  
     |  ddeelleettee__mmeessssaaggee(self, chat_id, message_id, timeout=None, **kwargs)
     |      Use this method to delete a message. A message can only be deleted if it was sent less
     |      than 48 hours ago. Any such recently sent outgoing message may be deleted. Additionally,
     |      if the bot is an administrator in a group chat, it can delete any message. If the bot is
     |      an administrator in a supergroup, it can delete messages from any other user and service
     |      messages about people joining or leaving the group (other types of service messages may
     |      only be removed by the group creator). In channels, bots can only remove their own
     |      messages.
     |      
     |      Args:
     |          chat_id (:obj:`int` | :obj:`str`): Unique identifier for the target chat or username
     |              of the target channel (in the format @channelusername).
     |          message_id (:obj:`int`): Identifier of the message to delete.
     |          timeout (:obj:`int` | :obj:`float`, optional): If this value is specified, use it as
     |          the read timeout
     |              from the server (instead of the one specified during creation of the connection
     |              pool).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |      
     |      Returns:
     |          :obj:`bool`: On success, ``True`` is returned.
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  ddeelleettee__ssttiicckkeerr__ffrroomm__sseett(self, sticker, timeout=None, **kwargs)
     |      Use this method to delete a sticker from a set created by the bot.
     |      
     |      Args:
     |          sticker (:obj:`str`): File identifier of the sticker.
     |          timeout (:obj:`int` | :obj:`float`, optional): If this value is specified, use it as
     |              the read timeout from the server (instead of the one specified during
     |              creation of the connection pool).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |      
     |      Returns:
     |          :obj:`bool`: On success, ``True`` is returned.
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  ddeelleettee__wweebbhhooookk(self, timeout=None, **kwargs)
     |      Use this method to remove webhook integration if you decide to switch back to
     |      getUpdates. Requires no parameters.
     |      
     |      Args:
     |          timeout (:obj:`int` | :obj:`float`, optional): If this value is specified, use it as
     |              the read timeout from the server (instead of the one specified during creation of
     |              the connection pool).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |      
     |      Returns:
     |          :obj:`bool` On success, ``True`` is returned.
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  eeddiittMMeessssaaggeeCCaappttiioonn = edit_message_caption(self, chat_id=None, message_id=None, inline_message_id=None, caption=None, reply_markup=None, timeout=None, parse_mode=None, **kwargs)
     |  
     |  eeddiittMMeessssaaggeeLLiivveeLLooccaattiioonn = edit_message_live_location(self, chat_id=None, message_id=None, inline_message_id=None, latitude=None, longitude=None, location=None, reply_markup=None, **kwargs)
     |  
     |  eeddiittMMeessssaaggeeMMeeddiiaa = edit_message_media(self, chat_id=None, message_id=None, inline_message_id=None, media=None, reply_markup=None, timeout=None, **kwargs)
     |  
     |  eeddiittMMeessssaaggeeRReeppllyyMMaarrkkuupp = edit_message_reply_markup(self, chat_id=None, message_id=None, inline_message_id=None, reply_markup=None, timeout=None, **kwargs)
     |  
     |  eeddiittMMeessssaaggeeTTeexxtt = edit_message_text(self, text, chat_id=None, message_id=None, inline_message_id=None, parse_mode=None, disable_web_page_preview=None, reply_markup=None, timeout=None, **kwargs)
     |  
     |  eeddiitt__mmeessssaaggee__ccaappttiioonn(self, chat_id=None, message_id=None, inline_message_id=None, caption=None, reply_markup=None, timeout=None, parse_mode=None, **kwargs)
     |      Use this method to edit captions of messages sent by the bot or via the bot
     |      (for inline bots).
     |      
     |      Args:
     |          chat_id (:obj:`int` | :obj:`str`): Unique identifier for the target chat or username
     |              of the target`channel (in the format @channelusername).
     |          message_id (:obj:`int`, optional): Required if inline_message_id is not specified.
     |              Identifier of the sent message.
     |          inline_message_id (:obj:`str`, optional): Required if chat_id and message_id are not
     |              specified. Identifier of the inline message.
     |          caption (:obj:`str`, optional): New caption of the message.
     |          parse_mode (:obj:`str`, optional): Send Markdown or HTML, if you want Telegram apps to
     |              show bold, italic, fixed-width text or inline URLs in the media caption. See the
     |              constants in :class:`telegram.ParseMode` for the available modes.
     |          reply_markup (:class:`telegram.ReplyMarkup`, optional): Additional interface options. A
     |              JSON-serialized object for an inline keyboard, custom reply keyboard, instructions
     |              to remove reply keyboard or to force a reply from the user.
     |          timeout (:obj:`int` | :obj:`float`, optional): If this value is specified, use it as
     |              the read timeout from the server (instead of the one specified during creation of
     |              the connection pool).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |      
     |      Returns:
     |          :class:`telegram.Message`: On success, if edited message is sent by the bot, the
     |          edited Message is returned, otherwise ``True`` is returned.
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  eeddiitt__mmeessssaaggee__lliivvee__llooccaattiioonn(self, chat_id=None, message_id=None, inline_message_id=None, latitude=None, longitude=None, location=None, reply_markup=None, **kwargs)
     |      Use this method to edit live location messages sent by the bot or via the bot
     |      (for inline bots). A location can be edited until its :attr:`live_period` expires or
     |      editing is explicitly disabled by a call to :attr:`stop_message_live_location`.
     |      
     |      Note:
     |          You can either supply a :obj:`latitude` and :obj:`longitude` or a :obj:`location`.
     |      
     |      Args:
     |          chat_id (:obj:`int` | :obj:`str`): Unique identifier for the target chat or username
     |              of the target channel (in the format @channelusername).
     |          message_id (:obj:`int`, optional): Required if inline_message_id is not specified.
     |              Identifier of the sent message.
     |          inline_message_id (:obj:`str`, optional): Required if chat_id and message_id are not
     |              specified. Identifier of the inline message.
     |          latitude (:obj:`float`, optional): Latitude of location.
     |          longitude (:obj:`float`, optional): Longitude of location.
     |          location (:class:`telegram.Location`, optional): The location to send.
     |          reply_markup (:class:`telegram.ReplyMarkup`, optional): Additional interface options. A
     |              JSON-serialized object for an inline keyboard, custom reply keyboard, instructions
     |              to remove reply keyboard or to force a reply from the user.
     |          timeout (:obj:`int` | :obj:`float`, optional): If this value is specified, use it as
     |              the read timeout from the server (instead of the one specified during creation of
     |              the connection pool).
     |      
     |      Returns:
     |           :class:`telegram.Message`: On success the edited message.
     |  
     |  eeddiitt__mmeessssaaggee__mmeeddiiaa(self, chat_id=None, message_id=None, inline_message_id=None, media=None, reply_markup=None, timeout=None, **kwargs)
     |      Use this method to edit audio, document, photo, or video messages. If a message is a
     |      part of a message album, then it can be edited only to a photo or a video. Otherwise,
     |      message type can be changed arbitrarily. When inline message is edited, new file can't be
     |      uploaded. Use previously uploaded file via its file_id or specify a URL. On success, if the
     |      edited message was sent by the bot, the edited Message is returned, otherwise True is
     |      returned.
     |      
     |      Args:
     |          chat_id (:obj:`int` | :obj:`str`, optional): Unique identifier for the target chat or
     |              username of the target`channel (in the format @channelusername).
     |          message_id (:obj:`int`, optional): Required if inline_message_id is not specified.
     |              Identifier of the sent message.
     |          inline_message_id (:obj:`str`, optional): Required if chat_id and message_id are not
     |              specified. Identifier of the inline message.
     |          media (:class:`telegram.InputMedia`): An object for a new media content
     |              of the message.
     |          reply_markup (:class:`telegram.ReplyMarkup`, optional): Additional interface options. A
     |              JSON-serialized object for an inline keyboard, custom reply keyboard, instructions
     |              to remove reply keyboard or to force a reply from the user.
     |          timeout (:obj:`int` | :obj:`float`, optional): If this value is specified, use it as
     |              the read timeout from the server (instead of the one specified during creation of
     |              the connection pool).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  eeddiitt__mmeessssaaggee__rreeppllyy__mmaarrkkuupp(self, chat_id=None, message_id=None, inline_message_id=None, reply_markup=None, timeout=None, **kwargs)
     |      Use this method to edit only the reply markup of messages sent by the bot or via the bot
     |      (for inline bots).
     |      
     |      Args:
     |          chat_id (:obj:`int` | :obj:`str`): Unique identifier for the target chat or username
     |              of the target`channel (in the format @channelusername).
     |          message_id (:obj:`int`, optional): Required if inline_message_id is not specified.
     |              Identifier of the sent message.
     |          inline_message_id (:obj:`str`, optional): Required if chat_id and message_id are not
     |              specified. Identifier of the inline message.
     |          reply_markup (:class:`telegram.ReplyMarkup`, optional): Additional interface options. A
     |              JSON-serialized object for an inline keyboard, custom reply keyboard, instructions
     |              to remove reply keyboard or to force a reply from the user.
     |          timeout (:obj:`int` | :obj:`float`, optional): If this value is specified, use it as
     |              the read timeout from the server (instead of the one specified during creation of
     |              the connection pool).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |      
     |      Returns:
     |          :class:`telegram.Message`: On success, if edited message is sent by the bot, the
     |          editedMessage is returned, otherwise ``True`` is returned.
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  eeddiitt__mmeessssaaggee__tteexxtt(self, text, chat_id=None, message_id=None, inline_message_id=None, parse_mode=None, disable_web_page_preview=None, reply_markup=None, timeout=None, **kwargs)
     |      Use this method to edit text and game messages sent by the bot or via the bot (for inline
     |      bots).
     |      
     |      Args:
     |          chat_id (:obj:`int` | :obj:`str`): Unique identifier for the target chat or username
     |              of the target channel (in the format @channelusername).
     |          message_id (:obj:`int`, optional): Required if inline_message_id is not specified.
     |              Identifier of the sent message.
     |          inline_message_id (:obj:`str`, optional): Required if chat_id and message_id are not
     |              specified. Identifier of the inline message.
     |          text (:obj:`str`): New text of the message.
     |          parse_mode (:obj:`str`): Send Markdown or HTML, if you want Telegram apps to show bold,
     |              italic, fixed-width text or inline URLs in your bot's message. See the constants in
     |              :class:`telegram.ParseMode` for the available modes.
     |          disable_web_page_preview (:obj:`bool`, optional): Disables link previews for links in
     |              this message.
     |          reply_markup (:class:`telegram.ReplyMarkup`, optional): Additional interface options. A
     |              JSON-serialized object for an inline keyboard, custom reply keyboard, instructions
     |              to remove reply keyboard or to force a reply from the user.
     |          timeout (:obj:`int` | :obj:`float`, optional): If this value is specified, use it as
     |              the read timeout from the server (instead of the one specified during creation of
     |              the connection pool).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |      
     |      Returns:
     |          :class:`telegram.Message`: On success, if edited message is sent by the bot, the
     |          edited Message is returned, otherwise ``True`` is returned.
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  eexxppoorrttCChhaattIInnvviitteeLLiinnkk = export_chat_invite_link(self, chat_id, timeout=None, **kwargs)
     |  
     |  eexxppoorrtt__cchhaatt__iinnvviittee__lliinnkk(self, chat_id, timeout=None, **kwargs)
     |      Use this method to export an invite link to a supergroup or a channel. The bot must be an
     |      administrator in the chat for this to work and must have the appropriate admin rights.
     |      
     |      Args:
     |          chat_id (:obj:`int` | :obj:`str`): Unique identifier for the target chat or username
     |              of the target`channel (in the format @channelusername).
     |          timeout (:obj:`int` | :obj:`float`, optional): If this value is specified, use it as
     |              the read timeout from the server (instead of the one specified during creation of
     |              the connection pool).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments
     |      
     |      Returns:
     |          :obj:`str`: Exported invite link on success.
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  ffoorrwwaarrddMMeessssaaggee = forward_message(self, chat_id, from_chat_id, message_id, disable_notification=False, timeout=None, **kwargs)
     |  
     |  ffoorrwwaarrdd__mmeessssaaggee(self, chat_id, from_chat_id, message_id, disable_notification=False, timeout=None, **kwargs)
     |      Use this method to forward messages of any kind.
     |      
     |      Args:
     |          chat_id (:obj:`int` | :obj:`str`): Unique identifier for the target chat or username
     |              of the target channel (in the format @channelusername).
     |          from_chat_id (:obj:`int` | :obj:`str`): Unique identifier for the chat where the
     |              original message was sent (or channel username in the format @channelusername).
     |          disable_notification (:obj:`bool`, optional): Sends the message silently. Users will
     |              receive a notification with no sound.
     |          message_id (:obj:`int`): Message identifier in the chat specified in from_chat_id.
     |          timeout (:obj:`int` | :obj:`float`, optional): If this value is specified, use it as
     |          the read timeout
     |              from the server (instead of the one specified during creation of the connection
     |              pool).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |      
     |      Returns:
     |          :class:`telegram.Message`: On success, the sent Message is returned.
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  ggeettCChhaatt = get_chat(self, chat_id, timeout=None, **kwargs)
     |  
     |  ggeettCChhaattAAddmmiinniissttrraattoorrss = get_chat_administrators(self, chat_id, timeout=None, **kwargs)
     |  
     |  ggeettCChhaattMMeemmbbeerr = get_chat_member(self, chat_id, user_id, timeout=None, **kwargs)
     |  
     |  ggeettCChhaattMMeemmbbeerrssCCoouunntt = get_chat_members_count(self, chat_id, timeout=None, **kwargs)
     |  
     |  ggeettFFiillee = get_file(self, file_id, timeout=None, **kwargs)
     |  
     |  ggeettGGaammeeHHiigghhSSccoorreess = get_game_high_scores(self, user_id, chat_id=None, message_id=None, inline_message_id=None, timeout=None, **kwargs)
     |  
     |  ggeettMMee = get_me(self, timeout=None, **kwargs)
     |  
     |  ggeettSSttiicckkeerrSSeett = get_sticker_set(self, name, timeout=None, **kwargs)
     |  
     |  ggeettUUppddaatteess = get_updates(self, offset=None, limit=100, timeout=0, read_latency=2.0, allowed_updates=None, **kwargs)
     |  
     |  ggeettUUsseerrPPrrooffiilleePPhhoottooss = get_user_profile_photos(self, user_id, offset=None, limit=100, timeout=None, **kwargs)
     |  
     |  ggeettWWeebbhhooookkIInnffoo = get_webhook_info(self, timeout=None, **kwargs)
     |  
     |  ggeett__cchhaatt(self, chat_id, timeout=None, **kwargs)
     |      Use this method to get up to date information about the chat (current name of the user for
     |      one-on-one conversations, current username of a user, group or channel, etc.).
     |      
     |      Args:
     |          chat_id (:obj:`int` | :obj:`str`): Unique identifier for the target chat or username
     |              of the target`channel (in the format @channelusername).
     |          timeout (:obj:`int` | :obj:`float`, optional): If this value is specified, use it as
     |              the read timeout from the server (instead of the one specified during creation of
     |              the connection pool).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |      
     |      Returns:
     |          :class:`telegram.Chat`
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  ggeett__cchhaatt__aaddmmiinniissttrraattoorrss(self, chat_id, timeout=None, **kwargs)
     |      Use this method to get a list of administrators in a chat. On success, returns an Array of
     |      ChatMember objects that contains information about all chat administrators except other
     |      bots. If the chat is a group or a supergroup and no administrators were appointed,
     |      only the creator will be returned.
     |      
     |      Args:
     |          chat_id (:obj:`int` | :obj:`str`): Unique identifier for the target chat or username
     |              of the target`channel (in the format @channelusername).
     |          timeout (:obj:`int` | :obj:`float`, optional): If this value is specified, use it as
     |              the read timeout from the server (instead of the one specified during creation of
     |              the connection pool).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |      
     |      Returns:
     |          List[:class:`telegram.ChatMember`]
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  ggeett__cchhaatt__mmeemmbbeerr(self, chat_id, user_id, timeout=None, **kwargs)
     |      Use this method to get information about a member of a chat.
     |      
     |      Args:
     |          chat_id (:obj:`int` | :obj:`str`): Unique identifier for the target chat or username
     |              of the target`channel (in the format @channelusername).
     |          user_id (:obj:`int`): Unique identifier of the target user.
     |          timeout (:obj:`int` | :obj:`float`, optional): If this value is specified, use it as
     |              the read timeout from the server (instead of the one specified during creation of
     |              the connection pool).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |      
     |      Returns:
     |          :class:`telegram.ChatMember`
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  ggeett__cchhaatt__mmeemmbbeerrss__ccoouunntt(self, chat_id, timeout=None, **kwargs)
     |      Use this method to get the number of members in a chat
     |      
     |      Args:
     |          chat_id (:obj:`int` | :obj:`str`): Unique identifier for the target chat or username
     |              of the target`channel (in the format @channelusername).
     |          timeout (:obj:`int` | :obj:`float`, optional): If this value is specified, use it as
     |              the read timeout from the server (instead of the one specified during creation of
     |              the connection pool).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |      
     |      Returns:
     |          int: Number of members in the chat.
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  ggeett__ffiillee(self, file_id, timeout=None, **kwargs)
     |      Use this method to get basic info about a file and prepare it for downloading. For the
     |      moment, bots can download files of up to 20MB in size. The file can then be downloaded
     |      with :attr:`telegram.File.download`. It is guaranteed that the link will be
     |      valid for at least 1 hour. When the link expires, a new one can be requested by
     |      calling get_file again.
     |      
     |      Args:
     |          file_id (:obj:`str` | :class:`telegram.Audio` | :class:`telegram.Document` |                               :class:`telegram.PhotoSize` | :class:`telegram.Sticker` |                                         :class:`telegram.Video` | :class:`telegram.VideoNote` |                                           :class:`telegram.Voice`):
     |              Either the file identifier or an object that has a file_id attribute
     |              to get file information about.
     |          timeout (:obj:`int` | :obj:`float`, optional): If this value is specified, use it as
     |              the read timeout from the server (instead of the one specified during creation of
     |              the connection pool).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |      
     |      Returns:
     |          :class:`telegram.File`
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  ggeett__ggaammee__hhiigghh__ssccoorreess(self, user_id, chat_id=None, message_id=None, inline_message_id=None, timeout=None, **kwargs)
     |      Use this method to get data for high score tables. Will return the score of the specified
     |      user and several of his neighbors in a game
     |      
     |      Args:
     |          user_id (:obj:`int`): User identifier.
     |          chat_id (:obj:`int` | :obj:`str`, optional): Required if inline_message_id is not
     |              specified. Unique identifier for the target chat.
     |          message_id (:obj:`int`, optional): Required if inline_message_id is not specified.
     |              Identifier of the sent message.
     |          inline_message_id (:obj:`str`, optional): Required if chat_id and message_id are not
     |              specified. Identifier of the inline message.
     |          timeout (:obj:`int` | :obj:`float`, optional): If this value is specified, use it as
     |              the read timeout from the server (instead of the one specified during creation of
     |              the connection pool).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |      
     |      Returns:
     |          List[:class:`telegram.GameHighScore`]
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  ggeett__mmee(self, timeout=None, **kwargs)
     |      A simple method for testing your bot's auth token. Requires no parameters.
     |      
     |      Args:
     |          timeout (:obj:`int` | :obj:`float`, optional): If this value is specified, use it as
     |              the read timeout from the server (instead of the one specified during creation of
     |              the connection pool).
     |      
     |      Returns:
     |          :class:`telegram.User`: A :class:`telegram.User` instance representing that bot if the
     |          credentials are valid, :obj:`None` otherwise.
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  ggeett__ssttiicckkeerr__sseett(self, name, timeout=None, **kwargs)
     |      Use this method to get a sticker set.
     |      
     |      Args:
     |          name (:obj:`str`): Short name of the sticker set that is used in t.me/addstickers/
     |              URLs (e.g., animals)
     |          timeout (:obj:`int` | :obj:`float`, optional): If this value is specified, use it as
     |              the read timeout from the server (instead of the one specified during
     |              creation of the connection pool).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |      
     |      Returns:
     |          :class:`telegram.StickerSet`
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  ggeett__uuppddaatteess(self, offset=None, limit=100, timeout=0, read_latency=2.0, allowed_updates=None, **kwargs)
     |      Use this method to receive incoming updates using long polling.
     |      
     |      Args:
     |          offset (:obj:`int`, optional): Identifier of the first update to be returned. Must be
     |              greater by one than the highest among the identifiers of previously received
     |              updates. By default, updates starting with the earliest unconfirmed update are
     |              returned. An update is considered confirmed as soon as getUpdates is called with an
     |              offset higher than its update_id. The negative offset can be specified to retrieve
     |              updates starting from -offset update from the end of the updates queue. All
     |              previous updates will forgotten.
     |          limit (:obj:`int`, optional): Limits the number of updates to be retrieved. Values
     |              between 1-100 are accepted. Defaults to 100.
     |          timeout (:obj:`int`, optional): Timeout in seconds for long polling. Defaults to 0,
     |              i.e. usual short polling. Should be positive, short polling should be used for
     |              testing purposes only.
     |          allowed_updates (List[:obj:`str`]), optional): List the types of updates you want your
     |              bot to receive. For example, specify ["message", "edited_channel_post",
     |              "callback_query"] to only receive updates of these types. See
     |              :class:`telegram.Update` for a complete list of available update types.
     |              Specify an empty list to receive all updates regardless of type (default). If not
     |              specified, the previous setting will be used. Please note that this parameter
     |              doesn't affect updates created before the call to the get_updates, so unwanted
     |              updates may be received for a short period of time.
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |      
     |      Notes:
     |          1. This method will not work if an outgoing webhook is set up.
     |          2. In order to avoid getting duplicate updates, recalculate offset after each
     |             server response.
     |          3. To take full advantage of this library take a look at :class:`telegram.ext.Updater`
     |      
     |      Returns:
     |          List[:class:`telegram.Update`]
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  ggeett__uusseerr__pprrooffiillee__pphhoottooss(self, user_id, offset=None, limit=100, timeout=None, **kwargs)
     |      Use this method to get a list of profile pictures for a user.
     |      
     |      Args:
     |          user_id (:obj:`int`): Unique identifier of the target user.
     |          offset (:obj:`int`, optional): Sequential number of the first photo to be returned.
     |              By default, all photos are returned.
     |          limit (:obj:`int`, optional): Limits the number of photos to be retrieved. Values
     |              between 1-100 are accepted. Defaults to 100.
     |          timeout (:obj:`int` | :obj:`float`, optional): If this value is specified, use it as
     |              the read timeout from the server (instead of the one specified during creation of
     |              the connection pool).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |      
     |      Returns:
     |          :class:`telegram.UserProfilePhotos`
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  ggeett__wweebbhhooookk__iinnffoo(self, timeout=None, **kwargs)
     |      Use this method to get current webhook status. Requires no parameters.
     |      
     |      If the bot is using getUpdates, will return an object with the url field empty.
     |      
     |      Args:
     |          timeout (:obj:`int` | :obj:`float`, optional): If this value is specified, use it as
     |              the read timeout from the server (instead of the one specified during creation of
     |              the connection pool).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |      
     |      Returns:
     |          :class:`telegram.WebhookInfo`
     |  
     |  kkiicckkCChhaattMMeemmbbeerr = kick_chat_member(self, chat_id, user_id, timeout=None, until_date=None, **kwargs)
     |  
     |  kkiicckk__cchhaatt__mmeemmbbeerr(self, chat_id, user_id, timeout=None, until_date=None, **kwargs)
     |      Use this method to kick a user from a group or a supergroup. In the case of supergroups,
     |      the user will not be able to return to the group on their own using invite links, etc.,
     |      unless unbanned first. The bot must be an administrator in the group for this to work.
     |      
     |      Args:
     |          chat_id (:obj:`int` | :obj:`str`): Unique identifier for the target chat or  username
     |              of the target channel (in the format @channelusername).
     |          user_id (:obj:`int`): Unique identifier of the target user.
     |          timeout (:obj:`int` | :obj:`float`, optional): If this value is specified, use it as
     |              the read timeout from the server (instead of the one specified during creation of
     |              the connection pool).
     |          until_date (:obj:`int` | :obj:`datetime.datetime`, optional): Date when the user will
     |              be unbanned, unix time. If user is banned for more than 366 days or less than 30
     |              seconds from the current time they are considered to be banned forever.
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |      
     |      Note:
     |          In regular groups (non-supergroups), this method will only work if the
     |          'All Members Are Admins' setting is off in the target group. Otherwise
     |          members may only be removed by the group's creator or by the member that added them.
     |      
     |      Returns:
     |          :obj:`bool` On success, ``True`` is returned.
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  lleeaavveeCChhaatt = leave_chat(self, chat_id, timeout=None, **kwargs)
     |  
     |  lleeaavvee__cchhaatt(self, chat_id, timeout=None, **kwargs)
     |      Use this method for your bot to leave a group, supergroup or channel.
     |      
     |      Args:
     |          chat_id (:obj:`int` | :obj:`str`): Unique identifier for the target chat or username
     |              of the target`channel (in the format @channelusername).
     |          timeout (:obj:`int` | :obj:`float`, optional): If this value is specified, use it as
     |              the read timeout from the server (instead of the one specified during creation of
     |              the connection pool).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |      
     |      Returns:
     |          :obj:`bool` On success, ``True`` is returned.
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  ppiinnCChhaattMMeessssaaggee = pin_chat_message(self, chat_id, message_id, disable_notification=None, timeout=None, **kwargs)
     |  
     |  ppiinn__cchhaatt__mmeessssaaggee(self, chat_id, message_id, disable_notification=None, timeout=None, **kwargs)
     |      Use this method to pin a message in a supergroup. The bot must be an administrator in the
     |      chat for this to work and must have the appropriate admin rights.
     |      
     |      Args:
     |          chat_id (:obj:`int` | :obj:`str`): Unique identifier for the target chat or username
     |              of the target`channel (in the format @channelusername).
     |          message_id (:obj:`int`): Identifier of a message to pin.
     |          disable_notification (:obj:`bool`, optional): Pass True, if it is not necessary to send
     |              a notification to all group members about the new pinned message.
     |          timeout (:obj:`int` | :obj:`float`, optional): If this value is specified, use it as
     |              the read timeout from the server (instead of the one specified during creation of
     |              the connection pool).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments
     |      
     |      Returns:
     |          :obj:`bool`: Returns ``True`` on success.
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  pprroommootteeCChhaattMMeemmbbeerr = promote_chat_member(self, chat_id, user_id, can_change_info=None, can_post_messages=None, can_edit_messages=None, can_delete_messages=None, can_invite_users=None, can_restrict_members=None, can_pin_messages=None, can_promote_members=None, timeout=None, **kwargs)
     |  
     |  pprroommoottee__cchhaatt__mmeemmbbeerr(self, chat_id, user_id, can_change_info=None, can_post_messages=None, can_edit_messages=None, can_delete_messages=None, can_invite_users=None, can_restrict_members=None, can_pin_messages=None, can_promote_members=None, timeout=None, **kwargs)
     |      Use this method to promote or demote a user in a supergroup or a channel. The bot must be
     |      an administrator in the chat for this to work and must have the appropriate admin rights.
     |      Pass False for all boolean parameters to demote a user
     |      
     |      Args:
     |          chat_id (:obj:`int` | :obj:`str`): Unique identifier for the target chat or username
     |              of the target supergroup (in the format @supergroupusername).
     |          user_id (:obj:`int`): Unique identifier of the target user.
     |          can_change_info (:obj:`bool`, optional): Pass True, if the administrator can change
     |              chat title, photo and other settings.
     |          can_post_messages (:obj:`bool`, optional): Pass True, if the administrator can
     |              create channel posts, channels only.
     |          can_edit_messages (:obj:`bool`, optional): Pass True, if the administrator can edit
     |              messages of other users, channels only.
     |          can_delete_messages (:obj:`bool`, optional): Pass True, if the administrator can
     |              delete messages of other users.
     |          can_invite_users (:obj:`bool`, optional): Pass True, if the administrator can invite
     |              new users to the chat.
     |          can_restrict_members (:obj:`bool`, optional): Pass True, if the administrator can
     |              restrict, ban or unban chat members.
     |          can_pin_messages (:obj:`bool`, optional): Pass True, if the administrator can pin
     |              messages, supergroups only.
     |          can_promote_members (:obj:`bool`, optional): Pass True, if the administrator can add
     |              new administrators with a subset of his own privileges or demote administrators
     |              that he has promoted, directly or indirectly (promoted by administrators that were
     |              appointed by him).
     |          timeout (:obj:`int` | :obj:`float`, optional): If this value is specified, use it as
     |              the read timeout from the server (instead of the one specified during creation of
     |              the connection pool).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments
     |      
     |      Returns:
     |          :obj:`bool`: Returns True on success.
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  rreessttrriiccttCChhaattMMeemmbbeerr = restrict_chat_member(self, chat_id, user_id, until_date=None, can_send_messages=None, can_send_media_messages=None, can_send_other_messages=None, can_add_web_page_previews=None, timeout=None, **kwargs)
     |  
     |  rreessttrriicctt__cchhaatt__mmeemmbbeerr(self, chat_id, user_id, until_date=None, can_send_messages=None, can_send_media_messages=None, can_send_other_messages=None, can_add_web_page_previews=None, timeout=None, **kwargs)
     |      Use this method to restrict a user in a supergroup. The bot must be an administrator in
     |      the supergroup for this to work and must have the appropriate admin rights. Pass True for
     |      all boolean parameters to lift restrictions from a user.
     |      
     |      Args:
     |          chat_id (:obj:`int` | :obj:`str`): Unique identifier for the target chat or username
     |              of the target supergroup (in the format @supergroupusername).
     |          user_id (:obj:`int`): Unique identifier of the target user.
     |          until_date (:obj:`int` | :obj:`datetime.datetime`, optional): Date when restrictions
     |              will be lifted for the user, unix time. If user is restricted for more than 366
     |              days or less than 30 seconds from the current time, they are considered to be
     |              restricted forever.
     |          can_send_messages (:obj:`bool`, optional): Pass True, if the user can send text
     |              messages, contacts, locations and venues.
     |          can_send_media_messages (:obj:`bool`, optional): Pass True, if the user can send
     |              audios, documents, photos, videos, video notes and voice notes, implies
     |              can_send_messages.
     |          can_send_other_messages (:obj:`bool`, optional): Pass True, if the user can send
     |              animations, games, stickers and use inline bots, implies can_send_media_messages.
     |          can_add_web_page_previews (:obj:`bool`, optional): Pass True, if the user may add
     |              web page previews to their messages, implies can_send_media_messages.
     |          timeout (:obj:`int` | :obj:`float`, optional): If this value is specified, use it as
     |              the read timeout from the server (instead of the one specified during creation of
     |              the connection pool).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments
     |      
     |      Returns:
     |          :obj:`bool`: Returns True on success.
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  sseennddAAnniimmaattiioonn = send_animation(self, chat_id, animation, duration=None, width=None, height=None, thumb=None, caption=None, parse_mode=None, disable_notification=False, reply_to_message_id=None, reply_markup=None, timeout=20, **kwargs)
     |  
     |  sseennddAAuuddiioo = send_audio(self, chat_id, audio, duration=None, performer=None, title=None, caption=None, disable_notification=False, reply_to_message_id=None, reply_markup=None, timeout=20, parse_mode=None, thumb=None, **kwargs)
     |  
     |  sseennddCChhaattAAccttiioonn = send_chat_action(self, chat_id, action, timeout=None, **kwargs)
     |  
     |  sseennddCCoonnttaacctt = send_contact(self, chat_id, phone_number=None, first_name=None, last_name=None, disable_notification=False, reply_to_message_id=None, reply_markup=None, timeout=None, contact=None, vcard=None, **kwargs)
     |  
     |  sseennddDDooccuummeenntt = send_document(self, chat_id, document, filename=None, caption=None, disable_notification=False, reply_to_message_id=None, reply_markup=None, timeout=20, parse_mode=None, thumb=None, **kwargs)
     |  
     |  sseennddGGaammee = send_game(self, chat_id, game_short_name, disable_notification=False, reply_to_message_id=None, reply_markup=None, timeout=None, **kwargs)
     |  
     |  sseennddIInnvvooiiccee = send_invoice(self, chat_id, title, description, payload, provider_token, start_parameter, currency, prices, photo_url=None, photo_size=None, photo_width=None, photo_height=None, need_name=None, need_phone_number=None, need_email=None, need_shipping_address=None, is_flexible=None, disable_notification=False, reply_to_message_id=None, reply_markup=None, provider_data=None, send_phone_number_to_provider=None, send_email_to_provider=None, timeout=None, **kwargs)
     |  
     |  sseennddLLooccaattiioonn = send_location(self, chat_id, latitude=None, longitude=None, disable_notification=False, reply_to_message_id=None, reply_markup=None, timeout=None, location=None, live_period=None, **kwargs)
     |  
     |  sseennddMMeeddiiaaGGrroouupp = send_media_group(self, chat_id, media, disable_notification=None, reply_to_message_id=None, timeout=20, **kwargs)
     |  
     |  sseennddMMeessssaaggee = send_message(self, chat_id, text, parse_mode=None, disable_web_page_preview=None, disable_notification=False, reply_to_message_id=None, reply_markup=None, timeout=None, **kwargs)
     |  
     |  sseennddPPhhoottoo = send_photo(self, chat_id, photo, caption=None, disable_notification=False, reply_to_message_id=None, reply_markup=None, timeout=20, parse_mode=None, **kwargs)
     |  
     |  sseennddSSttiicckkeerr = send_sticker(self, chat_id, sticker, disable_notification=False, reply_to_message_id=None, reply_markup=None, timeout=20, **kwargs)
     |  
     |  sseennddVVeennuuee = send_venue(self, chat_id, latitude=None, longitude=None, title=None, address=None, foursquare_id=None, disable_notification=False, reply_to_message_id=None, reply_markup=None, timeout=None, venue=None, foursquare_type=None, **kwargs)
     |  
     |  sseennddVViiddeeoo = send_video(self, chat_id, video, duration=None, caption=None, disable_notification=False, reply_to_message_id=None, reply_markup=None, timeout=20, width=None, height=None, parse_mode=None, supports_streaming=None, thumb=None, **kwargs)
     |  
     |  sseennddVViiddeeooNNoottee = send_video_note(self, chat_id, video_note, duration=None, length=None, disable_notification=False, reply_to_message_id=None, reply_markup=None, timeout=20, thumb=None, **kwargs)
     |  
     |  sseennddVVooiiccee = send_voice(self, chat_id, voice, duration=None, caption=None, disable_notification=False, reply_to_message_id=None, reply_markup=None, timeout=20, parse_mode=None, **kwargs)
     |  
     |  sseenndd__aanniimmaattiioonn(self, chat_id, animation, duration=None, width=None, height=None, thumb=None, caption=None, parse_mode=None, disable_notification=False, reply_to_message_id=None, reply_markup=None, timeout=20, **kwargs)
     |      Use this method to send animation files (GIF or H.264/MPEG-4 AVC video without sound).
     |      
     |      Args:
     |          chat_id (:obj:`int` | :obj:`str`): Unique identifier for the target chat or username
     |              of the target channel (in the format @channelusername).
     |          animation (:obj:`str` | `filelike object` | :class:`telegram.Animation`): Animation to
     |              send. Pass a file_id as String to send an animation that exists on the Telegram
     |              servers (recommended), pass an HTTP URL as a String for Telegram to get an
     |              animation from the Internet, or upload a new animation using multipart/form-data.
     |              Lastly you can pass an existing :class:`telegram.Animation` object to send.
     |          duration (:obj:`int`, optional): Duration of sent animation in seconds.
     |          width (:obj:`int`, optional): Animation width.
     |          height (:obj:`int`, optional): Animation height.
     |          thumb (`filelike object`, optional): Thumbnail of the
     |              file sent. The thumbnail should be in JPEG format and less than 200 kB in size.
     |              A thumbnail's width and height should not exceed 90. Ignored if the file is not
     |              is passed as a string or file_id.
     |          caption (:obj:`str`, optional): Animation caption (may also be used when resending
     |              animations by file_id), 0-200 characters.
     |          parse_mode (:obj:`str`, optional): Send Markdown or HTML, if you want Telegram apps to
     |              show bold, italic, fixed-width text or inline URLs in the media caption. See the
     |              constants in :class:`telegram.ParseMode` for the available modes.
     |          disable_notification (:obj:`bool`, optional): Sends the message silently. Users will
     |              receive a notification with no sound.
     |          reply_to_message_id (:obj:`int`, optional): If the message is a reply, ID of the
     |              original message.
     |          reply_markup (:class:`telegram.ReplyMarkup`, optional): Additional interface options. A
     |              JSON-serialized object for an inline keyboard, custom reply keyboard, instructions
     |              to remove reply keyboard or to force a reply from the user.
     |          timeout (:obj:`int` | :obj:`float`, optional): Send file timeout (default: 20 seconds).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |      
     |      Returns:
     |          :class:`telegram.Message`: On success, the sent Message is returned.
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  sseenndd__aauuddiioo(self, chat_id, audio, duration=None, performer=None, title=None, caption=None, disable_notification=False, reply_to_message_id=None, reply_markup=None, timeout=20, parse_mode=None, thumb=None, **kwargs)
     |      Use this method to send audio files, if you want Telegram clients to display them in the
     |      music player. Your audio must be in the .mp3 format. On success, the sent Message is
     |      returned. Bots can currently send audio files of up to 50 MB in size, this limit may be
     |      changed in the future.
     |      
     |      For sending voice messages, use the sendVoice method instead.
     |      
     |      Note:
     |          The audio argument can be either a file_id, an URL or a file from disk
     |          ``open(filename, 'rb')``
     |      
     |      Args:
     |          chat_id (:obj:`int` | :obj:`str`): Unique identifier for the target chat or username
     |              of the target channel (in the format @channelusername).
     |          audio (:obj:`str` | `filelike object` | :class:`telegram.Audio`): Audio file to send.
     |              Pass a file_id as String to send an audio file that exists on the Telegram servers
     |              (recommended), pass an HTTP URL as a String for Telegram to get an audio file from
     |              the Internet, or upload a new one using multipart/form-data. Lastly you can pass
     |              an existing :class:`telegram.Audio` object to send.
     |          caption (:obj:`str`, optional): Audio caption, 0-200 characters.
     |          parse_mode (:obj:`str`, optional): Send Markdown or HTML, if you want Telegram apps to
     |              show bold, italic, fixed-width text or inline URLs in the media caption. See the
     |              constants in :class:`telegram.ParseMode` for the available modes.
     |          duration (:obj:`int`, optional): Duration of sent audio in seconds.
     |          performer (:obj:`str`, optional): Performer.
     |          title (:obj:`str`, optional): Track name.
     |          disable_notification (:obj:`bool`, optional): Sends the message silently. Users will
     |              receive a notification with no sound.
     |          reply_to_message_id (:obj:`int`, optional): If the message is a reply, ID of the
     |              original message.
     |          reply_markup (:class:`telegram.ReplyMarkup`, optional): Additional interface options. A
     |              JSON-serialized object for an inline keyboard, custom reply keyboard, instructions
     |              to remove reply keyboard or to force a reply from the user.
     |          thumb (`filelike object`, optional): Thumbnail of the
     |              file sent. The thumbnail should be in JPEG format and less than 200 kB in size.
     |              A thumbnail's width and height should not exceed 90. Ignored if the file is not
     |              is passed as a string or file_id.
     |          timeout (:obj:`int` | :obj:`float`, optional): Send file timeout (default: 20 seconds).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |      
     |      Returns:
     |          :class:`telegram.Message`: On success, the sent Message is returned.
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  sseenndd__cchhaatt__aaccttiioonn(self, chat_id, action, timeout=None, **kwargs)
     |      Use this method when you need to tell the user that something is happening on the bot's
     |      side. The status is set for 5 seconds or less (when a message arrives from your bot,
     |      Telegram clients clear its typing status).
     |      
     |      Args:
     |          chat_id (:obj:`int` | :obj:`str`): Unique identifier for the target chat or username
     |              of the target channel (in the format @channelusername).
     |          action(:class:`telegram.ChatAction` | :obj:`str`): Type of action to broadcast. Choose
     |              one, depending on what the user is about to receive. For convenience look at the
     |              constants in :class:`telegram.ChatAction`
     |          timeout (:obj:`int` | :obj:`float`, optional): If this value is specified, use it as
     |              the read timeout from the server (instead of the one specified during creation of
     |              the connection pool).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |      
     |      Returns:
     |          :obj:`bool`: ``True`` on success.
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  sseenndd__ccoonnttaacctt(self, chat_id, phone_number=None, first_name=None, last_name=None, disable_notification=False, reply_to_message_id=None, reply_markup=None, timeout=None, contact=None, vcard=None, **kwargs)
     |      Use this method to send phone contacts.
     |      
     |      Note:
     |          You can either supply :obj:`contact` or :obj:`phone_number` and :obj:`first_name`
     |          with optionally :obj:`last_name` and optionally :obj:`vcard`.
     |      
     |      Args:
     |          chat_id (:obj:`int` | :obj:`str`): Unique identifier for the target chat or username
     |              of the target channel (in the format @channelusername).
     |          phone_number (:obj:`str`, optional): Contact's phone number.
     |          first_name (:obj:`str`, optional): Contact's first name.
     |          last_name (:obj:`str`, optional): Contact's last name.
     |          vcard (:obj:`str`, optional): Additional data about the contact in the form of a vCard,
     |              0-2048 bytes.
     |          contact (:class:`telegram.Contact`, optional): The contact to send.
     |          disable_notification (:obj:`bool`, optional): Sends the message silently. Users will
     |              receive a notification with no sound.
     |          reply_to_message_id (:obj:`int`, optional): If the message is a reply, ID of the
     |              original message.
     |          reply_markup (:class:`telegram.ReplyMarkup`, optional): Additional interface options. A
     |              JSON-serialized object for an inline keyboard, custom reply keyboard, instructions
     |              to remove reply keyboard or to force a reply from the user.
     |          timeout (:obj:`int` | :obj:`float`, optional): If this value is specified, use it as
     |              the read timeout from the server (instead of the one specified during creation of
     |              the connection pool).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |      
     |      Returns:
     |          :class:`telegram.Message`: On success, the sent Message is returned.
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  sseenndd__ddooccuummeenntt(self, chat_id, document, filename=None, caption=None, disable_notification=False, reply_to_message_id=None, reply_markup=None, timeout=20, parse_mode=None, thumb=None, **kwargs)
     |      Use this method to send general files.
     |      
     |      Note:
     |          The document argument can be either a file_id, an URL or a file from disk
     |          ``open(filename, 'rb')``
     |      
     |      Args:
     |          chat_id (:obj:`int` | :obj:`str`): Unique identifier for the target chat or username
     |              of the target channel (in the format @channelusername).
     |          document (:obj:`str` | `filelike object` | :class:`telegram.Document`): File to send.
     |              Pass a file_id as String to send a file that exists on the Telegram servers
     |              (recommended), pass an HTTP URL as a String for Telegram to get a file from the
     |              Internet, or upload a new one using multipart/form-data. Lastly you can pass
     |              an existing :class:`telegram.Document` object to send.
     |          filename (:obj:`str`, optional): File name that shows in telegram message (it is useful
     |              when you send file generated by temp module, for example). Undocumented.
     |          caption (:obj:`str`, optional): Document caption (may also be used when resending
     |              documents by file_id), 0-200 characters.
     |          parse_mode (:obj:`str`, optional): Send Markdown or HTML, if you want Telegram apps to
     |              show bold, italic, fixed-width text or inline URLs in the media caption. See the
     |              constants in :class:`telegram.ParseMode` for the available modes.
     |          disable_notification (:obj:`bool`, optional): Sends the message silently. Users will
     |              receive a notification with no sound.
     |          reply_to_message_id (:obj:`int`, optional): If the message is a reply, ID of the
     |              original message.
     |          reply_markup (:class:`telegram.ReplyMarkup`, optional): Additional interface options. A
     |              JSON-serialized object for an inline keyboard, custom reply keyboard, instructions
     |              to remove reply keyboard or to force a reply from the user.
     |          thumb (`filelike object`, optional): Thumbnail of the
     |              file sent. The thumbnail should be in JPEG format and less than 200 kB in size.
     |              A thumbnail's width and height should not exceed 90. Ignored if the file is not
     |              is passed as a string or file_id.
     |          timeout (:obj:`int` | :obj:`float`, optional): Send file timeout (default: 20 seconds).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |      
     |      Returns:
     |          :class:`telegram.Message`: On success, the sent Message is returned.
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  sseenndd__ggaammee(self, chat_id, game_short_name, disable_notification=False, reply_to_message_id=None, reply_markup=None, timeout=None, **kwargs)
     |      Use this method to send a game.
     |      
     |      Args:
     |          chat_id (:obj:`int` | :obj:`str`): Unique identifier for the target chat or username
     |              of the target channel (in the format @channelusername).
     |          game_short_name (:obj:`str`): Short name of the game, serves as the unique identifier
     |              for the game. Set up your games via Botfather.
     |          disable_notification (:obj:`bool`, optional): Sends the message silently. Users will
     |              receive a notification with no sound.
     |          reply_to_message_id (:obj:`int`, optional): If the message is a reply, ID of the
     |              original message.
     |          reply_markup (:class:`telegram.ReplyMarkup`, optional): Additional interface options. A
     |              JSON-serialized object for an inline keyboard, custom reply keyboard, instructions
     |              to remove reply keyboard or to force a reply from the user.
     |          timeout (:obj:`int` | :obj:`float`, optional): If this value is specified, use it as
     |              the read timeout from the server (instead of the one specified during creation of
     |              the connection pool).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |      
     |      Returns:
     |          :class:`telegram.Message`: On success, the sent Message is returned.
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  sseenndd__iinnvvooiiccee(self, chat_id, title, description, payload, provider_token, start_parameter, currency, prices, photo_url=None, photo_size=None, photo_width=None, photo_height=None, need_name=None, need_phone_number=None, need_email=None, need_shipping_address=None, is_flexible=None, disable_notification=False, reply_to_message_id=None, reply_markup=None, provider_data=None, send_phone_number_to_provider=None, send_email_to_provider=None, timeout=None, **kwargs)
     |      Use this method to send invoices.
     |      
     |      Args:
     |          chat_id (:obj:`int` | :obj:`str`): Unique identifier for the target private chat.
     |          title (:obj:`str`): Product name.
     |          description (:obj:`str`): Product description.
     |          payload (:obj:`str`): Bot-defined invoice payload, 1-128 bytes. This will not be
     |              displayed to the user, use for your internal processes.
     |          provider_token (:obj:`str`): Payments provider token, obtained via Botfather.
     |          start_parameter (:obj:`str`): Unique deep-linking parameter that can be used to
     |              generate this invoice when used as a start parameter.
     |          currency (:obj:`str`): Three-letter ISO 4217 currency code.
     |          prices (List[:class:`telegram.LabeledPrice`)]: Price breakdown, a list of components
     |              (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.).
     |          provider_data (:obj:`str` | :obj:`object`, optional): JSON-encoded data about the
     |              invoice, which will be shared with the payment provider. A detailed description of
     |              required fields should be provided by the payment provider. When an object is
     |              passed, it will be encoded as JSON.
     |          photo_url (:obj:`str`, optional): URL of the product photo for the invoice. Can be a
     |              photo of the goods or a marketing image for a service. People like it better when
     |              they see what they are paying for.
     |          photo_size (:obj:`str`, optional): Photo size.
     |          photo_width (:obj:`int`, optional): Photo width.
     |          photo_height (:obj:`int`, optional): Photo height.
     |          need_name (:obj:`bool`, optional): Pass True, if you require the user's full name to
     |              complete the order.
     |          need_phone_number (:obj:`bool`, optional): Pass True, if you require the user's
     |              phone number to complete the order.
     |          need_email (:obj:`bool`, optional): Pass True, if you require the user's email to
     |              complete the order.
     |          need_shipping_address (:obj:`bool`, optional): Pass True, if you require the user's
     |              shipping address to complete the order.
     |          send_phone_number_to_provider (:obj:`bool`, optional): Pass True, if user's phone
     |              number should be sent to provider.
     |          send_email_to_provider (:obj:`bool`, optional): Pass True, if user's email address
     |              should be sent to provider.
     |          is_flexible (:obj:`bool`, optional): Pass True, if the final price depends on the
     |              shipping method.
     |          disable_notification (:obj:`bool`, optional): Sends the message silently. Users will
     |              receive a notification with no sound.
     |          reply_to_message_id (:obj:`int`, optional): If the message is a reply, ID of the
     |              original message.
     |          reply_markup (:class:`telegram.ReplyMarkup`, optional): Additional interface options.
     |              An inlinekeyboard. If empty, one 'Pay total price' button will be shown.
     |              If not empty, the first button must be a Pay button.
     |          timeout (:obj:`int` | :obj:`float`, optional): If this value is specified, use it as
     |              the read timeout from the server (instead of the one specified during creation of
     |              the connection pool).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |      
     |      Returns:
     |          :class:`telegram.Message`: On success, the sent Message is returned.
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  sseenndd__llooccaattiioonn(self, chat_id, latitude=None, longitude=None, disable_notification=False, reply_to_message_id=None, reply_markup=None, timeout=None, location=None, live_period=None, **kwargs)
     |      Use this method to send point on the map.
     |      
     |      Note:
     |          You can either supply a :obj:`latitude` and :obj:`longitude` or a :obj:`location`.
     |      
     |      Args:
     |          chat_id (:obj:`int` | :obj:`str`): Unique identifier for the target chat or username
     |              of the target channel (in the format @channelusername).
     |          latitude (:obj:`float`, optional): Latitude of location.
     |          longitude (:obj:`float`, optional): Longitude of location.
     |          location (:class:`telegram.Location`, optional): The location to send.
     |          live_period (:obj:`int`, optional): Period in seconds for which the location will be
     |              updated, should be between 60 and 86400.
     |          disable_notification (:obj:`bool`, optional): Sends the message silently. Users will
     |              receive a notification with no sound.
     |          reply_to_message_id (:obj:`int`, optional): If the message is a reply, ID of the
     |                  original message.
     |          reply_markup (:class:`telegram.ReplyMarkup`, optional): Additional interface options. A
     |              JSON-serialized object for an inline keyboard, custom reply keyboard,
     |              instructions to remove reply keyboard or to force a reply from the user.
     |          timeout (:obj:`int` | :obj:`float`, optional): If this value is specified, use it as
     |              the read timeout from the server (instead of the one specified during creation of
     |              the connection pool).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |      
     |      Returns:
     |          :class:`telegram.Message`: On success, the sent Message is returned.
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  sseenndd__mmeeddiiaa__ggrroouupp(self, chat_id, media, disable_notification=None, reply_to_message_id=None, timeout=20, **kwargs)
     |      Use this method to send a group of photos or videos as an album.
     |      
     |      Args:
     |          chat_id (:obj:`int` | :obj:`str`): Unique identifier for the target chat or username
     |              of the target channel (in the format @channelusername).
     |          media (List[:class:`telegram.InputMedia`]): An array describing photos and videos to be
     |              sent, must include 2–10 items.
     |          disable_notification (:obj:`bool`, optional): Sends the message silently. Users will
     |              receive a notification with no sound.
     |          reply_to_message_id (:obj:`int`, optional): If the message is a reply, ID of the
     |              original message.
     |          timeout (:obj:`int` | :obj:`float`, optional): Send file timeout (default: 20 seconds).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |      
     |      Returns:
     |          List[:class:`telegram.Message`]: An array of the sent Messages.
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  sseenndd__mmeessssaaggee(self, chat_id, text, parse_mode=None, disable_web_page_preview=None, disable_notification=False, reply_to_message_id=None, reply_markup=None, timeout=None, **kwargs)
     |      Use this method to send text messages.
     |      
     |      Args:
     |          chat_id (:obj:`int` | :obj:`str`): Unique identifier for the target chat or username
     |              of the target channel (in the format @channelusername).
     |          text (:obj:`str`): Text of the message to be sent. Max 4096 characters. Also found as
     |              :attr:`telegram.constants.MAX_MESSAGE_LENGTH`.
     |          parse_mode (:obj:`str`): Send Markdown or HTML, if you want Telegram apps to show bold,
     |              italic, fixed-width text or inline URLs in your bot's message. See the constants in
     |              :class:`telegram.ParseMode` for the available modes.
     |          disable_web_page_preview (:obj:`bool`, optional): Disables link previews for links in
     |              this message.
     |          disable_notification (:obj:`bool`, optional): Sends the message silently. Users will
     |              receive a notification with no sound.
     |          reply_to_message_id (:obj:`int`, optional): If the message is a reply, ID of the
     |              original message.
     |          reply_markup (:class:`telegram.ReplyMarkup`, optional): Additional interface options.
     |              A JSON-serialized object for an inline keyboard, custom reply keyboard,
     |              instructions to remove reply keyboard or to force a reply from the user.
     |          timeout (:obj:`int` | :obj:`float`, optional): If this value is specified, use it as
     |              the read timeout from the server (instead of the one specified during creation of
     |              the connection pool).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |      
     |      Returns:
     |          :class:`telegram.Message`: On success, the sent message is returned.
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  sseenndd__pphhoottoo(self, chat_id, photo, caption=None, disable_notification=False, reply_to_message_id=None, reply_markup=None, timeout=20, parse_mode=None, **kwargs)
     |      Use this method to send photos.
     |      
     |      Note:
     |          The photo argument can be either a file_id, an URL or a file from disk
     |          ``open(filename, 'rb')``
     |      
     |      Args:
     |          chat_id (:obj:`int` | :obj:`str`): Unique identifier for the target chat or username
     |              of the target channel (in the format @channelusername).
     |          photo (:obj:`str` | `filelike object` | :class:`telegram.PhotoSize`): Photo to send.
     |              Pass a file_id as String to send a photo that exists on the Telegram servers
     |              (recommended), pass an HTTP URL as a String for Telegram to get a photo from the
     |              Internet, or upload a new photo using multipart/form-data. Lastly you can pass
     |              an existing :class:`telegram.PhotoSize` object to send.
     |          caption (:obj:`str`, optional): Photo caption (may also be used when resending photos
     |              by file_id), 0-200 characters.
     |          parse_mode (:obj:`str`, optional): Send Markdown or HTML, if you want Telegram apps to
     |              show bold, italic, fixed-width text or inline URLs in the media caption. See the
     |              constants in :class:`telegram.ParseMode` for the available modes.
     |          disable_notification (:obj:`bool`, optional): Sends the message silently. Users will
     |              receive a notification with no sound.
     |          reply_to_message_id (:obj:`int`, optional): If the message is a reply, ID of the
     |              original message.
     |          reply_markup (:class:`telegram.ReplyMarkup`, optional): Additional interface options. A
     |              JSON-serialized object for an inline keyboard, custom reply keyboard, instructions
     |              to remove reply keyboard or to force a reply from the user.
     |          timeout (:obj:`int` | :obj:`float`, optional): Send file timeout (default: 20 seconds).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |      
     |      Returns:
     |          :class:`telegram.Message`: On success, the sent Message is returned.
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  sseenndd__ssttiicckkeerr(self, chat_id, sticker, disable_notification=False, reply_to_message_id=None, reply_markup=None, timeout=20, **kwargs)
     |      Use this method to send .webp stickers.
     |      
     |      Note:
     |          The sticker argument can be either a file_id, an URL or a file from disk
     |          ``open(filename, 'rb')``
     |      
     |      Args:
     |          chat_id (:obj:`int` | :obj:`str`): Unique identifier for the target chat or username
     |              of the target channel (in the format @channelusername).
     |          sticker (:obj:`str` | `filelike object` :class:`telegram.Sticker`): Sticker to send.
     |              Pass a file_id as String to send a file that exists on the Telegram servers
     |              (recommended), pass an HTTP URL as a String for Telegram to get a .webp file from
     |              the Internet, or upload a new one using multipart/form-data. Lastly you can pass
     |              an existing :class:`telegram.Sticker` object to send.
     |          disable_notification (:obj:`bool`, optional): Sends the message silently. Users will
     |              receive a notification with no sound.
     |          reply_to_message_id (:obj:`int`, optional): If the message is a reply, ID of the
     |              original message.
     |          reply_markup (:class:`telegram.ReplyMarkup`, optional): Additional interface options. A
     |              JSON-serialized object for an inline keyboard, custom reply keyboard, instructions
     |              to remove reply keyboard or to force a reply from the user.
     |          timeout (:obj:`int` | :obj:`float`, optional): Send file timeout (default: 20 seconds).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |      
     |      Returns:
     |          :class:`telegram.Message`: On success, the sent Message is returned.
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  sseenndd__vveennuuee(self, chat_id, latitude=None, longitude=None, title=None, address=None, foursquare_id=None, disable_notification=False, reply_to_message_id=None, reply_markup=None, timeout=None, venue=None, foursquare_type=None, **kwargs)
     |      Use this method to send information about a venue.
     |      
     |      Note:
     |          you can either supply :obj:`venue`, or :obj:`latitude`, :obj:`longitude`,
     |          :obj:`title` and :obj:`address` and optionally :obj:`foursquare_id` and optionally
     |          :obj:`foursquare_type`.
     |      
     |      Args:
     |          chat_id (:obj:`int` | :obj:`str`): Unique identifier for the target chat or username
     |              of the target channel (in the format @channelusername).
     |          latitude (:obj:`float`, optional): Latitude of venue.
     |          longitude (:obj:`float`, optional): Longitude of venue.
     |          title (:obj:`str`, optional): Name of the venue.
     |          address (:obj:`str`, optional): Address of the venue.
     |          foursquare_id (:obj:`str`, optional): Foursquare identifier of the venue.
     |          foursquare_type (:obj:`str`, optional): Foursquare type of the venue, if known.
     |              (For example, "arts_entertainment/default", "arts_entertainment/aquarium" or
     |              "food/icecream".)
     |          venue (:class:`telegram.Venue`, optional): The venue to send.
     |          disable_notification (:obj:`bool`, optional): Sends the message silently. Users will
     |              receive a notification with no sound.
     |          reply_to_message_id (:obj:`int`, optional): If the message is a reply, ID of the
     |              original message.
     |          reply_markup (:class:`telegram.ReplyMarkup`, optional): Additional interface options. A
     |              JSON-serialized object for an inline keyboard, custom reply keyboard, instructions
     |              to remove reply keyboard or to force a reply from the user.
     |          timeout (:obj:`int` | :obj:`float`, optional): If this value is specified, use it as
     |              the read timeout from the server (instead of the one specified during creation of
     |              the connection pool).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |      
     |      Returns:
     |          :class:`telegram.Message`: On success, the sent Message is returned.
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  sseenndd__vviiddeeoo(self, chat_id, video, duration=None, caption=None, disable_notification=False, reply_to_message_id=None, reply_markup=None, timeout=20, width=None, height=None, parse_mode=None, supports_streaming=None, thumb=None, **kwargs)
     |      Use this method to send video files, Telegram clients support mp4 videos
     |      (other formats may be sent as Document).
     |      
     |      Note:
     |          The video argument can be either a file_id, an URL or a file from disk
     |          ``open(filename, 'rb')``
     |      
     |      Args:
     |          chat_id (:obj:`int` | :obj:`str`): Unique identifier for the target chat or username
     |              of the target channel (in the format @channelusername).
     |          video (:obj:`str` | `filelike object` | :class:`telegram.Video`): Video file to send.
     |              Pass a file_id as String to send an video file that exists on the Telegram servers
     |              (recommended), pass an HTTP URL as a String for Telegram to get an video file from
     |              the Internet, or upload a new one using multipart/form-data. Lastly you can pass
     |              an existing :class:`telegram.Video` object to send.
     |          duration (:obj:`int`, optional): Duration of sent video in seconds.
     |          width (:obj:`int`, optional): Video width.
     |          height (:obj:`int`, optional): Video height.
     |          caption (:obj:`str`, optional): Video caption (may also be used when resending videos
     |              by file_id), 0-200 characters.
     |          parse_mode (:obj:`str`, optional): Send Markdown or HTML, if you want Telegram apps to
     |              show bold, italic, fixed-width text or inline URLs in the media caption. See the
     |              constants in :class:`telegram.ParseMode` for the available modes.
     |          supports_streaming (:obj:`bool`, optional): Pass True, if the uploaded video is
     |              suitable for streaming.
     |          disable_notification (:obj:`bool`, optional): Sends the message silently. Users will
     |              receive a notification with no sound.
     |          reply_to_message_id (:obj:`int`, optional): If the message is a reply, ID of the
     |              original message.
     |          reply_markup (:class:`telegram.ReplyMarkup`, optional): Additional interface options. A
     |              JSON-serialized object for an inline keyboard, custom reply keyboard, instructions
     |              to remove reply keyboard or to force a reply from the user.
     |          thumb (`filelike object`, optional): Thumbnail of the
     |              file sent. The thumbnail should be in JPEG format and less than 200 kB in size.
     |              A thumbnail's width and height should not exceed 90. Ignored if the file is not
     |              is passed as a string or file_id.
     |          timeout (:obj:`int` | :obj:`float`, optional): Send file timeout (default: 20 seconds).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |      
     |      Returns:
     |          :class:`telegram.Message`: On success, the sent Message is returned.
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  sseenndd__vviiddeeoo__nnoottee(self, chat_id, video_note, duration=None, length=None, disable_notification=False, reply_to_message_id=None, reply_markup=None, timeout=20, thumb=None, **kwargs)
     |      Use this method to send video messages.
     |      
     |      Note:
     |          The video_note argument can be either a file_id or a file from disk
     |          ``open(filename, 'rb')``
     |      
     |      Args:
     |          chat_id (:obj:`int` | :obj:`str`): Unique identifier for the target chat or username
     |              of the target channel (in the format @channelusername).
     |          video_note (:obj:`str` | `filelike object` | :class:`telegram.VideoNote`): Video note
     |              to send. Pass a file_id as String to send a video note that exists on the Telegram
     |              servers (recommended) or upload a new video using multipart/form-data. Or you can
     |              pass an existing :class:`telegram.VideoNote` object to send. Sending video notes by
     |              a URL is currently unsupported.
     |          duration (:obj:`int`, optional): Duration of sent video in seconds.
     |          length (:obj:`int`, optional): Video width and height
     |          disable_notification (:obj:`bool`, optional): Sends the message silently. Users will
     |              receive a notification with no sound.
     |          reply_to_message_id (:obj:`int`, optional): If the message is a reply, ID of the
     |              original message.
     |          reply_markup (:class:`telegram.ReplyMarkup`, optional): Additional interface options. A
     |              JSON-serialized object for an inline keyboard, custom reply keyboard,
     |              instructions to remove reply keyboard or to force a reply from the user.
     |          thumb (`filelike object`, optional): Thumbnail of the
     |              file sent. The thumbnail should be in JPEG format and less than 200 kB in size.
     |              A thumbnail's width and height should not exceed 90. Ignored if the file is not
     |              is passed as a string or file_id.
     |          timeout (:obj:`int` | :obj:`float`, optional): Send file timeout (default: 20 seconds).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |      
     |      Returns:
     |          :class:`telegram.Message`: On success, the sent Message is returned.
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  sseenndd__vvooiiccee(self, chat_id, voice, duration=None, caption=None, disable_notification=False, reply_to_message_id=None, reply_markup=None, timeout=20, parse_mode=None, **kwargs)
     |      Use this method to send audio files, if you want Telegram clients to display the file
     |      as a playable voice message. For this to work, your audio must be in an .ogg file
     |      encoded with OPUS (other formats may be sent as Audio or Document).
     |      
     |      Note:
     |          The voice argument can be either a file_id, an URL or a file from disk
     |          ``open(filename, 'rb')``
     |      
     |      Args:
     |          chat_id (:obj:`int` | :obj:`str`): Unique identifier for the target chat or username
     |              of the target channel (in the format @channelusername).
     |          voice (:obj:`str` | `filelike object` | :class:`telegram.Voice`): Voice file to send.
     |              Pass a file_id as String to send an voice file that exists on the Telegram servers
     |              (recommended), pass an HTTP URL as a String for Telegram to get an voice file from
     |              the Internet, or upload a new one using multipart/form-data. Lastly you can pass
     |              an existing :class:`telegram.Voice` object to send.
     |          caption (:obj:`str`, optional): Voice message caption, 0-200 characters.
     |          parse_mode (:obj:`str`, optional): Send Markdown or HTML, if you want Telegram apps to
     |              show bold, italic, fixed-width text or inline URLs in the media caption. See the
     |              constants in :class:`telegram.ParseMode` for the available modes.
     |          duration (:obj:`int`, optional): Duration of the voice message in seconds.
     |          disable_notification (:obj:`bool`, optional): Sends the message silently. Users will
     |              receive a notification with no sound.
     |          reply_to_message_id (:obj:`int`, optional): If the message is a reply, ID of the
     |              original message.
     |          reply_markup (:class:`telegram.ReplyMarkup`, optional): Additional interface options. A
     |              JSON-serialized object for an inline keyboard, custom reply keyboard,
     |              instructions to remove reply keyboard or to force a reply from the user.
     |          timeout (:obj:`int` | :obj:`float`, optional): Send file timeout (default: 20 seconds).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |      
     |      Returns:
     |          :class:`telegram.Message`: On success, the sent Message is returned.
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  sseettCChhaattDDeessccrriippttiioonn = set_chat_description(self, chat_id, description, timeout=None, **kwargs)
     |  
     |  sseettCChhaattPPhhoottoo = set_chat_photo(self, chat_id, photo, timeout=None, **kwargs)
     |  
     |  sseettCChhaattSSttiicckkeerrSSeett = set_chat_sticker_set(self, chat_id, sticker_set_name, timeout=None, **kwargs)
     |  
     |  sseettCChhaattTTiittllee = set_chat_title(self, chat_id, title, timeout=None, **kwargs)
     |  
     |  sseettGGaammeeSSccoorree = set_game_score(self, user_id, score, chat_id=None, message_id=None, inline_message_id=None, force=None, disable_edit_message=None, timeout=None, **kwargs)
     |  
     |  sseettPPaassssppoorrttDDaattaaEErrrroorrss = set_passport_data_errors(self, user_id, errors, timeout=None, **kwargs)
     |  
     |  sseettSSttiicckkeerrPPoossiittiioonnIInnSSeett = set_sticker_position_in_set(self, sticker, position, timeout=None, **kwargs)
     |  
     |  sseettWWeebbhhooookk = set_webhook(self, url=None, certificate=None, timeout=None, max_connections=40, allowed_updates=None, **kwargs)
     |  
     |  sseett__cchhaatt__ddeessccrriippttiioonn(self, chat_id, description, timeout=None, **kwargs)
     |      Use this method to change the description of a supergroup or a channel. The bot must be an
     |      administrator in the chat for this to work and must have the appropriate admin rights.
     |      
     |      Args:
     |          chat_id (:obj:`int` | :obj:`str`): Unique identifier for the target chat or username
     |              of the target`channel (in the format @channelusername).
     |          description (:obj:`str`): New chat description, 1-255 characters.
     |          timeout (:obj:`int` | :obj:`float`, optional): If this value is specified, use it as
     |              the read timeout from the server (instead of the one specified during creation of
     |              the connection pool).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments
     |      
     |      Returns:
     |          :obj:`bool`: Returns ``True`` on success.
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  sseett__cchhaatt__pphhoottoo(self, chat_id, photo, timeout=None, **kwargs)
     |      Use this method to set a new profile photo for the chat.
     |      
     |      Photos can't be changed for private chats. The bot must be an administrator in the chat
     |      for this to work and must have the appropriate admin rights.
     |      
     |      Args:
     |          chat_id (:obj:`int` | :obj:`str`): Unique identifier for the target chat or username
     |              of the target`channel (in the format @channelusername).
     |          photo (`filelike object`): New chat photo.
     |          timeout (:obj:`int` | :obj:`float`, optional): If this value is specified, use it as
     |              the read timeout from the server (instead of the one specified during creation of
     |              the connection pool).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments
     |      
     |      Note:
     |          In regular groups (non-supergroups), this method will only work if the
     |          'All Members Are Admins' setting is off in the target group.
     |      
     |      Returns:
     |          :obj:`bool`: Returns True on success.
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  sseett__cchhaatt__ssttiicckkeerr__sseett(self, chat_id, sticker_set_name, timeout=None, **kwargs)
     |      Use this method to set a new group sticker set for a supergroup.
     |      The bot must be an administrator in the chat for this to work and must have the appropriate
     |      admin rights. Use the field :attr:`telegram.Chat.can_set_sticker_set` optionally returned
     |      in :attr:`get_chat` requests to check if the bot can use this method.
     |      
     |      Args:
     |          chat_id (:obj:`int` | :obj:`str`): Unique identifier for the target chat or username
     |              of the target supergroup (in the format @supergroupusername).
     |          sticker_set_name (:obj:`str`): Name of the sticker set to be set as the group
     |              sticker set.
     |          timeout (:obj:`int` | :obj:`float`, optional): If this value is specified, use it as
     |              the read timeout from the server (instead of the one specified during creation of
     |              the connection pool).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |      
     |      
     |      Returns:
     |          :obj:`bool`: True on success.
     |  
     |  sseett__cchhaatt__ttiittllee(self, chat_id, title, timeout=None, **kwargs)
     |      Use this method to change the title of a chat. Titles can't be changed for private chats.
     |      The bot must be an administrator in the chat for this to work and must have the appropriate
     |      admin rights.
     |      
     |      Args:
     |          chat_id (:obj:`int` | :obj:`str`): Unique identifier for the target chat or username
     |              of the target`channel (in the format @channelusername).
     |          title (:obj:`str`): New chat title, 1-255 characters.
     |          timeout (:obj:`int` | :obj:`float`, optional): If this value is specified, use it as
     |              the read timeout from the server (instead of the one specified during creation of
     |              the connection pool).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments
     |      
     |      Note:
     |          In regular groups (non-supergroups), this method will only work if the
     |          'All Members Are Admins' setting is off in the target group.
     |      
     |      Returns:
     |          :obj:`bool`: Returns ``True`` on success.
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  sseett__ggaammee__ssccoorree(self, user_id, score, chat_id=None, message_id=None, inline_message_id=None, force=None, disable_edit_message=None, timeout=None, **kwargs)
     |      Use this method to set the score of the specified user in a game. On success, if the
     |      message was sent by the bot, returns the edited Message, otherwise returns True. Returns
     |      an error, if the new score is not greater than the user's current score in the chat and
     |      force is False.
     |      
     |      Args:
     |          user_id (:obj:`int`): User identifier.
     |          score (:obj:`int`): New score, must be non-negative.
     |          force (:obj:`bool`, optional): Pass True, if the high score is allowed to decrease.
     |              This can be useful when fixing mistakes or banning cheaters
     |          disable_edit_message (:obj:`bool`, optional): Pass True, if the game message should not
     |              be automatically edited to include the current scoreboard.
     |          chat_id (int|str, optional): Required if inline_message_id is not specified. Unique
     |              identifier for the target chat.
     |          message_id (:obj:`int`, optional): Required if inline_message_id is not specified.
     |              Identifier of the sent message.
     |          inline_message_id (:obj:`str`, optional): Required if chat_id and message_id are not
     |              specified. Identifier of the inline message.
     |          timeout (:obj:`int` | :obj:`float`, optional): If this value is specified, use it as
     |              the read timeout from the server (instead of the one specified during creation of
     |              the connection pool).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |      
     |      Returns:
     |          :class:`telegram.Message`: The edited message, or if the message wasn't sent by the bot
     |          , ``True``.
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`: If the new score is not greater than the user's
     |          current score in the chat and force is False.
     |  
     |  sseett__ppaassssppoorrtt__ddaattaa__eerrrroorrss(self, user_id, errors, timeout=None, **kwargs)
     |      Informs a user that some of the Telegram Passport elements they provided contains errors.
     |      The user will not be able to re-submit their Passport to you until the errors are fixed
     |      (the contents of the field for which you returned the error must change). Returns True
     |      on success.
     |      
     |      Use this if the data submitted by the user doesn't satisfy the standards your service
     |      requires for any reason. For example, if a birthday date seems invalid, a submitted
     |      document is blurry, a scan shows evidence of tampering, etc. Supply some details in the
     |      error message to make sure the user knows how to correct the issues.
     |      
     |      Args:
     |          user_id (:obj:`int`): User identifier
     |          errors (List[:class:`PassportElementError`]): A JSON-serialized array describing the
     |              errors.
     |          timeout (:obj:`int` | :obj:`float`, optional): If this value is specified, use it as
     |              the read timeout from the server (instead of the one specified during
     |              creation of the connection pool).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |      
     |      Returns:
     |          :obj:`bool`: On success, ``True`` is returned.
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  sseett__ssttiicckkeerr__ppoossiittiioonn__iinn__sseett(self, sticker, position, timeout=None, **kwargs)
     |      Use this method to move a sticker in a set created by the bot to a specific position.
     |      
     |      Args:
     |          sticker (:obj:`str`): File identifier of the sticker.
     |          position (:obj:`int`): New sticker position in the set, zero-based.
     |          timeout (:obj:`int` | :obj:`float`, optional): If this value is specified, use it as
     |              the read timeout from the server (instead of the one specified during
     |              creation of the connection pool).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |      
     |      Returns:
     |          :obj:`bool`: On success, ``True`` is returned.
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  sseett__wweebbhhooookk(self, url=None, certificate=None, timeout=None, max_connections=40, allowed_updates=None, **kwargs)
     |      Use this method to specify a url and receive incoming updates via an outgoing webhook.
     |      Whenever there is an update for the bot, we will send an HTTPS POST request to the
     |      specified url, containing a JSON-serialized Update. In case of an unsuccessful request,
     |      we will give up after a reasonable amount of attempts.
     |      
     |      If you'd like to make sure that the Webhook request comes from Telegram, we recommend
     |      using a secret path in the URL, e.g. https://www.example.com/<token>. Since nobody else
     |      knows your bot's token, you can be pretty sure it's us.
     |      
     |      Note:
     |          The certificate argument should be a file from disk ``open(filename, 'rb')``.
     |      
     |      Args:
     |          url (:obj:`str`): HTTPS url to send updates to. Use an empty string to remove webhook
     |              integration.
     |          certificate (:obj:`filelike`): Upload your public key certificate so that the root
     |              certificate in use can be checked. See our self-signed guide for details.
     |              (https://goo.gl/rw7w6Y)
     |          max_connections (:obj:`int`, optional): Maximum allowed number of simultaneous HTTPS
     |              connections to the webhook for update delivery, 1-100. Defaults to 40. Use lower
     |              values to limit the load on your bot's server, and higher values to increase your
     |              bot's throughput.
     |          allowed_updates (List[:obj:`str`], optional): List the types of updates you want your
     |              bot to receive. For example, specify ["message", "edited_channel_post",
     |              "callback_query"] to only receive updates of these types. See
     |              :class:`telegram.Update` for a complete list of available update types. Specify an
     |              empty list to receive all updates regardless of type (default). If not specified,
     |              the previous setting will be used. Please note that this parameter doesn't affect
     |              updates created before the call to the set_webhook, so unwanted updates may be
     |              received for a short period of time.
     |          timeout (:obj:`int` | :obj:`float`, optional): If this value is specified, use it as
     |              the read timeout from the server (instead of the one specified during creation of
     |              the connection pool).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |      
     |      Note:
     |          1. You will not be able to receive updates using get_updates for as long as an outgoing
     |             webhook is set up.
     |          2. To use a self-signed certificate, you need to upload your public key certificate
     |             using certificate parameter. Please upload as InputFile, sending a String will not
     |             work.
     |          3. Ports currently supported for Webhooks: 443, 80, 88, 8443.
     |      
     |      Returns:
     |          :obj:`bool` On success, ``True`` is returned.
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  ssttooppMMeessssaaggeeLLiivveeLLooccaattiioonn = stop_message_live_location(self, chat_id=None, message_id=None, inline_message_id=None, reply_markup=None, **kwargs)
     |  
     |  ssttoopp__mmeessssaaggee__lliivvee__llooccaattiioonn(self, chat_id=None, message_id=None, inline_message_id=None, reply_markup=None, **kwargs)
     |      Use this method to stop updating a live location message sent by the bot or via the bot
     |      (for inline bots) before live_period expires.
     |      
     |      Args:
     |          chat_id (:obj:`int` | :obj:`str`): Unique identifier for the target chat or username
     |              of the target channel (in the format @channelusername).
     |          message_id (:obj:`int`, optional): Required if inline_message_id is not specified.
     |              Identifier of the sent message.
     |          inline_message_id (:obj:`str`, optional): Required if chat_id and message_id are not
     |              specified. Identifier of the inline message.
     |          reply_markup (:class:`telegram.ReplyMarkup`, optional): Additional interface options. A
     |              JSON-serialized object for an inline keyboard, custom reply keyboard, instructions
     |              to remove reply keyboard or to force a reply from the user.
     |          timeout (:obj:`int` | :obj:`float`, optional): If this value is specified, use it as
     |              the read timeout from the server (instead of the one specified during creation of
     |              the connection pool).
     |      
     |      Returns:
     |          :class:`telegram.Message`: On success the edited message.
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  uunnbbaannCChhaattMMeemmbbeerr = unban_chat_member(self, chat_id, user_id, timeout=None, **kwargs)
     |  
     |  uunnbbaann__cchhaatt__mmeemmbbeerr(self, chat_id, user_id, timeout=None, **kwargs)
     |      Use this method to unban a previously kicked user in a supergroup.
     |      
     |      The user will not return to the group automatically, but will be able to join via link,
     |      etc. The bot must be an administrator in the group for this to work.
     |      
     |      Args:
     |          chat_id (:obj:`int` | :obj:`str`): Unique identifier for the target chat or username
     |              of the target channel (in the format @channelusername).
     |          user_id (:obj:`int`): Unique identifier of the target user.
     |          timeout (:obj:`int` | :obj:`float`, optional): If this value is specified, use it as
     |              the read timeout from the server (instead of the one specified during creation of
     |              the connection pool).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |      
     |      Returns:
     |          :obj:`bool` On success, ``True`` is returned.
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  uunnppiinnCChhaattMMeessssaaggee = unpin_chat_message(self, chat_id, timeout=None, **kwargs)
     |  
     |  uunnppiinn__cchhaatt__mmeessssaaggee(self, chat_id, timeout=None, **kwargs)
     |      Use this method to unpin a message in a supergroup. The bot must be an administrator in the
     |      chat for this to work and must have the appropriate admin rights.
     |      
     |      Args:
     |          chat_id (:obj:`int` | :obj:`str`): Unique identifier for the target chat or username
     |              of the target`channel (in the format @channelusername).
     |          timeout (:obj:`int` | :obj:`float`, optional): If this value is specified, use it as
     |              the read timeout from the server (instead of the one specified during creation of
     |              the connection pool).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments
     |      
     |      Returns:
     |          :obj:`bool`: Returns ``True`` on success.
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  uuppllooaaddSSttiicckkeerrFFiillee = upload_sticker_file(self, user_id, png_sticker, timeout=None, **kwargs)
     |  
     |  uuppllooaadd__ssttiicckkeerr__ffiillee(self, user_id, png_sticker, timeout=None, **kwargs)
     |      Use this method to upload a .png file with a sticker for later use in
     |      :attr:`create_new_sticker_set` and :attr:`add_sticker_to_set` methods (can be used multiple
     |      times).
     |      
     |      Note:
     |          The png_sticker argument can be either a file_id, an URL or a file from disk
     |          ``open(filename, 'rb')``
     |      
     |      Args:
     |          user_id (:obj:`int`): User identifier of sticker file owner.
     |          png_sticker (:obj:`str` | `filelike object`): Png image with the sticker,
     |              must be up to 512 kilobytes in size, dimensions must not exceed 512px,
     |              and either width or height must be exactly 512px.
     |          timeout (:obj:`int` | :obj:`float`, optional): If this value is specified, use it as
     |              the read timeout from the server (instead of the one specified during
     |              creation of the connection pool).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |      
     |      Returns:
     |          :class:`telegram.File`: The uploaded File
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  ffiirrsstt__nnaammee
     |      :obj:`str`: Bot's first name.
     |  
     |  iidd
     |      :obj:`int`: Unique identifier for this bot.
     |  
     |  llaasstt__nnaammee
     |      :obj:`str`: Optional. Bot's last name.
     |  
     |  nnaammee
     |      :obj:`str`: Bot's @username.
     |  
     |  rreeqquueesstt
     |  
     |  uusseerrnnaammee
     |      :obj:`str`: Bot's username.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from telegram.base.TelegramObject:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class CCaallllbbaacckkGGaammee(telegram.base.TelegramObject)
     |  A placeholder, currently holds no information. Use BotFather to set up your game.
     |  
     |  Method resolution order:
     |      CallbackGame
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from telegram.base.TelegramObject:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class CCaallllbbaacckkQQuueerryy(telegram.base.TelegramObject)
     |  This object represents an incoming callback query from a callback button in an inline keyboard.
     |  
     |  If the button that originated the query was attached to a message sent by the bot, the field
     |  :attr:`message` will be present. If the button was attached to a message sent via the bot (in
     |  inline mode), the field :attr:`inline_message_id` will be present.
     |  
     |  Note:
     |      * In Python `from` is a reserved word, use `from_user` instead.
     |      * Exactly one of the fields :attr:`data` or :attr:`game_short_name` will be present.
     |  
     |  Attributes:
     |      id (:obj:`str`): Unique identifier for this query.
     |      from_user (:class:`telegram.User`): Sender.
     |      message (:class:`telegram.Message`): Optional. Message with the callback button that
     |          originated the query.
     |      inline_message_id (:obj:`str`): Optional. Identifier of the message sent via the bot in
     |              inline mode, that originated the query.
     |      chat_instance (:obj:`str`): Optional. Global identifier, uniquely corresponding to the chat
     |          to which the message with the callback button was sent.
     |      data (:obj:`str`): Optional. Data associated with the callback button.
     |      game_short_name (:obj:`str`): Optional. Short name of a Game to be returned.
     |  
     |  Args:
     |      id (:obj:`str`): Unique identifier for this query.
     |      from_user (:class:`telegram.User`): Sender.
     |      message (:class:`telegram.Message`, optional): Message with the callback button that
     |          originated the query. Note that message content and message date will not be available
     |          if the message is too old.
     |      inline_message_id (:obj:`str`, optional): Identifier of the message sent via the bot in
     |          inline mode, that originated the query.
     |      chat_instance (:obj:`str`, optional): Global identifier, uniquely corresponding to the chat
     |          to which the message with the callback button was sent. Useful for high scores in
     |          games.
     |      data (:obj:`str`, optional): Data associated with the callback button. Be aware that a bad
     |          client can send arbitrary data in this field.
     |      game_short_name (:obj:`str`, optional): Short name of a Game to be returned, serves as
     |          the unique identifier for the game
     |  
     |  Note:
     |      After the user presses an inline button, Telegram clients will display a progress bar
     |      until you call :attr:`answer`. It is, therefore, necessary to react
     |      by calling :attr:`telegram.Bot.answer_callback_query` even if no notification to the user
     |      is needed (e.g., without specifying any of the optional parameters).
     |  
     |  Method resolution order:
     |      CallbackQuery
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, id, from_user, chat_instance, message=None, data=None, inline_message_id=None, game_short_name=None, bot=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  aannsswweerr(self, *args, **kwargs)
     |      Shortcut for::
     |      
     |          bot.answer_callback_query(update.callback_query.id, *args, **kwargs)
     |      
     |      Returns:
     |          :obj:`bool`: On success, ``True`` is returned.
     |  
     |  eeddiitt__mmeessssaaggee__ccaappttiioonn(self, *args, **kwargs)
     |      Shortcut for either::
     |      
     |          bot.edit_message_caption(chat_id=update.callback_query.message.chat_id,
     |                                 message_id=update.callback_query.message.message_id,
     |                                 *args, **kwargs)
     |      
     |      or::
     |      
     |          bot.edit_message_caption(inline_message_id=update.callback_query.inline_message_id,
     |                                 *args, **kwargs)
     |      
     |      Returns:
     |          :class:`telegram.Message`: On success, if edited message is sent by the bot, the
     |          edited Message is returned, otherwise ``True`` is returned.
     |  
     |  eeddiitt__mmeessssaaggee__rreeppllyy__mmaarrkkuupp(self, *args, **kwargs)
     |      Shortcut for either::
     |      
     |          bot.edit_message_replyMarkup(chat_id=update.callback_query.message.chat_id,
     |                                     message_id=update.callback_query.message.message_id,
     |                                     *args, **kwargs)
     |      
     |      or::
     |      
     |          bot.edit_message_reply_markup(inline_message_id=update.callback_query.inline_message_id,
     |                                     *args, **kwargs)
     |      
     |      Returns:
     |          :class:`telegram.Message`: On success, if edited message is sent by the bot, the
     |          edited Message is returned, otherwise ``True`` is returned.
     |  
     |  eeddiitt__mmeessssaaggee__tteexxtt(self, *args, **kwargs)
     |      Shortcut for either::
     |      
     |          bot.edit_message_text(chat_id=update.callback_query.message.chat_id,
     |                              message_id=update.callback_query.message.message_id,
     |                              *args, **kwargs)
     |      
     |      or::
     |      
     |          bot.edit_message_text(inline_message_id=update.callback_query.inline_message_id,
     |                              *args, **kwargs)
     |      
     |      Returns:
     |          :class:`telegram.Message`: On success, if edited message is sent by the bot, the
     |          edited Message is returned, otherwise ``True`` is returned.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class CChhaatt(telegram.base.TelegramObject)
     |  This object represents a chat.
     |  
     |  Attributes:
     |      id (:obj:`int`): Unique identifier for this chat.
     |      type (:obj:`str`): Type of chat.
     |      title (:obj:`str`): Optional. Title, for supergroups, channels and group chats.
     |      username (:obj:`str`): Optional. Username.
     |      first_name (:obj:`str`): Optional. First name of the other party in a private chat.
     |      last_name (:obj:`str`): Optional. Last name of the other party in a private chat.
     |      all_members_are_administrators (:obj:`bool`): Optional.
     |      photo (:class:`telegram.ChatPhoto`): Optional. Chat photo.
     |      description (:obj:`str`): Optional. Description, for supergroups and channel chats.
     |      invite_link (:obj:`str`): Optional. Chat invite link, for supergroups and channel chats.
     |      pinned_message (:class:`telegram.Message`): Optional. Pinned message, for supergroups.
     |          Returned only in get_chat.
     |      sticker_set_name (:obj:`str`): Optional. For supergroups, name of Group sticker set.
     |      can_set_sticker_set (:obj:`bool`): Optional. ``True``, if the bot can change group the
     |          sticker set.
     |  
     |  Args:
     |      id (:obj:`int`): Unique identifier for this chat. This number may be greater than 32 bits
     |          and some programming languages may have difficulty/silent defects in interpreting it.
     |          But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float
     |          type are safe for storing this identifier.
     |      type (:obj:`str`): Type of chat, can be either 'private', 'group', 'supergroup' or
     |          'channel'.
     |      title (:obj:`str`, optional): Title, for supergroups, channels and group chats.
     |      username(:obj:`str`, optional): Username, for private chats, supergroups and channels if
     |          available.
     |      first_name(:obj:`str`, optional): First name of the other party in a private chat.
     |      last_name(:obj:`str`, optional): Last name of the other party in a private chat.
     |      all_members_are_administrators (:obj:`bool`, optional): True if a group has `All Members
     |          Are Admins` enabled.
     |      photo (:class:`telegram.ChatPhoto`, optional): Chat photo. Returned only in getChat.
     |      description (:obj:`str`, optional): Description, for supergroups and channel chats.
     |          Returned only in get_chat.
     |      invite_link (:obj:`str`, optional): Chat invite link, for supergroups and channel chats.
     |          Returned only in get_chat.
     |      pinned_message (:class:`telegram.Message`, optional): Pinned message, for supergroups.
     |          Returned only in get_chat.
     |      bot (:class:`telegram.Bot`, optional): The Bot to use for instance methods.
     |      sticker_set_name (:obj:`str`, optional): For supergroups, name of Group sticker set.
     |          Returned only in get_chat.
     |      can_set_sticker_set (:obj:`bool`, optional): ``True``, if the bot can change group the
     |          sticker set. Returned only in get_chat.
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      Chat
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, id, type, title=None, username=None, first_name=None, last_name=None, all_members_are_administrators=None, bot=None, photo=None, description=None, invite_link=None, pinned_message=None, sticker_set_name=None, can_set_sticker_set=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ggeett__aaddmmiinniissttrraattoorrss(self, *args, **kwargs)
     |      Shortcut for::
     |      
     |          bot.get_chat_administrators(update.message.chat.id, *args, **kwargs)
     |      
     |      Returns:
     |          List[:class:`telegram.ChatMember`]: A list of administrators in a chat. An Array of
     |          :class:`telegram.ChatMember` objects that contains information about all
     |          chat administrators except other bots. If the chat is a group or a supergroup
     |          and no administrators were appointed, only the creator will be returned
     |  
     |  ggeett__mmeemmbbeerr(self, *args, **kwargs)
     |      Shortcut for::
     |      
     |          bot.get_chat_member(update.message.chat.id, *args, **kwargs)
     |      
     |      Returns:
     |          :class:`telegram.ChatMember`
     |  
     |  ggeett__mmeemmbbeerrss__ccoouunntt(self, *args, **kwargs)
     |      Shortcut for::
     |      
     |          bot.get_chat_members_count(update.message.chat.id, *args, **kwargs)
     |      
     |      Returns:
     |          :obj:`int`
     |  
     |  kkiicckk__mmeemmbbeerr(self, *args, **kwargs)
     |      Shortcut for::
     |      
     |              bot.kick_chat_member(update.message.chat.id, *args, **kwargs)
     |      
     |      Returns:
     |          :obj:`bool`: If the action was sent succesfully.
     |      
     |      Note:
     |          This method will only work if the `All Members Are Admins` setting is off in the
     |          target group. Otherwise members may only be removed by the group's creator or by the
     |          member that added them.
     |  
     |  lleeaavvee(self, *args, **kwargs)
     |      Shortcut for::
     |      
     |          bot.leave_chat(update.message.chat.id, *args, **kwargs)
     |      
     |      Returns:
     |          :obj:`bool` If the action was sent successfully.
     |  
     |  sseenndd__aaccttiioonn(self, *args, **kwargs)
     |      Shortcut for::
     |      
     |          bot.send_chat_action(update.message.chat.id, *args, **kwargs)
     |      
     |      Returns:
     |          :obj:`bool`: If the action was sent successfully.
     |  
     |  sseenndd__aanniimmaattiioonn(self, *args, **kwargs)
     |      Shortcut for::
     |      
     |          bot.send_animation(Chat.id, *args, **kwargs)
     |      
     |      Where Chat is the current instance.
     |      
     |      Returns:
     |          :class:`telegram.Message`: On success, instance representing the message posted.
     |  
     |  sseenndd__aauuddiioo(self, *args, **kwargs)
     |      Shortcut for::
     |      
     |          bot.send_audio(Chat.id, *args, **kwargs)
     |      
     |      Where Chat is the current instance.
     |      
     |      Returns:
     |          :class:`telegram.Message`: On success, instance representing the message posted.
     |  
     |  sseenndd__ddooccuummeenntt(self, *args, **kwargs)
     |      Shortcut for::
     |      
     |          bot.send_document(Chat.id, *args, **kwargs)
     |      
     |      Where Chat is the current instance.
     |      
     |      Returns:
     |          :class:`telegram.Message`: On success, instance representing the message posted.
     |  
     |  sseenndd__mmeessssaaggee(self, *args, **kwargs)
     |      Shortcut for::
     |      
     |          bot.send_message(Chat.id, *args, **kwargs)
     |      
     |      Where Chat is the current instance.
     |      
     |      Returns:
     |          :class:`telegram.Message`: On success, instance representing the message posted.
     |  
     |  sseenndd__pphhoottoo(self, *args, **kwargs)
     |      Shortcut for::
     |      
     |          bot.send_photo(Chat.id, *args, **kwargs)
     |      
     |      Where Chat is the current instance.
     |      
     |      Returns:
     |          :class:`telegram.Message`: On success, instance representing the message posted.
     |  
     |  sseenndd__ssttiicckkeerr(self, *args, **kwargs)
     |      Shortcut for::
     |      
     |          bot.send_sticker(Chat.id, *args, **kwargs)
     |      
     |      Where Chat is the current instance.
     |      
     |      Returns:
     |          :class:`telegram.Message`: On success, instance representing the message posted.
     |  
     |  sseenndd__vviiddeeoo(self, *args, **kwargs)
     |      Shortcut for::
     |      
     |          bot.send_video(Chat.id, *args, **kwargs)
     |      
     |      Where Chat is the current instance.
     |      
     |      Returns:
     |          :class:`telegram.Message`: On success, instance representing the message posted.
     |  
     |  sseenndd__vviiddeeoo__nnoottee(self, *args, **kwargs)
     |      Shortcut for::
     |      
     |          bot.send_video_note(Chat.id, *args, **kwargs)
     |      
     |      Where Chat is the current instance.
     |      
     |      Returns:
     |          :class:`telegram.Message`: On success, instance representing the message posted.
     |  
     |  sseenndd__vvooiiccee(self, *args, **kwargs)
     |      Shortcut for::
     |      
     |          bot.send_voice(Chat.id, *args, **kwargs)
     |      
     |      Where Chat is the current instance.
     |      
     |      Returns:
     |          :class:`telegram.Message`: On success, instance representing the message posted.
     |  
     |  uunnbbaann__mmeemmbbeerr(self, *args, **kwargs)
     |      Shortcut for::
     |      
     |              bot.unban_chat_member(update.message.chat.id, *args, **kwargs)
     |      
     |      Returns:
     |          :obj:`bool`: If the action was sent successfully.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  lliinnkk
     |      :obj:`str`: Convenience property. If the chat has a :attr:`username`, returns a t.me
     |      link of the chat.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  CCHHAANNNNEELL = 'channel'
     |  
     |  GGRROOUUPP = 'group'
     |  
     |  PPRRIIVVAATTEE = 'private'
     |  
     |  SSUUPPEERRGGRROOUUPP = 'supergroup'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class CChhaattAAccttiioonn(builtins.object)
     |  Helper class to provide constants for different chatactions.
     |  
     |  Data descriptors defined here:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  FFIINNDD__LLOOCCAATTIIOONN = 'find_location'
     |  
     |  RREECCOORRDD__AAUUDDIIOO = 'record_audio'
     |  
     |  RREECCOORRDD__VVIIDDEEOO = 'record_video'
     |  
     |  RREECCOORRDD__VVIIDDEEOO__NNOOTTEE = 'record_video_note'
     |  
     |  TTYYPPIINNGG = 'typing'
     |  
     |  UUPPLLOOAADD__AAUUDDIIOO = 'upload_audio'
     |  
     |  UUPPLLOOAADD__DDOOCCUUMMEENNTT = 'upload_document'
     |  
     |  UUPPLLOOAADD__PPHHOOTTOO = 'upload_photo'
     |  
     |  UUPPLLOOAADD__VVIIDDEEOO = 'upload_video'
     |  
     |  UUPPLLOOAADD__VVIIDDEEOO__NNOOTTEE = 'upload_video_note'
    
    class CChhaattMMeemmbbeerr(telegram.base.TelegramObject)
     |  This object contains information about one member of the chat.
     |  
     |  Attributes:
     |      user (:class:`telegram.User`): Information about the user.
     |      status (:obj:`str`): The member's status in the chat.
     |      until_date (:class:`datetime.datetime`): Optional. Date when restrictions will be lifted
     |          for this user.
     |      can_be_edited (:obj:`bool`): Optional. If the bot is allowed to edit administrator
     |          privileges of that user.
     |      can_change_info (:obj:`bool`): Optional. If the administrator can change the chat title,
     |          photo and other settings.
     |      can_post_messages (:obj:`bool`): Optional. If the administrator can post in the channel.
     |      can_edit_messages (:obj:`bool`): Optional. If the administrator can edit messages of other
     |          users.
     |      can_delete_messages (:obj:`bool`): Optional. If the administrator can delete messages of
     |          other users.
     |      can_invite_users (:obj:`bool`): Optional. If the administrator can invite new users to the
     |          chat.
     |      can_restrict_members (:obj:`bool`): Optional. If the administrator can restrict, ban or
     |          unban chat members.
     |      can_pin_messages (:obj:`bool`): Optional. If the administrator can pin messages.
     |      can_promote_members (:obj:`bool`): Optional. If the administrator can add new
     |          administrators.
     |      can_send_messages (:obj:`bool`): Optional. If the user can send text messages, contacts,
     |          locations and venues.
     |      can_send_media_messages (:obj:`bool`): Optional. If the user can send media messages,
     |          implies can_send_messages.
     |      can_send_other_messages (:obj:`bool`): Optional. If the user can send animations, games,
     |          stickers and use inline bots, implies can_send_media_messages.
     |      can_add_web_page_previews (:obj:`bool`): Optional. If user may add web page previews to his
     |          messages, implies can_send_media_messages
     |  
     |  Args:
     |      user (:class:`telegram.User`): Information about the user.
     |      status (:obj:`str`): The member's status in the chat. Can be 'creator', 'administrator',
     |          'member', 'restricted', 'left' or 'kicked'.
     |      until_date (:class:`datetime.datetime`, optional): Restricted and kicked only. Date when
     |          restrictions will be lifted for this user.
     |      can_be_edited (:obj:`bool`, optional): Administrators only. True, if the bot is allowed to
     |          edit administrator privileges of that user.
     |      can_change_info (:obj:`bool`, optional): Administrators only. True, if the administrator
     |          can change the chat title, photo and other settings.
     |      can_post_messages (:obj:`bool`, optional): Administrators only. True, if the administrator
     |          can post in the channel, channels only.
     |      can_edit_messages (:obj:`bool`, optional): Administrators only. True, if the administrator
     |          can edit messages of other users, channels only.
     |      can_delete_messages (:obj:`bool`, optional): Administrators only. True, if the
     |          administrator can delete messages of other user.
     |      can_invite_users (:obj:`bool`, optional): Administrators only. True, if the administrator
     |          can invite new users to the chat.
     |      can_restrict_members (:obj:`bool`, optional): Administrators only. True, if the
     |          administrator can restrict, ban or unban chat members.
     |      can_pin_messages (:obj:`bool`, optional): Administrators only. True, if the administrator
     |          can pin messages, supergroups only.
     |      can_promote_members (:obj:`bool`, optional): Administrators only. True, if the
     |          administrator can add new administrators with a subset of his own privileges or demote
     |          administrators that he has promoted, directly or indirectly (promoted by administrators
     |          that were appointed by the user).
     |      can_send_messages (:obj:`bool`, optional): Restricted only. True, if the user can send text
     |          messages, contacts, locations and venues.
     |      can_send_media_messages (:obj:`bool`, optional): Restricted only. True, if the user can
     |          send audios, documents, photos, videos, video notes and voice notes, implies
     |          can_send_messages.
     |      can_send_other_messages (:obj:`bool`, optional): Restricted only. True, if the user can
     |          send animations, games, stickers and use inline bots, implies can_send_media_messages.
     |      can_add_web_page_previews (:obj:`bool`, optional): Restricted only. True, if user may add
     |          web page previews to his messages, implies can_send_media_messages.
     |  
     |  Method resolution order:
     |      ChatMember
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, user, status, until_date=None, can_be_edited=None, can_change_info=None, can_post_messages=None, can_edit_messages=None, can_delete_messages=None, can_invite_users=None, can_restrict_members=None, can_pin_messages=None, can_promote_members=None, can_send_messages=None, can_send_media_messages=None, can_send_other_messages=None, can_add_web_page_previews=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  AADDMMIINNIISSTTRRAATTOORR = 'administrator'
     |  
     |  CCRREEAATTOORR = 'creator'
     |  
     |  KKIICCKKEEDD = 'kicked'
     |  
     |  LLEEFFTT = 'left'
     |  
     |  MMEEMMBBEERR = 'member'
     |  
     |  RREESSTTRRIICCTTEEDD = 'restricted'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class CChhaattPPhhoottoo(telegram.base.TelegramObject)
     |  This object represents a chat photo.
     |  
     |  Attributes:
     |      small_file_id (:obj:`str`): Unique file identifier of small (160x160) chat photo.
     |      big_file_id (:obj:`str`): Unique file identifier of big (640x640) chat photo.
     |  
     |  Args:
     |      small_file_id (:obj:`str`): Unique file identifier of small (160x160) chat photo. This
     |          file_id can be used only for photo download.
     |      big_file_id (:obj:`str`): Unique file identifier of big (640x640) chat photo. This file_id
     |          can be used only for photo download.
     |      bot (:class:`telegram.Bot`, optional): The Bot to use for instance methods
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      ChatPhoto
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, small_file_id, big_file_id, bot=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class CChhoosseennIInnlliinneeRReessuulltt(telegram.base.TelegramObject)
     |  Represents a result of an inline query that was chosen by the user and sent to their chat
     |  partner.
     |  
     |  Note:
     |      In Python `from` is a reserved word, use `from_user` instead.
     |  
     |  Attributes:
     |      result_id (:obj:`str`): The unique identifier for the result that was chosen.
     |      from_user (:class:`telegram.User`): The user that chose the result.
     |      location (:class:`telegram.Location`): Optional. Sender location.
     |      inline_message_id (:obj:`str`): Optional. Identifier of the sent inline message.
     |      query (:obj:`str`): The query that was used to obtain the result.
     |  
     |  Args:
     |      result_id (:obj:`str`): The unique identifier for the result that was chosen.
     |      from_user (:class:`telegram.User`): The user that chose the result.
     |      location (:class:`telegram.Location`, optional): Sender location, only for bots that
     |          require user location.
     |      inline_message_id (:obj:`str`, optional): Identifier of the sent inline message. Available
     |          only if there is an inline keyboard attached to the message. Will be also received in
     |          callback queries and can be used to edit the message.
     |      query (:obj:`str`): The query that was used to obtain the result.
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      ChosenInlineResult
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, result_id, from_user, query, location=None, inline_message_id=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class CCoonnttaacctt(telegram.base.TelegramObject)
     |  This object represents a phone contact.
     |  
     |  Attributes:
     |      phone_number (:obj:`str`): Contact's phone number.
     |      first_name (:obj:`str`): Contact's first name.
     |      last_name (:obj:`str`): Optional. Contact's last name.
     |      user_id (:obj:`int`): Optional. Contact's user identifier in Telegram.
     |      vcard (:obj:`str`): Optional. Additional data about the contact in the form of a vCard.
     |  
     |  Args:
     |      phone_number (:obj:`str`): Contact's phone number.
     |      first_name (:obj:`str`): Contact's first name.
     |      last_name (:obj:`str`, optional): Contact's last name.
     |      user_id (:obj:`int`, optional): Contact's user identifier in Telegram.
     |      vcard (:obj:`str`, optional): Additional data about the contact in the form of a vCard.
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      Contact
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, phone_number, first_name, last_name=None, user_id=None, vcard=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class CCrreeddeennttiiaallss(telegram.base.TelegramObject)
     |  Attributes:
     |      secure_data (:class:`telegram.SecureData`): Credentials for encrypted data
     |      nonce (:obj:`str`): Bot-specified nonce
     |  
     |  Method resolution order:
     |      Credentials
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, secure_data, nonce, bot=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class DDaattaaCCrreeddeennttiiaallss(_CredentialsBase)
     |  These credentials can be used to decrypt encrypted data from the data field in
     |  EncryptedPassportData.
     |  
     |  Args:
     |      data_hash (:obj:`str`): Checksum of encrypted data
     |      secret (:obj:`str`): Secret of encrypted data
     |  
     |  Attributes:
     |      hash (:obj:`str`): Checksum of encrypted data
     |      secret (:obj:`str`): Secret of encrypted data
     |  
     |  Method resolution order:
     |      DataCredentials
     |      _CredentialsBase
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, data_hash, secret, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from _CredentialsBase:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ddee__lliisstt(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class DDooccuummeenntt(telegram.base.TelegramObject)
     |  This object represents a general file (as opposed to photos, voice messages and audio files).
     |  
     |  Attributes:
     |      file_id (:obj:`str`): Unique file identifier.
     |      thumb (:class:`telegram.PhotoSize`): Optional. Document thumbnail.
     |      file_name (:obj:`str`): Original filename.
     |      mime_type (:obj:`str`): Optional. MIME type of the file.
     |      file_size (:obj:`int`): Optional. File size.
     |      bot (:class:`telegram.Bot`): Optional. The Bot to use for instance methods.
     |  
     |  Args:
     |      file_id (:obj:`str`): Unique file identifier
     |      thumb (:class:`telegram.PhotoSize`, optional): Document thumbnail as defined by sender.
     |      file_name (:obj:`str`, optional): Original filename as defined by sender.
     |      mime_type (:obj:`str`, optional): MIME type of the file as defined by sender.
     |      file_size (:obj:`int`, optional): File size.
     |      bot (:class:`telegram.Bot`, optional): The Bot to use for instance methods.
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      Document
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, file_id, thumb=None, file_name=None, mime_type=None, file_size=None, bot=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ggeett__ffiillee(self, timeout=None, **kwargs)
     |      Convenience wrapper over :attr:`telegram.Bot.get_file`
     |      
     |      Args:
     |          timeout (:obj:`int` | :obj:`float`, optional): If this value is specified, use it as
     |              the read timeout from the server (instead of the one specified during creation of
     |              the connection pool).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |      
     |      Returns:
     |          :class:`telegram.File`
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class EEnnccrryypptteeddCCrreeddeennttiiaallss(telegram.base.TelegramObject)
     |  Contains data required for decrypting and authenticating EncryptedPassportElement. See the
     |  Telegram Passport Documentation for a complete description of the data decryption and
     |  authentication processes.
     |  
     |  Attributes:
     |      data (:class:`telegram.Credentials` or :obj:`str`): Decrypted data with unique user's
     |          nonce, data hashes and secrets used for EncryptedPassportElement decryption and
     |          authentication or base64 encrypted data.
     |      hash (:obj:`str`): Base64-encoded data hash for data authentication.
     |      secret (:obj:`str`): Decrypted or encrypted secret used for decryption.
     |  
     |  Args:
     |      data (:class:`telegram.Credentials` or :obj:`str`): Decrypted data with unique user's
     |          nonce, data hashes and secrets used for EncryptedPassportElement decryption and
     |          authentication or base64 encrypted data.
     |      hash (:obj:`str`): Base64-encoded data hash for data authentication.
     |      secret (:obj:`str`): Decrypted or encrypted secret used for decryption.
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Note:
     |      This object is decrypted only when originating from
     |      :obj:`telegram.PassportData.decrypted_credentials`.
     |  
     |  Method resolution order:
     |      EncryptedCredentials
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, data, hash, secret, bot=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  ddeeccrryypptteedd__ddaattaa
     |      :class:`telegram.Credentials`: Lazily decrypt and return credentials data. This object
     |          also contains the user specified nonce as
     |          `decrypted_data.nonce`.
     |      
     |      Raises:
     |          telegram.TelegramDecryptionError: Decryption failed. Usually due to bad
     |              private/public key but can also suggest malformed/tampered data.
     |  
     |  ddeeccrryypptteedd__sseeccrreett
     |      :obj:`str`: Lazily decrypt and return secret.
     |      
     |      Raises:
     |          telegram.TelegramDecryptionError: Decryption failed. Usually due to bad
     |              private/public key but can also suggest malformed/tampered data.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class EEnnccrryypptteeddPPaassssppoorrttEElleemmeenntt(telegram.base.TelegramObject)
     |  Contains information about documents or other Telegram Passport elements shared with the bot
     |  by the user. The data has been automatically decrypted by python-telegram-bot.
     |  
     |  Attributes:
     |      type (:obj:`str`): Element type. One of "personal_details", "passport", "driver_license",
     |          "identity_card", "internal_passport", "address", "utility_bill", "bank_statement",
     |          "rental_agreement", "passport_registration", "temporary_registration", "phone_number",
     |          "email".
     |      data (:class:`telegram.PersonalDetails` or :class:`telegram.IdDocument` or :class:`telegram.ResidentialAddress` or :obj:`str`):
     |          Optional. Decrypted or encrypted data, available for "personal_details", "passport",
     |          "driver_license", "identity_card", "identity_passport" and "address" types.
     |      phone_number (:obj:`str`): Optional. User's verified phone number, available only for
     |          "phone_number" type.
     |      email (:obj:`str`): Optional. User's verified email address, available only for "email"
     |          type.
     |      files (List[:class:`telegram.PassportFile`]): Optional. Array of encrypted/decrypted files
     |          with documents provided by the user, available for "utility_bill", "bank_statement",
     |          "rental_agreement", "passport_registration" and "temporary_registration" types.
     |      front_side (:class:`telegram.PassportFile`): Optional. Encrypted/decrypted file with the
     |          front side of the document, provided by the user. Available for "passport",
     |          "driver_license", "identity_card" and "internal_passport".
     |      reverse_side (:class:`telegram.PassportFile`): Optional. Encrypted/decrypted file with the
     |          reverse side of the document, provided by the user. Available for "driver_license" and
     |          "identity_card".
     |      selfie (:class:`telegram.PassportFile`): Optional. Encrypted/decrypted file with the
     |          selfie of the user holding a document, provided by the user; available for "passport",
     |          "driver_license", "identity_card" and "internal_passport".
     |      translation (List[:class:`telegram.PassportFile`]): Optional. Array of encrypted/decrypted
     |          files with translated versions of documents provided by the user. Available if
     |          requested for "passport", "driver_license", "identity_card", "internal_passport",
     |          "utility_bill", "bank_statement", "rental_agreement", "passport_registration" and
     |          "temporary_registration" types.
     |      hash (:obj:`str`): Base64-encoded element hash for using in
     |          :class:`telegram.PassportElementErrorUnspecified`.
     |      bot (:class:`telegram.Bot`): Optional. The Bot to use for instance methods.
     |  
     |  Args:
     |      type (:obj:`str`): Element type. One of "personal_details", "passport", "driver_license",
     |          "identity_card", "internal_passport", "address", "utility_bill", "bank_statement",
     |          "rental_agreement", "passport_registration", "temporary_registration", "phone_number",
     |          "email".
     |      data (:class:`telegram.PersonalDetails` or :class:`telegram.IdDocument` or :class:`telegram.ResidentialAddress` or :obj:`str`, optional):
     |          Decrypted or encrypted data, available for "personal_details", "passport",
     |          "driver_license", "identity_card", "identity_passport" and "address" types.
     |      phone_number (:obj:`str`, optional): User's verified phone number, available only for
     |          "phone_number" type.
     |      email (:obj:`str`, optional): User's verified email address, available only for "email"
     |          type.
     |      files (List[:class:`telegram.PassportFile`], optional): Array of encrypted/decrypted files
     |          with documents provided by the user, available for "utility_bill", "bank_statement",
     |          "rental_agreement", "passport_registration" and "temporary_registration" types.
     |      front_side (:class:`telegram.PassportFile`, optional): Encrypted/decrypted file with the
     |          front side of the document, provided by the user. Available for "passport",
     |          "driver_license", "identity_card" and "internal_passport".
     |      reverse_side (:class:`telegram.PassportFile`, optional): Encrypted/decrypted file with the
     |          reverse side of the document, provided by the user. Available for "driver_license" and
     |          "identity_card".
     |      selfie (:class:`telegram.PassportFile`, optional): Encrypted/decrypted file with the
     |          selfie of the user holding a document, provided by the user; available for "passport",
     |          "driver_license", "identity_card" and "internal_passport".
     |      translation (List[:class:`telegram.PassportFile`], optional): Array of encrypted/decrypted
     |          files with translated versions of documents provided by the user. Available if
     |          requested for "passport", "driver_license", "identity_card", "internal_passport",
     |          "utility_bill", "bank_statement", "rental_agreement", "passport_registration" and
     |          "temporary_registration" types.
     |      hash (:obj:`str`): Base64-encoded element hash for using in
     |          :class:`telegram.PassportElementErrorUnspecified`.
     |      bot (:class:`telegram.Bot`, optional): The Bot to use for instance methods.
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Note:
     |      This object is decrypted only when originating from
     |      :obj:`telegram.PassportData.decrypted_data`.
     |  
     |  Method resolution order:
     |      EncryptedPassportElement
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, type, data=None, phone_number=None, email=None, files=None, front_side=None, reverse_side=None, selfie=None, translation=None, hash=None, bot=None, credentials=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ddee__jjssoonn__ddeeccrryypptteedd(data, bot, credentials) from builtins.type
     |  
     |  ddee__lliisstt(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class FFiillee(telegram.base.TelegramObject)
     |  This object represents a file ready to be downloaded. The file can be downloaded with
     |  :attr:`download`. It is guaranteed that the link will be valid for at least 1 hour. When the
     |  link expires, a new one can be requested by calling getFile.
     |  
     |  Note:
     |      Maximum file size to download is 20 MB
     |  
     |  Attributes:
     |      file_id (:obj:`str`): Unique identifier for this file.
     |      file_size (:obj:`str`): Optional. File size.
     |      file_path (:obj:`str`): Optional. File path. Use :attr:`download` to get the file.
     |  
     |  Args:
     |      file_id (:obj:`str`): Unique identifier for this file.
     |      file_size (:obj:`int`, optional): Optional. File size, if known.
     |      file_path (:obj:`str`, optional): File path. Use :attr:`download` to get the file.
     |      bot (:obj:`telegram.Bot`, optional): Bot to use with shortcut method.
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Note:
     |      If you obtain an instance of this class from :attr:`telegram.PassportFile.get_file`,
     |      then it will automatically be decrypted as it downloads when you call :attr:`download()`.
     |  
     |  Method resolution order:
     |      File
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, file_id, bot=None, file_size=None, file_path=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ddoowwnnllooaadd(self, custom_path=None, out=None, timeout=None)
     |      Download this file. By default, the file is saved in the current working directory with its
     |      original filename as reported by Telegram. If a :attr:`custom_path` is supplied, it will be
     |      saved to that path instead. If :attr:`out` is defined, the file contents will be saved to
     |      that object using the ``out.write`` method.
     |      
     |      Note:
     |          :attr:`custom_path` and :attr:`out` are mutually exclusive.
     |      
     |      Args:
     |          custom_path (:obj:`str`, optional): Custom path.
     |          out (:obj:`io.BufferedWriter`, optional): A file-like object. Must be opened for
     |              writing in binary mode, if applicable.
     |          timeout (:obj:`int` | :obj:`float`, optional): If this value is specified, use it as
     |              the read timeout from the server (instead of the one specified during creation of
     |              the connection pool).
     |      
     |      Returns:
     |          :obj:`str` | :obj:`io.BufferedWriter`: The same object as :attr:`out` if specified.
     |          Otherwise, returns the filename downloaded to.
     |      
     |      Raises:
     |          ValueError: If both :attr:`custom_path` and :attr:`out` are passed.
     |  
     |  ddoowwnnllooaadd__aass__bbyytteeaarrrraayy(self, buf=None)
     |      Download this file and return it as a bytearray.
     |      
     |      Args:
     |          buf (:obj:`bytearray`, optional): Extend the given bytearray with the downloaded data.
     |      
     |      Returns:
     |          :obj:`bytearray`: The same object as :attr:`buf` if it was specified. Otherwise a newly
     |          allocated :obj:`bytearray`.
     |  
     |  sseett__ccrreeddeennttiiaallss(self, credentials)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class FFiilleeCCrreeddeennttiiaallss(_CredentialsBase)
     |  These credentials can be used to decrypt encrypted files from the front_side,
     |  reverse_side, selfie and files fields in EncryptedPassportData.
     |  
     |  Args:
     |      file_hash (:obj:`str`): Checksum of encrypted file
     |      secret (:obj:`str`): Secret of encrypted file
     |  
     |  Attributes:
     |      hash (:obj:`str`): Checksum of encrypted file
     |      secret (:obj:`str`): Secret of encrypted file
     |  
     |  Method resolution order:
     |      FileCredentials
     |      _CredentialsBase
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, file_hash, secret, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from _CredentialsBase:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ddee__lliisstt(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class FFoorrcceeRReeppllyy(telegram.replymarkup.ReplyMarkup)
     |  Upon receiving a message with this object, Telegram clients will display a reply interface to
     |  the user (act as if the user has selected the bot's message and tapped 'Reply'). This can be
     |  extremely useful if you want to create user-friendly step-by-step interfaces without having
     |  to sacrifice privacy mode.
     |  
     |  Attributes:
     |      force_reply (:obj:`True`): Shows reply interface to the user.
     |      selective (:obj:`bool`): Optional. Force reply from specific users only.
     |  
     |  Args:
     |      selective (:obj:`bool`, optional): Use this parameter if you want to force reply from
     |          specific users only. Targets:
     |  
     |          1) users that are @mentioned in the text of the Message object
     |          2) if the bot's message is a reply (has reply_to_message_id), sender of the
     |             original message.
     |  
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      ForceReply
     |      telegram.replymarkup.ReplyMarkup
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, force_reply=True, selective=False, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from telegram.base.TelegramObject:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class GGaammee(telegram.base.TelegramObject)
     |  This object represents a game. Use BotFather to create and edit games, their short names will
     |  act as unique identifiers.
     |  
     |  Attributes:
     |      title (:obj:`str`): Title of the game.
     |      description (:obj:`str`): Description of the game.
     |      photo (List[:class:`telegram.PhotoSize`]): Photo that will be displayed in the game message
     |          in chats.
     |      text (:obj:`str`): Optional. Brief description of the game or high scores included in the
     |          game message. Can be automatically edited to include current high scores for the game
     |          when the bot calls set_game_score, or manually edited using edit_message_text.
     |      text_entities (List[:class:`telegram.MessageEntity`]): Optional. Special entities that
     |          appear in text, such as usernames, URLs, bot commands, etc.
     |      animation (:class:`telegram.Animation`): Optional. Animation that will be displayed in the
     |          game message in chats. Upload via BotFather.
     |  
     |  Args:
     |      title (:obj:`str`): Title of the game.
     |      description (:obj:`str`): Description of the game.
     |      photo (List[:class:`telegram.PhotoSize`]): Photo that will be displayed in the game message
     |          in chats.
     |      text (:obj:`str`, optional): Brief description of the game or high scores included in the
     |          game message. Can be automatically edited to include current high scores for the game
     |          when the bot calls set_game_score, or manually edited using edit_message_text.
     |          0-4096 characters. Also found as ``telegram.constants.MAX_MESSAGE_LENGTH``.
     |      text_entities (List[:class:`telegram.MessageEntity`], optional): Special entities that
     |          appear in text, such as usernames, URLs, bot commands, etc.
     |      animation (:class:`telegram.Animation`, optional): Animation that will be displayed in the
     |          game message in chats. Upload via BotFather.
     |  
     |  Method resolution order:
     |      Game
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, title, description, photo, text=None, text_entities=None, animation=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ppaarrssee__tteexxtt__eennttiittiieess(self, types=None)
     |      Returns a :obj:`dict` that maps :class:`telegram.MessageEntity` to :obj:`str`.
     |      It contains entities from this message filtered by their ``type`` attribute as the key, and
     |      the text that each entity belongs to as the value of the :obj:`dict`.
     |      
     |      Note:
     |          This method should always be used instead of the :attr:`text_entities` attribute, since
     |          it calculates the correct substring from the message text based on UTF-16 codepoints.
     |          See :attr:`parse_text_entity` for more info.
     |      
     |      Args:
     |          types (List[:obj:`str`], optional): List of ``MessageEntity`` types as strings. If the
     |                  ``type`` attribute of an entity is contained in this list, it will be returned.
     |                  Defaults to :attr:`telegram.MessageEntity.ALL_TYPES`.
     |      
     |      Returns:
     |          Dict[:class:`telegram.MessageEntity`, :obj:`str`]: A dictionary of entities mapped to
     |          the text that belongs to them, calculated based on UTF-16 codepoints.
     |  
     |  ppaarrssee__tteexxtt__eennttiittyy(self, entity)
     |      Returns the text from a given :class:`telegram.MessageEntity`.
     |      
     |      Note:
     |          This method is present because Telegram calculates the offset and length in
     |          UTF-16 codepoint pairs, which some versions of Python don't handle automatically.
     |          (That is, you can't just slice ``Message.text`` with the offset and length.)
     |      
     |      Args:
     |          entity (:class:`telegram.MessageEntity`): The entity to extract the text from. It must
     |              be an entity that belongs to this message.
     |      
     |      Returns:
     |          :obj:`str`: The text of the given entity.
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class GGaammeeHHiigghhSSccoorree(telegram.base.TelegramObject)
     |  This object represents one row of the high scores table for a game.
     |  
     |  Attributes:
     |      position (:obj:`int`): Position in high score table for the game.
     |      user (:class:`telegram.User`): User.
     |      score (:obj:`int`): Score.
     |  
     |  Args:
     |      position (:obj:`int`): Position in high score table for the game.
     |      user (:class:`telegram.User`): User.
     |      score (:obj:`int`): Score.
     |  
     |  Method resolution order:
     |      GameHighScore
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, position, user, score)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class IIddDDooccuummeennttDDaattaa(telegram.base.TelegramObject)
     |  This object represents the data of an identity document.
     |  
     |  Attributes:
     |      document_no (:obj:`str`): Document number.
     |      expiry_date (:obj:`str`): Optional. Date of expiry, in DD.MM.YYYY format.
     |  
     |  Method resolution order:
     |      IdDocumentData
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, document_no, expiry_date, bot=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class IInnlliinneeKKeeyybbooaarrddBBuuttttoonn(telegram.base.TelegramObject)
     |  This object represents one button of an inline keyboard.
     |  
     |  Note:
     |      You must use exactly one of the optional fields. Mind that :attr:`callback_game` is not
     |      working as expected. Putting a game short name in it might, but is not guaranteed to work.
     |  
     |  Attributes:
     |      text (:obj:`str`): Label text on the button.
     |      url (:obj:`str`): Optional. HTTP url to be opened when button is pressed.
     |      callback_data (:obj:`str`): Optional. Data to be sent in a callback query to the bot when
     |          button is pressed, 1-64 bytes.
     |      switch_inline_query (:obj:`str`): Optional. Will prompt the user to select one of their
     |          chats, open that chat and insert the bot's username and the specified inline query in
     |          the input field.
     |      switch_inline_query_current_chat (:obj:`str`): Optional. Will insert the bot's username and
     |          the specified inline query in the current chat's input field.
     |      callback_game (:class:`telegram.CallbackGame`): Optional. Description of the game that will
     |          be launched when the user presses the button.
     |      pay (:obj:`bool`): Optional. Specify True, to send a Pay button.
     |  
     |  Args:
     |      text (:obj:`str`): Label text on the button.
     |      url (:obj:`str`): HTTP url to be opened when button is pressed.
     |      callback_data (:obj:`str`, optional): Data to be sent in a callback query to the bot when
     |          button is pressed, 1-64 bytes.
     |      switch_inline_query (:obj:`str`, optional): If set, pressing the button will prompt the
     |          user to select one of their chats, open that chat and insert the bot's username and the
     |          specified inline query in the input field. Can be empty, in which case just the bot's
     |          username will be inserted. This offers an easy way for users to start using your bot
     |          in inline mode when they are currently in a private chat with it. Especially useful
     |          when combined with switch_pm* actions - in this case the user will be automatically
     |          returned to the chat they switched from, skipping the chat selection screen.
     |      switch_inline_query_current_chat (:obj:`str`, optional): If set, pressing the button will
     |          insert the bot's username and the specified inline query in the current chat's input
     |          field. Can be empty, in which case only the bot's username will be inserted. This
     |          offers a quick way for the user to open your bot in inline mode in the same chat - good
     |          for selecting something from multiple options.
     |      callback_game (:class:`telegram.CallbackGame`, optional): Description of the game that will
     |          be launched when the user presses the button. This type of button must always be
     |          the ``first`` button in the first row.
     |      pay (:obj:`bool`, optional): Specify True, to send a Pay button. This type of button must
     |          always be the ``first`` button in the first row.
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      InlineKeyboardButton
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, text, url=None, callback_data=None, switch_inline_query=None, switch_inline_query_current_chat=None, callback_game=None, pay=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from telegram.base.TelegramObject:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class IInnlliinneeKKeeyybbooaarrddMMaarrkkuupp(telegram.replymarkup.ReplyMarkup)
     |  This object represents an inline keyboard that appears right next to the message it belongs to.
     |  
     |  Attributes:
     |      inline_keyboard (List[List[:class:`telegram.InlineKeyboardButton`]]): Array of button rows,
     |          each represented by an Array of InlineKeyboardButton objects.
     |  
     |  Args:
     |      inline_keyboard (List[List[:class:`telegram.InlineKeyboardButton`]]): Array of button rows,
     |          each represented by an Array of InlineKeyboardButton objects.
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      InlineKeyboardMarkup
     |      telegram.replymarkup.ReplyMarkup
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, inline_keyboard, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from telegram.base.TelegramObject:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class IInnlliinneeQQuueerryy(telegram.base.TelegramObject)
     |  This object represents an incoming inline query. When the user sends an empty query, your bot
     |  could return some default or trending results.
     |  
     |  Note:
     |      * In Python `from` is a reserved word, use `from_user` instead.
     |  
     |  Attributes:
     |      id (:obj:`str`): Unique identifier for this query.
     |      from_user (:class:`telegram.User`): Sender.
     |      location (:class:`telegram.Location`): Optional. Sender location, only for bots that
     |          request user location.
     |      query (:obj:`str`): Text of the query (up to 512 characters).
     |      offset (:obj:`str`): Offset of the results to be returned, can be controlled by the bot.
     |  
     |  Args:
     |      id (:obj:`str`): Unique identifier for this query.
     |      from_user (:class:`telegram.User`): Sender.
     |      location (:class:`telegram.Location`, optional): Sender location, only for bots that
     |          request user location.
     |      query (:obj:`str`): Text of the query (up to 512 characters).
     |      offset (:obj:`str`): Offset of the results to be returned, can be controlled by the bot.
     |      bot (:class:`telegram.Bot`, optional): The Bot to use for instance methods.
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      InlineQuery
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, id, from_user, query, offset, location=None, bot=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  aannsswweerr(self, *args, **kwargs)
     |      Shortcut for::
     |      
     |          bot.answer_inline_query(update.inline_query.id, *args, **kwargs)
     |      
     |      Args:
     |          results (List[:class:`telegram.InlineQueryResult`]): A list of results for the inline
     |              query.
     |          cache_time (:obj:`int`, optional): The maximum amount of time in seconds that the
     |              result of the inline query may be cached on the server. Defaults to 300.
     |          is_personal (:obj:`bool`, optional): Pass True, if results may be cached on the server
     |              side only for the user that sent the query. By default, results may be returned to
     |              any user who sends the same query.
     |          next_offset (:obj:`str`, optional): Pass the offset that a client should send in the
     |              next query with the same text to receive more results. Pass an empty string if
     |              there are no more results or if you don't support pagination. Offset length can't
     |              exceed 64 bytes.
     |          switch_pm_text (:obj:`str`, optional): If passed, clients will display a button with
     |              specified text that switches the user to a private chat with the bot and sends the
     |              bot a start message with the parameter switch_pm_parameter.
     |          switch_pm_parameter (:obj:`str`, optional): Deep-linking parameter for the /start
     |              message sent to the bot when user presses the switch button. 1-64 characters,
     |              only A-Z, a-z, 0-9, _ and - are allowed.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class IInnlliinneeQQuueerryyRReessuulltt(telegram.base.TelegramObject)
     |  Baseclass for the InlineQueryResult* classes.
     |  
     |  Attributes:
     |      type (:obj:`str`): Type of the result.
     |      id (:obj:`str`): Unique identifier for this result, 1-64 Bytes.
     |  
     |  Args:
     |      type (:obj:`str`): Type of the result.
     |      id (:obj:`str`): Unique identifier for this result, 1-64 Bytes.
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      InlineQueryResult
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, type, id, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from telegram.base.TelegramObject:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class IInnlliinneeQQuueerryyRReessuullttAArrttiiccllee(telegram.inline.inlinequeryresult.InlineQueryResult)
     |  This object represents a Telegram InlineQueryResultArticle.
     |  
     |  Attributes:
     |      type (:obj:`str`): 'article'.
     |      id (:obj:`str`): Unique identifier for this result, 1-64 Bytes.
     |      title (:obj:`str`): Title of the result.
     |      input_message_content (:class:`telegram.InputMessageContent`): Content of the message to
     |          be sent.
     |      reply_markup (:class:`telegram.ReplyMarkup`): Optional. Inline keyboard attached to
     |          the message.
     |      url (:obj:`str`): Optional. URL of the result.
     |      hide_url (:obj:`bool`): Optional. Pass True, if you don't want the URL to be shown in the
     |          message.
     |      description (:obj:`str`): Optional. Short description of the result.
     |      thumb_url (:obj:`str`): Optional. Url of the thumbnail for the result.
     |      thumb_width (:obj:`int`): Optional. Thumbnail width.
     |      thumb_height (:obj:`int`): Optional. Thumbnail height.
     |  
     |  Args:
     |      id (:obj:`str`): Unique identifier for this result, 1-64 Bytes.
     |      title (:obj:`str`): Title of the result.
     |      input_message_content (:class:`telegram.InputMessageContent`): Content of the message to
     |          be sent.
     |      reply_markup (:class:`telegram.ReplyMarkup`, optional): Inline keyboard attached to
     |          the message
     |      url (:obj:`str`, optional): URL of the result.
     |      hide_url (:obj:`bool`, optional): Pass True, if you don't want the URL to be shown in the
     |          message.
     |      description (:obj:`str`, optional): Short description of the result.
     |      thumb_url (:obj:`str`, optional): Url of the thumbnail for the result.
     |      thumb_width (:obj:`int`, optional): Thumbnail width.
     |      thumb_height (:obj:`int`, optional): Thumbnail height.
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      InlineQueryResultArticle
     |      telegram.inline.inlinequeryresult.InlineQueryResult
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, id, title, input_message_content, reply_markup=None, url=None, hide_url=None, description=None, thumb_url=None, thumb_width=None, thumb_height=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from telegram.base.TelegramObject:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class IInnlliinneeQQuueerryyRReessuullttAAuuddiioo(telegram.inline.inlinequeryresult.InlineQueryResult)
     |  Represents a link to an mp3 audio file. By default, this audio file will be sent by the user.
     |  Alternatively, you can use :attr:`input_message_content` to send a message with the specified
     |  content instead of the audio.
     |  
     |  Attributes:
     |      type (:obj:`str`): 'audio'.
     |      id (:obj:`str`): Unique identifier for this result, 1-64 bytes.
     |      audio_url (:obj:`str`): A valid URL for the audio file.
     |      title (:obj:`str`): Title.
     |      performer (:obj:`str`): Optional. Caption, 0-200 characters.
     |      audio_duration (:obj:`str`): Optional. Performer.
     |      caption (:obj:`str`): Optional. Audio duration in seconds.
     |      parse_mode (:obj:`str`): Optional. Send Markdown or HTML, if you want Telegram apps to show
     |          bold, italic, fixed-width text or inline URLs in the media caption. See the constants
     |          in :class:`telegram.ParseMode` for the available modes.
     |      reply_markup (:class:`telegram.InlineKeyboardMarkup`): Optional. Inline keyboard attached
     |          to the message.
     |      input_message_content (:class:`telegram.InputMessageContent`): Optional. Content of the
     |          message to be sent instead of the audio.
     |  
     |  Args:
     |      id (:obj:`str`): Unique identifier for this result, 1-64 bytes.
     |      audio_url (:obj:`str`): A valid URL for the audio file.
     |      title (:obj:`str`): Title.
     |      performer (:obj:`str`, optional): Caption, 0-200 characters.
     |      audio_duration (:obj:`str`, optional): Performer.
     |      caption (:obj:`str`, optional): Audio duration in seconds.
     |      parse_mode (:obj:`str`, optional): Send Markdown or HTML, if you want Telegram apps to show
     |          bold, italic, fixed-width text or inline URLs in the media caption. See the constants
     |          in :class:`telegram.ParseMode` for the available modes.
     |      reply_markup (:class:`telegram.InlineKeyboardMarkup`, optional): Inline keyboard attached
     |          to the message.
     |      input_message_content (:class:`telegram.InputMessageContent`, optional): Content of the
     |          message to be sent instead of the audio.
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      InlineQueryResultAudio
     |      telegram.inline.inlinequeryresult.InlineQueryResult
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, id, audio_url, title, performer=None, audio_duration=None, caption=None, reply_markup=None, input_message_content=None, parse_mode=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from telegram.base.TelegramObject:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class IInnlliinneeQQuueerryyRReessuullttCCaacchheeddAAuuddiioo(telegram.inline.inlinequeryresult.InlineQueryResult)
     |  Represents a link to an mp3 audio file stored on the Telegram servers. By default, this audio
     |  file will be sent by the user. Alternatively, you can use :attr:`input_message_content` to
     |  send amessage with the specified content instead of the audio.
     |  
     |  Attributes:
     |      type (:obj:`str`): 'audio'.
     |      id (:obj:`str`): Unique identifier for this result, 1-64 bytes.
     |      audio_file_id (:obj:`str`): A valid file identifier for the audio file.
     |      caption (:obj:`str`): Optional. Caption, 0-200 characters
     |      parse_mode (:obj:`str`): Optional. Send Markdown or HTML, if you want Telegram apps to show
     |          bold, italic, fixed-width text or inline URLs in the media caption. See the constants
     |          in :class:`telegram.ParseMode` for the available modes.
     |      reply_markup (:class:`telegram.InlineKeyboardMarkup`): Optional. Inline keyboard attached
     |          to the message.
     |      input_message_content (:class:`telegram.InputMessageContent`): Optional. Content of the
     |          message to be sent instead of the audio.
     |  
     |  Args:
     |      id (:obj:`str`): Unique identifier for this result, 1-64 bytes.
     |      audio_file_id (:obj:`str`): A valid file identifier for the audio file.
     |      caption (:obj:`str`, optional): Caption, 0-200 characters
     |      parse_mode (:obj:`str`, optional): Send Markdown or HTML, if you want Telegram apps to show
     |          bold, italic, fixed-width text or inline URLs in the media caption. See the constants
     |          in :class:`telegram.ParseMode` for the available modes.
     |      reply_markup (:class:`telegram.InlineKeyboardMarkup`, optional): Inline keyboard attached
     |          to the message.
     |      input_message_content (:class:`telegram.InputMessageContent`, optional): Content of the
     |          message to be sent instead of the audio.
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      InlineQueryResultCachedAudio
     |      telegram.inline.inlinequeryresult.InlineQueryResult
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, id, audio_file_id, caption=None, reply_markup=None, input_message_content=None, parse_mode=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from telegram.base.TelegramObject:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class IInnlliinneeQQuueerryyRReessuullttCCaacchheeddDDooccuummeenntt(telegram.inline.inlinequeryresult.InlineQueryResult)
     |  Represents a link to a file stored on the Telegram servers. By default, this file will be sent
     |  by the user with an optional caption. Alternatively, you can use :attr:`input_message_content`
     |  to send a message with the specified content instead of the file.
     |  
     |  Attributes:
     |      type (:obj:`str`): 'document'.
     |      id (:obj:`str`): Unique identifier for this result, 1-64 bytes.
     |      title (:obj:`str`): Title for the result.
     |      document_file_id (:obj:`str`): A valid file identifier for the file.
     |      description (:obj:`str`): Optional. Short description of the result.
     |      caption (:obj:`str`): Optional. Caption, 0-200 characters
     |      parse_mode (:obj:`str`): Optional. Send Markdown or HTML, if you want Telegram apps to show
     |          bold, italic, fixed-width text or inline URLs in the media caption.. See the constants
     |          in :class:`telegram.ParseMode` for the available modes.
     |      reply_markup (:class:`telegram.InlineKeyboardMarkup`): Optional. Inline keyboard attached
     |          to the message.
     |      input_message_content (:class:`telegram.InputMessageContent`): Optional. Content of the
     |          message to be sent instead of the file.
     |  
     |  Args:
     |      id (:obj:`str`): Unique identifier for this result, 1-64 bytes.
     |      title (:obj:`str`): Title for the result.
     |      document_file_id (:obj:`str`): A valid file identifier for the file.
     |      description (:obj:`str`, optional): Short description of the result.
     |      caption (:obj:`str`, optional): Caption, 0-200 characters
     |      parse_mode (:obj:`str`, optional): Send Markdown or HTML, if you want Telegram apps to show
     |          bold, italic, fixed-width text or inline URLs in the media caption.. See the constants
     |          in :class:`telegram.ParseMode` for the available modes.
     |      reply_markup (:class:`telegram.InlineKeyboardMarkup`, optional): Inline keyboard attached
     |          to the message.
     |      input_message_content (:class:`telegram.InputMessageContent`, optional): Content of the
     |          message to be sent instead of the file.
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      InlineQueryResultCachedDocument
     |      telegram.inline.inlinequeryresult.InlineQueryResult
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, id, title, document_file_id, description=None, caption=None, reply_markup=None, input_message_content=None, parse_mode=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from telegram.base.TelegramObject:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class IInnlliinneeQQuueerryyRReessuullttCCaacchheeddGGiiff(telegram.inline.inlinequeryresult.InlineQueryResult)
     |  Represents a link to an animated GIF file stored on the Telegram servers. By default, this
     |  animated GIF file will be sent by the user with an optional caption. Alternatively, you can
     |  use :attr:`input_message_content` to send a message with specified content instead of
     |  the animation.
     |  
     |  Attributes:
     |      type (:obj:`str`): 'gif'.
     |      id (:obj:`str`): Unique identifier for this result, 1-64 bytes.
     |      gif_file_id (:obj:`str`): A valid file identifier for the GIF file.
     |      title (:obj:`str`): Optional. Title for the result.
     |      caption (:obj:`str`): Optional. Caption, 0-200 characters
     |      parse_mode (:obj:`str`): Optional. Send Markdown or HTML, if you want Telegram apps to show
     |          bold, italic, fixed-width text or inline URLs in the media caption. See the constants
     |          in :class:`telegram.ParseMode` for the available modes.
     |      reply_markup (:class:`telegram.InlineKeyboardMarkup`): Optional. Inline keyboard attached
     |          to the message.
     |      input_message_content (:class:`telegram.InputMessageContent`): Optional. Content of the
     |          message to be sent instead of the gif.
     |  
     |  Args:
     |      id (:obj:`str`): Unique identifier for this result, 1-64 bytes.
     |      gif_file_id (:obj:`str`): A valid file identifier for the GIF file.
     |      title (:obj:`str`, optional): Title for the result.caption (:obj:`str`, optional):
     |      caption (:obj:`str`, optional): Caption, 0-200 characters
     |      parse_mode (:obj:`str`, optional): Send Markdown or HTML, if you want Telegram apps to show
     |          bold, italic, fixed-width text or inline URLs in the media caption. See the constants
     |          in :class:`telegram.ParseMode` for the available modes.
     |      reply_markup (:class:`telegram.InlineKeyboardMarkup`, optional): Inline keyboard attached
     |          to the message.
     |      input_message_content (:class:`telegram.InputMessageContent`, optional): Content of the
     |          message to be sent instead of the gif.
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      InlineQueryResultCachedGif
     |      telegram.inline.inlinequeryresult.InlineQueryResult
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, id, gif_file_id, title=None, caption=None, reply_markup=None, input_message_content=None, parse_mode=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from telegram.base.TelegramObject:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class IInnlliinneeQQuueerryyRReessuullttCCaacchheeddMMppeegg44GGiiff(telegram.inline.inlinequeryresult.InlineQueryResult)
     |  Represents a link to a video animation (H.264/MPEG-4 AVC video without sound) stored on the
     |  Telegram servers. By default, this animated MPEG-4 file will be sent by the user with an
     |  optional caption. Alternatively, you can use :attr:`input_message_content` to send a message
     |  with the specified content instead of the animation.
     |  
     |  Attributes:
     |      type (:obj:`str`): 'mpeg4_gif'.
     |      id (:obj:`str`): Unique identifier for this result, 1-64 bytes.
     |      mpeg4_file_id (:obj:`str`): A valid file identifier for the MP4 file.
     |      title (:obj:`str`): Optional. Title for the result.
     |      caption (:obj:`str`): Optional. Caption, 0-200 characters
     |      parse_mode (:obj:`str`): Send Markdown or HTML, if you want Telegram apps to show
     |          bold, italic, fixed-width text or inline URLs in the media caption. See the constants
     |          in :class:`telegram.ParseMode` for the available modes.
     |      reply_markup (:class:`telegram.InlineKeyboardMarkup`): Optional. Inline keyboard attached
     |          to the message.
     |      input_message_content (:class:`telegram.InputMessageContent`): Optional. Content of the
     |          message to be sent instead of the MPEG-4 file.
     |  
     |  Args:
     |      id (:obj:`str`): Unique identifier for this result, 1-64 bytes.
     |      mpeg4_file_id (:obj:`str`): A valid file identifier for the MP4 file.
     |      title (:obj:`str`, optional): Title for the result.
     |      caption (:obj:`str`, optional): Caption, 0-200 characters
     |      parse_mode (:obj:`str`, optional): Send Markdown or HTML, if you want Telegram apps to show
     |          bold, italic, fixed-width text or inline URLs in the media caption. See the constants
     |          in :class:`telegram.ParseMode` for the available modes.
     |      reply_markup (:class:`telegram.InlineKeyboardMarkup`, optional): Inline keyboard attached
     |          to the message.
     |      input_message_content (:class:`telegram.InputMessageContent`, optional): Content of the
     |          message to be sent instead of the MPEG-4 file.
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      InlineQueryResultCachedMpeg4Gif
     |      telegram.inline.inlinequeryresult.InlineQueryResult
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, id, mpeg4_file_id, title=None, caption=None, reply_markup=None, input_message_content=None, parse_mode=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from telegram.base.TelegramObject:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class IInnlliinneeQQuueerryyRReessuullttCCaacchheeddPPhhoottoo(telegram.inline.inlinequeryresult.InlineQueryResult)
     |  Represents a link to a photo stored on the Telegram servers. By default, this photo will be
     |  sent by the user with an optional caption. Alternatively, you can use
     |  :attr:`input_message_content` to send a message with the specified content instead
     |  of the photo.
     |  
     |  Attributes:
     |      type (:obj:`str`): 'photo'.
     |      id (:obj:`str`): Unique identifier for this result, 1-64 bytes.
     |      photo_file_id (:obj:`str`): A valid file identifier of the photo.
     |      title (:obj:`str`): Optional. Title for the result.
     |      description (:obj:`str`): Optional. Short description of the result.
     |      caption (:obj:`str`): Optional. Caption, 0-200 characters
     |      parse_mode (:obj:`str`): Optional. Send Markdown or HTML, if you want Telegram apps to show
     |          bold, italic, fixed-width text or inline URLs in the media caption. See the constants
     |          in :class:`telegram.ParseMode` for the available modes.
     |      reply_markup (:class:`telegram.InlineKeyboardMarkup`): Optional. Inline keyboard attached
     |          to the message.
     |      input_message_content (:class:`telegram.InputMessageContent`): Optional. Content of the
     |          message to be sent instead of the photo.
     |  
     |  Args:
     |      id (:obj:`str`): Unique identifier for this result, 1-64 bytes.
     |      photo_file_id (:obj:`str`): A valid file identifier of the photo.
     |      title (:obj:`str`, optional): Title for the result.
     |      description (:obj:`str`, optional): Short description of the result.
     |      caption (:obj:`str`, optional): Caption, 0-200 characters
     |      parse_mode (:obj:`str`, optional): Send Markdown or HTML, if you want Telegram apps to show
     |          bold, italic, fixed-width text or inline URLs in the media caption. See the constants
     |          in :class:`telegram.ParseMode` for the available modes.
     |      reply_markup (:class:`telegram.InlineKeyboardMarkup`, optional): Inline keyboard attached
     |          to the message.
     |      input_message_content (:class:`telegram.InputMessageContent`, optional): Content of the
     |          message to be sent instead of the photo.
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      InlineQueryResultCachedPhoto
     |      telegram.inline.inlinequeryresult.InlineQueryResult
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, id, photo_file_id, title=None, description=None, caption=None, reply_markup=None, input_message_content=None, parse_mode=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from telegram.base.TelegramObject:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class IInnlliinneeQQuueerryyRReessuullttCCaacchheeddSSttiicckkeerr(telegram.inline.inlinequeryresult.InlineQueryResult)
     |  Represents a link to a sticker stored on the Telegram servers. By default, this sticker will
     |  be sent by the user. Alternatively, you can use :attr:`input_message_content` to send a
     |  message with the specified content instead of the sticker.
     |  
     |  Attributes:
     |      type (:obj:`str`): 'sticker`.
     |      id (:obj:`str`): Unique identifier for this result, 1-64 bytes.
     |      sticker_file_id (:obj:`str`): A valid file identifier of the sticker.
     |      reply_markup (:class:`telegram.InlineKeyboardMarkup`): Optional. Inline keyboard attached
     |          to the message.
     |      input_message_content (:class:`telegram.InputMessageContent`): Optional. Content of the
     |          message to be sent instead of the sticker.
     |  
     |  Args:
     |      id (:obj:`str`):
     |      sticker_file_id (:obj:`str`):
     |      reply_markup (:class:`telegram.InlineKeyboardMarkup`, optional): Inline keyboard attached
     |          to the message.
     |      input_message_content (:class:`telegram.InputMessageContent`, optional): Content of the
     |          message to be sent instead of the sticker.
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      InlineQueryResultCachedSticker
     |      telegram.inline.inlinequeryresult.InlineQueryResult
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, id, sticker_file_id, reply_markup=None, input_message_content=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from telegram.base.TelegramObject:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class IInnlliinneeQQuueerryyRReessuullttCCaacchheeddVViiddeeoo(telegram.inline.inlinequeryresult.InlineQueryResult)
     |  Represents a link to a video file stored on the Telegram servers. By default, this video file
     |  will be sent by the user with an optional caption. Alternatively, you can use
     |  :attr:`input_message_content` to send a message with the specified content instead
     |  of the video.
     |  
     |  Attributes:
     |      type (:obj:`str`): 'video'.
     |      id (:obj:`str`): Unique identifier for this result, 1-64 bytes.
     |      video_file_id (:obj:`str`): A valid file identifier for the video file.
     |      title (:obj:`str`): Title for the result.
     |      description (:obj:`str`): Optional. Short description of the result.
     |      caption (:obj:`str`): Optional. Caption, 0-200 characters.
     |      parse_mode (:obj:`str`): Optional. Send Markdown or HTML, if you want Telegram apps to show
     |          bold, italic, fixed-width text or inline URLs in the media caption. See the constants
     |          in :class:`telegram.ParseMode` for the available modes.
     |      reply_markup (:class:`telegram.InlineKeyboardMarkup`): Optional. Inline keyboard attached
     |          to the message.
     |      input_message_content (:class:`telegram.InputMessageContent`): Optional. Content of the
     |          message to be sent instead of the video.
     |  
     |  Args:
     |      id (:obj:`str`): Unique identifier for this result, 1-64 bytes.
     |      video_file_id (:obj:`str`): A valid file identifier for the video file.
     |      title (:obj:`str`): Title for the result.
     |      description (:obj:`str`, optional): Short description of the result.
     |      caption (:obj:`str`, optional): Caption, 0-200 characters.
     |      parse_mode (:obj:`str`, optional): Send Markdown or HTML, if you want Telegram apps to show
     |          bold, italic, fixed-width text or inline URLs in the media caption. See the constants
     |          in :class:`telegram.ParseMode` for the available modes.
     |      reply_markup (:class:`telegram.InlineKeyboardMarkup`, optional): Inline keyboard attached
     |          to the message.
     |      input_message_content (:class:`telegram.InputMessageContent`, optional): Content of the
     |          message to be sent instead of the video.
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      InlineQueryResultCachedVideo
     |      telegram.inline.inlinequeryresult.InlineQueryResult
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, id, video_file_id, title, description=None, caption=None, reply_markup=None, input_message_content=None, parse_mode=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from telegram.base.TelegramObject:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class IInnlliinneeQQuueerryyRReessuullttCCaacchheeddVVooiiccee(telegram.inline.inlinequeryresult.InlineQueryResult)
     |  Represents a link to a voice message stored on the Telegram servers. By default, this voice
     |  message will be sent by the user. Alternatively, you can use :attr:`input_message_content` to
     |  send a message with the specified content instead of the voice message.
     |  
     |  Attributes:
     |      type (:obj:`str`): 'voice'.
     |      id (:obj:`str`): Unique identifier for this result, 1-64 bytes.
     |      voice_file_id (:obj:`str`): A valid file identifier for the voice message.
     |      title (:obj:`str`): Voice message title.
     |      caption (:obj:`str`): Optional. Caption, 0-200 characters.
     |      parse_mode (:obj:`str`): Optional. Send Markdown or HTML, if you want Telegram apps to show
     |          bold, italic, fixed-width text or inline URLs in the media caption. See the constants
     |          in :class:`telegram.ParseMode` for the available modes.
     |      reply_markup (:class:`telegram.InlineKeyboardMarkup`): Optional. Inline keyboard attached
     |          to the message.
     |      input_message_content (:class:`telegram.InputMessageContent`): Optional. Content of the
     |          message to be sent instead of the voice.
     |  
     |  Args:
     |      id (:obj:`str`): Unique identifier for this result, 1-64 bytes.
     |      voice_file_id (:obj:`str`): A valid file identifier for the voice message.
     |      title (:obj:`str`): Voice message title.
     |      caption (:obj:`str`, optional): Caption, 0-200 characters.
     |      parse_mode (:obj:`str`, optional): Send Markdown or HTML, if you want Telegram apps to show
     |          bold, italic, fixed-width text or inline URLs in the media caption. See the constants
     |          in :class:`telegram.ParseMode` for the available modes.
     |      reply_markup (:class:`telegram.InlineKeyboardMarkup`, optional): Inline keyboard attached
     |          to the message.
     |      input_message_content (:class:`telegram.InputMessageContent`, optional): Content of the
     |          message to be sent instead of the voice.
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      InlineQueryResultCachedVoice
     |      telegram.inline.inlinequeryresult.InlineQueryResult
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, id, voice_file_id, title, caption=None, reply_markup=None, input_message_content=None, parse_mode=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from telegram.base.TelegramObject:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class IInnlliinneeQQuueerryyRReessuullttCCoonnttaacctt(telegram.inline.inlinequeryresult.InlineQueryResult)
     |  Represents a contact with a phone number. By default, this contact will be sent by the user.
     |  Alternatively, you can use :attr:`input_message_content` to send a message with the specified
     |  content instead of the contact.
     |  
     |  Attributes:
     |      type (:obj:`str`): 'contact'.
     |      id (:obj:`str`): Unique identifier for this result, 1-64 bytes.
     |      phone_number (:obj:`str`): Contact's phone number.
     |      first_name (:obj:`str`): Contact's first name.
     |      last_name (:obj:`str`): Optional. Contact's last name.
     |      vcard (:obj:`str`): Optional. Additional data about the contact in the form of a vCard,
     |          0-2048 bytes.
     |      reply_markup (:class:`telegram.InlineKeyboardMarkup`): Optional. Inline keyboard attached
     |          to the message.
     |      input_message_content (:class:`telegram.InputMessageContent`): Optional. Content of the
     |          message to be sent instead of the contact.
     |      thumb_url (:obj:`str`): Optional. Url of the thumbnail for the result.
     |      thumb_width (:obj:`int`): Optional. Thumbnail width.
     |      thumb_height (:obj:`int`): Optional. Thumbnail height.
     |  
     |  Args:
     |      id (:obj:`str`): Unique identifier for this result, 1-64 bytes.
     |      phone_number (:obj:`str`): Contact's phone number.
     |      first_name (:obj:`str`): Contact's first name.
     |      last_name (:obj:`str`, optional): Contact's last name.
     |      vcard (:obj:`str`, optional): Additional data about the contact in the form of a vCard,
     |          0-2048 bytes.
     |      reply_markup (:class:`telegram.InlineKeyboardMarkup`, optional): Inline keyboard attached
     |          to the message.
     |      input_message_content (:class:`telegram.InputMessageContent`, optional): Content of the
     |          message to be sent instead of the contact.
     |      thumb_url (:obj:`str`, optional): Url of the thumbnail for the result.
     |      thumb_width (:obj:`int`, optional): Thumbnail width.
     |      thumb_height (:obj:`int`, optional): Thumbnail height.
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      InlineQueryResultContact
     |      telegram.inline.inlinequeryresult.InlineQueryResult
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, id, phone_number, first_name, last_name=None, reply_markup=None, input_message_content=None, thumb_url=None, thumb_width=None, thumb_height=None, vcard=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from telegram.base.TelegramObject:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class IInnlliinneeQQuueerryyRReessuullttDDooccuummeenntt(telegram.inline.inlinequeryresult.InlineQueryResult)
     |  Represents a link to a file. By default, this file will be sent by the user with an optional
     |  caption. Alternatively, you can use :attr:`input_message_content` to send a message with the
     |  specified content instead of the file. Currently, only .PDF and .ZIP files can be sent
     |  using this method.
     |  
     |  Attributes:
     |      type (:obj:`str`): 'document'.
     |      id (:obj:`str`): Unique identifier for this result, 1-64 bytes.
     |      title (:obj:`str`): Title for the result.
     |      caption (:obj:`str`): Optional. Caption, 0-200 characters
     |      parse_mode (:obj:`str`): Optional. Send Markdown or HTML, if you want Telegram apps to show
     |          bold, italic, fixed-width text or inline URLs in the media caption. See the constants
     |          in :class:`telegram.ParseMode` for the available modes.
     |      document_url (:obj:`str`): A valid URL for the file.
     |      mime_type (:obj:`str`): Mime type of the content of the file, either "application/pdf"
     |          or "application/zip".
     |      description (:obj:`str`): Optional. Short description of the result.
     |      reply_markup (:class:`telegram.InlineKeyboardMarkup`): Optional. Inline keyboard attached
     |          to the message.
     |      input_message_content (:class:`telegram.InputMessageContent`): Optional. Content of the
     |          message to be sent instead of the file.
     |      thumb_url (:obj:`str`): Optional. URL of the thumbnail (jpeg only) for the file.
     |      thumb_width (:obj:`int`): Optional. Thumbnail width.
     |      thumb_height (:obj:`int`): Optional. Thumbnail height.
     |  
     |  Args:
     |      id (:obj:`str`): Unique identifier for this result, 1-64 bytes.
     |      title (:obj:`str`): Title for the result.
     |      caption (:obj:`str`, optional): Caption, 0-200 characters
     |      parse_mode (:obj:`str`, optional): Send Markdown or HTML, if you want Telegram apps to show
     |          bold, italic, fixed-width text or inline URLs in the media caption. See the constants
     |          in :class:`telegram.ParseMode` for the available modes.
     |      document_url (:obj:`str`): A valid URL for the file.
     |      mime_type (:obj:`str`): Mime type of the content of the file, either "application/pdf"
     |          or "application/zip".
     |      description (:obj:`str`, optional): Short description of the result.
     |      reply_markup (:class:`telegram.InlineKeyboardMarkup`): Optional. Inline keyboard attached
     |          to the message.
     |      input_message_content (:class:`telegram.InputMessageContent`): Optional. Content of the
     |          message to be sent instead of the file.
     |      thumb_url (:obj:`str`, optional): URL of the thumbnail (jpeg only) for the file.
     |      thumb_width (:obj:`int`, optional): Thumbnail width.
     |      thumb_height (:obj:`int`, optional): Thumbnail height.
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      InlineQueryResultDocument
     |      telegram.inline.inlinequeryresult.InlineQueryResult
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, id, document_url, title, mime_type, caption=None, description=None, reply_markup=None, input_message_content=None, thumb_url=None, thumb_width=None, thumb_height=None, parse_mode=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from telegram.base.TelegramObject:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class IInnlliinneeQQuueerryyRReessuullttGGaammee(telegram.inline.inlinequeryresult.InlineQueryResult)
     |  Represents a Game.
     |  
     |  Attributes:
     |      type (:obj:`str`): 'game'.
     |      id (:obj:`str`): Unique identifier for this result, 1-64 bytes.
     |      game_short_name (:obj:`str`): Short name of the game.
     |      reply_markup (:class:`telegram.InlineKeyboardMarkup`): Optional. Inline keyboard attached
     |          to the message.
     |  
     |  Args:
     |      id (:obj:`str`): Unique identifier for this result, 1-64 bytes.
     |      game_short_name (:obj:`str`): Short name of the game.
     |      reply_markup (:class:`telegram.InlineKeyboardMarkup`, optional): Inline keyboard attached
     |          to the message.
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      InlineQueryResultGame
     |      telegram.inline.inlinequeryresult.InlineQueryResult
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, id, game_short_name, reply_markup=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from telegram.base.TelegramObject:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class IInnlliinneeQQuueerryyRReessuullttGGiiff(telegram.inline.inlinequeryresult.InlineQueryResult)
     |  Represents a link to an animated GIF file. By default, this animated GIF file will be sent by
     |  the user with optional caption. Alternatively, you can use :attr:`input_message_content` to
     |  send a message with the specified content instead of the animation.
     |  
     |  Attributes:
     |      type (:obj:`str`): 'gif'.
     |      id (:obj:`str`): Unique identifier for this result, 1-64 bytes.
     |      gif_url (:obj:`str`): A valid URL for the GIF file. File size must not exceed 1MB.
     |      gif_width (:obj:`int`): Optional. Width of the GIF.
     |      gif_height (:obj:`int`): Optional. Height of the GIF.
     |      gif_duration (:obj:`int`): Optional. Duration of the GIF.
     |      thumb_url (:obj:`str`): URL of the static thumbnail for the result (jpeg or gif).
     |      title (:obj:`str`): Optional. Title for the result.
     |      caption (:obj:`str`): Optional. Caption, 0-200 characters
     |      parse_mode (:obj:`str`): Optional. Send Markdown or HTML, if you want Telegram apps to show
     |          bold, italic, fixed-width text or inline URLs in the media caption. See the constants
     |          in :class:`telegram.ParseMode` for the available modes.
     |      reply_markup (:class:`telegram.InlineKeyboardMarkup`): Optional. Inline keyboard attached
     |          to the message.
     |      input_message_content (:class:`telegram.InputMessageContent`): Optional. Content of the
     |          message to be sent instead of the gif.
     |  
     |  Args:
     |      id (:obj:`str`): Unique identifier for this result, 1-64 bytes.
     |      gif_url (:obj:`str`): A valid URL for the GIF file. File size must not exceed 1MB.
     |      gif_width (:obj:`int`, optional): Width of the GIF.
     |      gif_height (:obj:`int`, optional): Height of the GIF.
     |      gif_duration (:obj:`int`, optional): Duration of the GIF
     |      thumb_url (:obj:`str`): URL of the static thumbnail for the result (jpeg or gif).
     |      title (:obj:`str`, optional): Title for the result.caption (:obj:`str`, optional):
     |      caption (:obj:`str`, optional): Caption, 0-200 characters
     |      parse_mode (:obj:`str`, optional): Send Markdown or HTML, if you want Telegram apps to show
     |          bold, italic, fixed-width text or inline URLs in the media caption. See the constants
     |          in :class:`telegram.ParseMode` for the available modes.
     |      reply_markup (:class:`telegram.InlineKeyboardMarkup`, optional): Inline keyboard attached
     |          to the message.
     |      input_message_content (:class:`telegram.InputMessageContent`, optional): Content of the
     |          message to be sent instead of the gif.
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      InlineQueryResultGif
     |      telegram.inline.inlinequeryresult.InlineQueryResult
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, id, gif_url, thumb_url, gif_width=None, gif_height=None, title=None, caption=None, reply_markup=None, input_message_content=None, gif_duration=None, parse_mode=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from telegram.base.TelegramObject:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class IInnlliinneeQQuueerryyRReessuullttLLooccaattiioonn(telegram.inline.inlinequeryresult.InlineQueryResult)
     |  Represents a location on a map. By default, the location will be sent by the user.
     |  Alternatively, you can use :attr:`input_message_content` to send a message with the specified
     |  content instead of the location.
     |  
     |  Attributes:
     |      type (:obj:`str`): 'location'.
     |      id (:obj:`str`): Unique identifier for this result, 1-64 bytes.
     |      latitude (:obj:`float`): Location latitude in degrees.
     |      longitude (:obj:`float`): Location longitude in degrees.
     |      title (:obj:`str`): Location title.
     |      live_period (:obj:`int`): Optional. Period in seconds for which the location can be
     |          updated, should be between 60 and 86400.
     |      reply_markup (:class:`telegram.InlineKeyboardMarkup`): Optional. Inline keyboard attached
     |          to the message.
     |      input_message_content (:class:`telegram.InputMessageContent`): Optional. Content of the
     |          message to be sent instead of the location.
     |      thumb_url (:obj:`str`): Optional. Url of the thumbnail for the result.
     |      thumb_width (:obj:`int`): Optional. Thumbnail width.
     |      thumb_height (:obj:`int`): Optional. Thumbnail height.
     |  
     |  Args:
     |      id (:obj:`str`): Unique identifier for this result, 1-64 bytes.
     |      latitude (:obj:`float`): Location latitude in degrees.
     |      longitude (:obj:`float`): Location longitude in degrees.
     |      title (:obj:`str`): Location title.
     |      live_period (:obj:`int`, optional): Period in seconds for which the location can be
     |          updated, should be between 60 and 86400.
     |      reply_markup (:class:`telegram.InlineKeyboardMarkup`, optional): Inline keyboard attached
     |          to the message.
     |      input_message_content (:class:`telegram.InputMessageContent`, optional): Content of the
     |          message to be sent instead of the location.
     |      thumb_url (:obj:`str`, optional): Url of the thumbnail for the result.
     |      thumb_width (:obj:`int`, optional): Thumbnail width.
     |      thumb_height (:obj:`int`, optional): Thumbnail height.
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      InlineQueryResultLocation
     |      telegram.inline.inlinequeryresult.InlineQueryResult
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, id, latitude, longitude, title, live_period=None, reply_markup=None, input_message_content=None, thumb_url=None, thumb_width=None, thumb_height=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from telegram.base.TelegramObject:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class IInnlliinneeQQuueerryyRReessuullttMMppeegg44GGiiff(telegram.inline.inlinequeryresult.InlineQueryResult)
     |  Represents a link to a video animation (H.264/MPEG-4 AVC video without sound). By default, this
     |  animated MPEG-4 file will be sent by the user with optional caption. Alternatively, you can
     |  use :attr:`input_message_content` to send a message with the specified content instead of the
     |  animation.
     |  
     |  Attributes:
     |      type (:obj:`str`): 'mpeg4_gif'.
     |      id (:obj:`str`): Unique identifier for this result, 1-64 bytes.
     |      mpeg4_url (:obj:`str`): A valid URL for the MP4 file. File size must not exceed 1MB.
     |      mpeg4_width (:obj:`int`): Optional. Video width.
     |      mpeg4_height (:obj:`int`): Optional. Video height.
     |      mpeg4_duration (:obj:`int`): Optional. Video duration.
     |      thumb_url (:obj:`str`): URL of the static thumbnail (jpeg or gif) for the result.
     |      title (:obj:`str`): Optional. Title for the result.
     |      caption (:obj:`str`): Optional. Caption, 0-200 characters
     |      parse_mode (:obj:`str`): Optional. Send Markdown or HTML, if you want Telegram apps to show
     |          bold, italic, fixed-width text or inline URLs in the media caption. See the constants
     |          in :class:`telegram.ParseMode` for the available modes.
     |      reply_markup (:class:`telegram.InlineKeyboardMarkup`): Optional. Inline keyboard attached
     |          to the message.
     |      input_message_content (:class:`telegram.InputMessageContent`): Optional. Content of the
     |          message to be sent instead of the MPEG-4 file.
     |  
     |  Args:
     |      id (:obj:`str`): Unique identifier for this result, 1-64 bytes.
     |      mpeg4_url (:obj:`str`): A valid URL for the MP4 file. File size must not exceed 1MB.
     |      mpeg4_width (:obj:`int`, optional): Video width.
     |      mpeg4_height (:obj:`int`, optional): Video height.
     |      mpeg4_duration (:obj:`int`, optional): Video duration.
     |      thumb_url (:obj:`str`): URL of the static thumbnail (jpeg or gif) for the result.
     |      title (:obj:`str`, optional): Title for the result.
     |      caption (:obj:`str`, optional): Caption, 0-200 characters
     |      parse_mode (:obj:`str`, optional): Send Markdown or HTML, if you want Telegram apps to show
     |          bold, italic, fixed-width text or inline URLs in the media caption. See the constants
     |          in :class:`telegram.ParseMode` for the available modes.
     |      reply_markup (:class:`telegram.InlineKeyboardMarkup`, optional): Inline keyboard attached
     |          to the message.
     |      input_message_content (:class:`telegram.InputMessageContent`, optional): Content of the
     |          message to be sent instead of the MPEG-4 file.
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      InlineQueryResultMpeg4Gif
     |      telegram.inline.inlinequeryresult.InlineQueryResult
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, id, mpeg4_url, thumb_url, mpeg4_width=None, mpeg4_height=None, title=None, caption=None, reply_markup=None, input_message_content=None, mpeg4_duration=None, parse_mode=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from telegram.base.TelegramObject:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class IInnlliinneeQQuueerryyRReessuullttPPhhoottoo(telegram.inline.inlinequeryresult.InlineQueryResult)
     |  Represents a link to a photo. By default, this photo will be sent by the user with optional
     |  caption. Alternatively, you can use :attr:`input_message_content` to send a message with the
     |  specified content instead of the photo.
     |  
     |  Attributes:
     |      type (:obj:`str`): 'photo'.
     |      id (:obj:`str`): Unique identifier for this result, 1-64 bytes.
     |      photo_url (:obj:`str`): A valid URL of the photo. Photo must be in jpeg format. Photo size
     |          must not exceed 5MB.
     |      thumb_url (:obj:`str`): URL of the thumbnail for the photo.
     |      photo_width (:obj:`int`): Optional. Width of the photo.
     |      photo_height (:obj:`int`): Optional. Height of the photo.
     |      title (:obj:`str`): Optional. Title for the result.
     |      description (:obj:`str`): Optional. Short description of the result.
     |      caption (:obj:`str`): Optional. Caption, 0-200 characters
     |      parse_mode (:obj:`str`): Optional. Send Markdown or HTML, if you want Telegram apps to show
     |          bold, italic, fixed-width text or inline URLs in the media caption. See the constants
     |          in :class:`telegram.ParseMode` for the available modes.
     |      reply_markup (:class:`telegram.InlineKeyboardMarkup`): Optional. Inline keyboard attached
     |          to the message.
     |      input_message_content (:class:`telegram.InputMessageContent`): Optional. Content of the
     |          message to be sent instead of the photo.
     |  
     |  Args:
     |      id (:obj:`str`): Unique identifier for this result, 1-64 bytes.
     |      photo_url (:obj:`str`): A valid URL of the photo. Photo must be in jpeg format. Photo size
     |          must not exceed 5MB.
     |      thumb_url (:obj:`str`): URL of the thumbnail for the photo.
     |      photo_width (:obj:`int`, optional): Width of the photo.
     |      photo_height (:obj:`int`, optional): Height of the photo.
     |      title (:obj:`str`, optional): Title for the result.
     |      description (:obj:`str`, optional): Short description of the result.
     |      caption (:obj:`str`, optional): Caption, 0-200 characters
     |      parse_mode (:obj:`str`, optional): Send Markdown or HTML, if you want Telegram apps to show
     |          bold, italic, fixed-width text or inline URLs in the media caption. See the constants
     |          in :class:`telegram.ParseMode` for the available modes.
     |      reply_markup (:class:`telegram.InlineKeyboardMarkup`, optional): Inline keyboard attached
     |          to the message.
     |      input_message_content (:class:`telegram.InputMessageContent`, optional): Content of the
     |          message to be sent instead of the photo.
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      InlineQueryResultPhoto
     |      telegram.inline.inlinequeryresult.InlineQueryResult
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, id, photo_url, thumb_url, photo_width=None, photo_height=None, title=None, description=None, caption=None, reply_markup=None, input_message_content=None, parse_mode=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from telegram.base.TelegramObject:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class IInnlliinneeQQuueerryyRReessuullttVVeennuuee(telegram.inline.inlinequeryresult.InlineQueryResult)
     |  Represents a venue. By default, the venue will be sent by the user. Alternatively, you can
     |  use :attr:`input_message_content` to send a message with the specified content instead of the
     |  venue.
     |  
     |  Attributes:
     |      type (:obj:`str`): 'venue'.
     |      id (:obj:`str`): Unique identifier for this result, 1-64 Bytes.
     |      latitude (:obj:`float`): Latitude of the venue location in degrees.
     |      longitude (:obj:`float`): Longitude of the venue location in degrees.
     |      title (:obj:`str`): Title of the venue.
     |      address (:obj:`str`): Address of the venue.
     |      foursquare_id (:obj:`str`): Optional. Foursquare identifier of the venue if known.
     |      foursquare_type (:obj:`str`): Optional. Foursquare type of the venue, if known.
     |          (For example, "arts_entertainment/default", "arts_entertainment/aquarium" or
     |          "food/icecream".)
     |      reply_markup (:class:`telegram.InlineKeyboardMarkup`): Optional. Inline keyboard attached
     |          to the message.
     |      input_message_content (:class:`telegram.InputMessageContent`): Optional. Content of the
     |          message to be sent instead of the venue.
     |      thumb_url (:obj:`str`): Optional. Url of the thumbnail for the result.
     |      thumb_width (:obj:`int`): Optional. Thumbnail width.
     |      thumb_height (:obj:`int`): Optional. Thumbnail height.
     |  
     |  Args:
     |      id (:obj:`str`): Unique identifier for this result, 1-64 Bytes.
     |      latitude (:obj:`float`): Latitude of the venue location in degrees.
     |      longitude (:obj:`float`): Longitude of the venue location in degrees.
     |      title (:obj:`str`): Title of the venue.
     |      address (:obj:`str`): Address of the venue.
     |      foursquare_id (:obj:`str`, optional): Foursquare identifier of the venue if known.
     |      foursquare_type (:obj:`str`, optional): Foursquare type of the venue, if known.
     |          (For example, "arts_entertainment/default", "arts_entertainment/aquarium" or
     |          "food/icecream".)
     |      reply_markup (:class:`telegram.InlineKeyboardMarkup`, optional): Inline keyboard attached
     |          to the message.
     |      input_message_content (:class:`telegram.InputMessageContent`, optional): Content of the
     |          message to be sent instead of the location.
     |      thumb_url (:obj:`str`, optional): Url of the thumbnail for the result.
     |      thumb_width (:obj:`int`, optional): Thumbnail width.
     |      thumb_height (:obj:`int`, optional): Thumbnail height.
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      InlineQueryResultVenue
     |      telegram.inline.inlinequeryresult.InlineQueryResult
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, id, latitude, longitude, title, address, foursquare_id=None, foursquare_type=None, reply_markup=None, input_message_content=None, thumb_url=None, thumb_width=None, thumb_height=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from telegram.base.TelegramObject:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class IInnlliinneeQQuueerryyRReessuullttVViiddeeoo(telegram.inline.inlinequeryresult.InlineQueryResult)
     |  Represents a link to a page containing an embedded video player or a video file. By default,
     |  this video file will be sent by the user with an optional caption. Alternatively, you can use
     |  :attr:`input_message_content` to send a message with the specified content instead of
     |  the video.
     |  
     |  Attributes:
     |      type (:obj:`str`): 'video'.
     |      id (:obj:`str`): Unique identifier for this result, 1-64 bytes.
     |      video_url (:obj:`str`): A valid URL for the embedded video player or video file.
     |      mime_type (:obj:`str`): Mime type of the content of video url, "text/html" or "video/mp4".
     |      thumb_url (:obj:`str`): URL of the thumbnail (jpeg only) for the video.
     |      title (:obj:`str`): Title for the result.
     |      caption (:obj:`str`): Optional. Caption, 0-200 characters
     |      parse_mode (:obj:`str`): Optional. Send Markdown or HTML, if you want Telegram apps to show
     |          bold, italic, fixed-width text or inline URLs in the media caption. See the constants
     |          in :class:`telegram.ParseMode` for the available modes.
     |      video_width (:obj:`int`): Optional. Video width.
     |      video_height (:obj:`int`): Optional. Video height.
     |      video_duration (:obj:`int`): Optional. Video duration in seconds.
     |      description (:obj:`str`): Optional. Short description of the result.
     |      reply_markup (:class:`telegram.InlineKeyboardMarkup`): Optional. Inline keyboard attached
     |          to the message.
     |      input_message_content (:class:`telegram.InputMessageContent`): Optional. Content of the
     |          message to be sent instead of the video.
     |  
     |  Args:
     |      id (:obj:`str`): Unique identifier for this result, 1-64 bytes.
     |      video_url (:obj:`str`): A valid URL for the embedded video player or video file.
     |      mime_type (:obj:`str`): Mime type of the content of video url, "text/html" or "video/mp4".
     |      thumb_url (:obj:`str`): URL of the thumbnail (jpeg only) for the video.
     |      title (:obj:`str`): Title for the result.
     |      caption (:obj:`str`, optional): Caption, 0-200 characters.
     |      parse_mode (:obj:`str`, optional): Send Markdown or HTML, if you want Telegram apps to show
     |          bold, italic, fixed-width text or inline URLs in the media caption. See the constants
     |          in :class:`telegram.ParseMode` for the available modes.
     |      video_width (:obj:`int`, optional): Video width.
     |      video_height (:obj:`int`, optional): Video height.
     |      video_duration (:obj:`int`, optional): Video duration in seconds.
     |      description (:obj:`str`, optional): Short description of the result.
     |      reply_markup (:class:`telegram.InlineKeyboardMarkup`, optional): Inline keyboard attached
     |          to the message.
     |      input_message_content (:class:`telegram.InputMessageContent`, optional): Content of the
     |          message to be sent instead of the video.
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      InlineQueryResultVideo
     |      telegram.inline.inlinequeryresult.InlineQueryResult
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, id, video_url, mime_type, thumb_url, title, caption=None, video_width=None, video_height=None, video_duration=None, description=None, reply_markup=None, input_message_content=None, parse_mode=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from telegram.base.TelegramObject:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class IInnlliinneeQQuueerryyRReessuullttVVooiiccee(telegram.inline.inlinequeryresult.InlineQueryResult)
     |  Represents a link to a voice recording in an .ogg container encoded with OPUS. By default,
     |  this voice recording will be sent by the user. Alternatively, you can use
     |  :attr:`input_message_content` to send a message with the specified content instead of the
     |  the voice message.
     |  
     |  Attributes:
     |      type (:obj:`str`): 'voice'.
     |      id (:obj:`str`): Unique identifier for this result, 1-64 bytes.
     |      voice_url (:obj:`str`): A valid URL for the voice recording.
     |      title (:obj:`str`): Voice message title.
     |      caption (:obj:`str`): Optional. Caption, 0-200 characters.
     |      parse_mode (:obj:`str`): Optional. Send Markdown or HTML, if you want Telegram apps to show
     |          bold, italic, fixed-width text or inline URLs in the media caption.. See the constants
     |          in :class:`telegram.ParseMode` for the available modes.
     |      voice_duration (:obj:`int`): Optional. Recording duration in seconds.
     |      reply_markup (:class:`telegram.InlineKeyboardMarkup`): Optional. Inline keyboard attached
     |          to the message.
     |      input_message_content (:class:`telegram.InputMessageContent`): Optional. Content of the
     |          message to be sent instead of the voice.
     |  
     |  Args:
     |      id (:obj:`str`): Unique identifier for this result, 1-64 bytes.
     |      voice_url (:obj:`str`): A valid URL for the voice recording.
     |      title (:obj:`str`): Voice message title.
     |      caption (:obj:`str`, optional): Caption, 0-200 characters.
     |      parse_mode (:obj:`str`, optional): Send Markdown or HTML, if you want Telegram apps to show
     |          bold, italic, fixed-width text or inline URLs in the media caption.. See the constants
     |          in :class:`telegram.ParseMode` for the available modes.
     |      voice_duration (:obj:`int`, optional): Recording duration in seconds.
     |      reply_markup (:class:`telegram.InlineKeyboardMarkup`, optional): Inline keyboard attached
     |          to the message.
     |      input_message_content (:class:`telegram.InputMessageContent`, optional): Content of the
     |          message to be sent instead of the voice.
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      InlineQueryResultVoice
     |      telegram.inline.inlinequeryresult.InlineQueryResult
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, id, voice_url, title, voice_duration=None, caption=None, reply_markup=None, input_message_content=None, parse_mode=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from telegram.base.TelegramObject:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class IInnppuuttCCoonnttaaccttMMeessssaaggeeCCoonntteenntt(telegram.inline.inputmessagecontent.InputMessageContent)
     |  Represents the content of a contact message to be sent as the result of an inline query.
     |  
     |  Attributes:
     |      phone_number (:obj:`str`): Contact's phone number.
     |      first_name (:obj:`str`): Contact's first name.
     |      last_name (:obj:`str`): Optional. Contact's last name.
     |      vcard (:obj:`str`): Optional. Additional data about the contact in the form of a vCard,
     |          0-2048 bytes.
     |  
     |  Args:
     |      phone_number (:obj:`str`): Contact's phone number.
     |      first_name (:obj:`str`): Contact's first name.
     |      last_name (:obj:`str`, optional): Contact's last name.
     |      vcard (:obj:`str`, optional): Additional data about the contact in the form of a vCard,
     |          0-2048 bytes.
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      InputContactMessageContent
     |      telegram.inline.inputmessagecontent.InputMessageContent
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, phone_number, first_name, last_name=None, vcard=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from telegram.base.TelegramObject:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class IInnppuuttFFiillee(builtins.object)
     |  This object represents a Telegram InputFile.
     |  
     |  Attributes:
     |      input_file_content (:obj:`bytes`): The binaray content of the file to send.
     |      filename (:obj:`str`): Optional, Filename for the file to be sent.
     |      attach (:obj:`str`): Optional, attach id for sending multiple files.
     |  
     |  Args:
     |      obj (:obj:`File handler`): An open file descriptor.
     |      filename (:obj:`str`, optional): Filename for this InputFile.
     |      attach (:obj:`bool`, optional): Whether this should be send as one file or is part of a
     |          collection of files.
     |  
     |  Raises:
     |      TelegramError
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, obj, filename=None, attach=None)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  iiss__ffiillee(obj)
     |  
     |  iiss__iimmaaggee(stream)
     |      Check if the content file is an image by analyzing its headers.
     |      
     |      Args:
     |          stream (:obj:`str`): A str representing the content of a file.
     |      
     |      Returns:
     |          :obj:`str`: The str mime-type of an image.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ffiieelldd__ttuuppllee
    
    class IInnppuuttLLooccaattiioonnMMeessssaaggeeCCoonntteenntt(telegram.inline.inputmessagecontent.InputMessageContent)
     |  Represents the content of a location message to be sent as the result of an inline query.
     |  
     |  Attributes:
     |      latitude (:obj:`float`): Latitude of the location in degrees.
     |      longitude (:obj:`float`): Longitude of the location in degrees.
     |  
     |  Args:
     |      latitude (:obj:`float`): Latitude of the location in degrees.
     |      longitude (:obj:`float`): Longitude of the location in degrees.
     |      live_period     (:obj:`int`, optional): Period in seconds for which the location can be
     |          updated, should be between 60 and 86400.
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      InputLocationMessageContent
     |      telegram.inline.inputmessagecontent.InputMessageContent
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, latitude, longitude, live_period=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from telegram.base.TelegramObject:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class IInnppuuttMMeeddiiaa(telegram.base.TelegramObject)
     |  Base class for Telegram InputMedia Objects.
     |  
     |  See :class:`telegram.InputMediaAnimation`, :class:`telegram.InputMediaAudio`,
     |  :class:`telegram.InputMediaDocument`, :class:`telegram.InputMediaPhoto` and
     |  :class:`telegram.InputMediaVideo` for detailed use.
     |  
     |  Method resolution order:
     |      InputMedia
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from telegram.base.TelegramObject:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class IInnppuuttMMeeddiiaaAAnniimmaattiioonn(InputMedia)
     |  Represents an animation file (GIF or H.264/MPEG-4 AVC video without sound) to be sent.
     |  
     |  Attributes:
     |      type (:obj:`str`): ``animation``.
     |      media (:obj:`str`): File to send. Pass a file_id to send a file that exists on the Telegram
     |          servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet.
     |          Lastly you can pass an existing :class:`telegram.Animation` object to send.
     |      thumb (`filelike object`): Optional. Thumbnail of the
     |          file sent. The thumbnail should be in JPEG format and less than 200 kB in size.
     |          A thumbnail's width and height should not exceed 90. Ignored if the file is not
     |          is passed as a string or file_id.
     |      caption (:obj:`str`): Optional. Caption of the animation to be sent, 0-200 characters.
     |      parse_mode (:obj:`str`): Optional. Send Markdown or HTML, if you want Telegram apps to show
     |          bold, italic, fixed-width text or inline URLs in the media caption. See the constants
     |          in :class:`telegram.ParseMode` for the available modes.
     |      width (:obj:`int`): Optional. Animation width.
     |      height (:obj:`int`): Optional. Animation height.
     |      duration (:obj:`int`): Optional. Animation duration.
     |  
     |  
     |  Args:
     |      media (:obj:`str`): File to send. Pass a file_id to send a file that exists on the Telegram
     |          servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet.
     |          Lastly you can pass an existing :class:`telegram.Animation` object to send.
     |      thumb (`filelike object`, optional): Thumbnail of the
     |          file sent. The thumbnail should be in JPEG format and less than 200 kB in size.
     |          A thumbnail's width and height should not exceed 90. Ignored if the file is not
     |          is passed as a string or file_id.
     |      caption (:obj:`str`, optional): Caption of the animation to be sent, 0-200 characters.
     |      parse_mode (:obj:`str`, optional): Send Markdown or HTML, if you want Telegram apps to show
     |          bold, italic, fixed-width text or inline URLs in the media caption. See the constants
     |          in :class:`telegram.ParseMode` for the available modes.
     |      width (:obj:`int`, optional): Animation width.
     |      height (:obj:`int`, optional): Animation height.
     |      duration (:obj:`int`, optional): Animation duration.
     |  
     |  Note:
     |      When using a :class:`telegram.Animation` for the :attr:`media` attribute. It will take the
     |      width, height and duration from that video, unless otherwise specified with the optional
     |      arguments.
     |  
     |  Method resolution order:
     |      InputMediaAnimation
     |      InputMedia
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, media, thumb=None, caption=None, parse_mode=None, width=None, height=None, duration=None)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from telegram.base.TelegramObject:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class IInnppuuttMMeeddiiaaAAuuddiioo(InputMedia)
     |  Represents an audio file to be treated as music to be sent.
     |  
     |  Attributes:
     |      type (:obj:`str`): ``audio``.
     |      media (:obj:`str`): File to send. Pass a file_id to send a file that exists on the Telegram
     |          servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet.
     |          Lastly you can pass an existing :class:`telegram.Audio` object to send.
     |      caption (:obj:`str`): Optional. Caption of the audio to be sent, 0-200 characters.
     |      parse_mode (:obj:`str`): Optional. Send Markdown or HTML, if you want Telegram apps to show
     |          bold, italic, fixed-width text or inline URLs in the media caption. See the constants
     |          in :class:`telegram.ParseMode` for the available modes.
     |      duration (:obj:`int`): Duration of the audio in seconds.
     |      performer (:obj:`str`): Optional. Performer of the audio as defined by sender or by audio
     |          tags.
     |      title (:obj:`str`): Optional. Title of the audio as defined by sender or by audio tags.
     |      thumb (`filelike object`): Optional. Thumbnail of the
     |          file sent. The thumbnail should be in JPEG format and less than 200 kB in size.
     |          A thumbnail's width and height should not exceed 90. Ignored if the file is not
     |          is passed as a string or file_id.
     |  
     |  Args:
     |      media (:obj:`str`): File to send. Pass a file_id to send a file that exists on the Telegram
     |          servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet.
     |          Lastly you can pass an existing :class:`telegram.Document` object to send.
     |      caption (:obj:`str`, optional): Caption of the audio to be sent, 0-200 characters.
     |      parse_mode (:obj:`str`, optional): Send Markdown or HTML, if you want Telegram apps to show
     |          bold, italic, fixed-width text or inline URLs in the media caption. See the constants
     |          in :class:`telegram.ParseMode` for the available modes.
     |      duration (:obj:`int`): Duration of the audio in seconds as defined by sender.
     |      performer (:obj:`str`, optional): Performer of the audio as defined by sender or by audio
     |          tags.
     |      title (:obj:`str`, optional): Title of the audio as defined by sender or by audio tags.
     |      thumb (`filelike object`, optional): Thumbnail of the
     |          file sent. The thumbnail should be in JPEG format and less than 200 kB in size.
     |          A thumbnail's width and height should not exceed 90. Ignored if the file is not
     |          is passed as a string or file_id.
     |  
     |  Note:
     |      When using a :class:`telegram.Audio` for the :attr:`media` attribute. It will take the
     |      duration, performer and title from that video, unless otherwise specified with the
     |      optional arguments.
     |  
     |  Method resolution order:
     |      InputMediaAudio
     |      InputMedia
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, media, thumb=None, caption=None, parse_mode=None, duration=None, performer=None, title=None)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from telegram.base.TelegramObject:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class IInnppuuttMMeeddiiaaDDooccuummeenntt(InputMedia)
     |  Represents a general file to be sent.
     |  
     |  Attributes:
     |      type (:obj:`str`): ``document``.
     |      media (:obj:`str`): File to send. Pass a file_id to send a file that exists on the Telegram
     |          servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet.
     |          Lastly you can pass an existing :class:`telegram.Document` object to send.
     |      caption (:obj:`str`): Optional. Caption of the document to be sent, 0-200 characters.
     |      parse_mode (:obj:`str`): Optional. Send Markdown or HTML, if you want Telegram apps to show
     |          bold, italic, fixed-width text or inline URLs in the media caption. See the constants
     |          in :class:`telegram.ParseMode` for the available modes.
     |      thumb (`filelike object`): Optional. Thumbnail of the
     |          file sent. The thumbnail should be in JPEG format and less than 200 kB in size.
     |          A thumbnail's width and height should not exceed 90. Ignored if the file is not
     |          is passed as a string or file_id.
     |  
     |  Args:
     |      media (:obj:`str`): File to send. Pass a file_id to send a file that exists on the Telegram
     |          servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet.
     |          Lastly you can pass an existing :class:`telegram.Document` object to send.
     |      caption (:obj:`str`, optional): Caption of the document to be sent, 0-200 characters.
     |      parse_mode (:obj:`str`, optional): Send Markdown or HTML, if you want Telegram apps to show
     |          bold, italic, fixed-width text or inline URLs in the media caption. See the constants
     |          in :class:`telegram.ParseMode` for the available modes.
     |      thumb (`filelike object`, optional): Thumbnail of the
     |          file sent. The thumbnail should be in JPEG format and less than 200 kB in size.
     |          A thumbnail's width and height should not exceed 90. Ignored if the file is not
     |          is passed as a string or file_id.
     |  
     |  Method resolution order:
     |      InputMediaDocument
     |      InputMedia
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, media, thumb=None, caption=None, parse_mode=None)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from telegram.base.TelegramObject:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class IInnppuuttMMeeddiiaaPPhhoottoo(InputMedia)
     |  Represents a photo to be sent.
     |  
     |  Attributes:
     |      type (:obj:`str`): ``photo``.
     |      media (:obj:`str`): File to send. Pass a file_id to send a file that exists on the
     |          Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the
     |          Internet. Lastly you can pass an existing :class:`telegram.PhotoSize` object to send.
     |      caption (:obj:`str`): Optional. Caption of the photo to be sent, 0-200 characters.
     |      parse_mode (:obj:`str`): Optional. Send Markdown or HTML, if you want Telegram apps to show
     |          bold, italic, fixed-width text or inline URLs in the media caption. See the constants
     |          in :class:`telegram.ParseMode` for the available modes.
     |  
     |  Args:
     |      media (:obj:`str`): File to send. Pass a file_id to send a file that exists on the
     |          Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the
     |          Internet. Lastly you can pass an existing :class:`telegram.PhotoSize` object to send.
     |      caption (:obj:`str`, optional ): Caption of the photo to be sent, 0-200 characters.
     |      parse_mode (:obj:`str`, optional): Send Markdown or HTML, if you want Telegram apps to show
     |          bold, italic, fixed-width text or inline URLs in the media caption. See the constants
     |          in :class:`telegram.ParseMode` for the available modes.
     |  
     |  Method resolution order:
     |      InputMediaPhoto
     |      InputMedia
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, media, caption=None, parse_mode=None)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from telegram.base.TelegramObject:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class IInnppuuttMMeeddiiaaVViiddeeoo(InputMedia)
     |  Represents a video to be sent.
     |  
     |  Attributes:
     |      type (:obj:`str`): ``video``.
     |      media (:obj:`str`): File to send. Pass a file_id to send a file that exists on the Telegram
     |          servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet.
     |          Lastly you can pass an existing :class:`telegram.Video` object to send.
     |      caption (:obj:`str`): Optional. Caption of the video to be sent, 0-200 characters.
     |      parse_mode (:obj:`str`): Optional. Send Markdown or HTML, if you want Telegram apps to show
     |          bold, italic, fixed-width text or inline URLs in the media caption. See the constants
     |          in :class:`telegram.ParseMode` for the available modes.
     |      width (:obj:`int`): Optional. Video width.
     |      height (:obj:`int`): Optional. Video height.
     |      duration (:obj:`int`): Optional. Video duration.
     |      supports_streaming (:obj:`bool`): Optional. Pass True, if the uploaded video is suitable
     |          for streaming.
     |      thumb (`filelike object`): Optional. Thumbnail of the
     |          file sent. The thumbnail should be in JPEG format and less than 200 kB in size.
     |          A thumbnail's width and height should not exceed 90. Ignored if the file is not
     |          is passed as a string or file_id.
     |  
     |  Args:
     |      media (:obj:`str`): File to send. Pass a file_id to send a file that exists on the Telegram
     |          servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet.
     |          Lastly you can pass an existing :class:`telegram.Video` object to send.
     |      caption (:obj:`str`, optional): Caption of the video to be sent, 0-200 characters.
     |      parse_mode (:obj:`str`, optional): Send Markdown or HTML, if you want Telegram apps to show
     |          bold, italic, fixed-width text or inline URLs in the media caption. See the constants
     |          in :class:`telegram.ParseMode` for the available modes.
     |      width (:obj:`int`, optional): Video width.
     |      height (:obj:`int`, optional): Video height.
     |      duration (:obj:`int`, optional): Video duration.
     |      supports_streaming (:obj:`bool`, optional): Pass True, if the uploaded video is suitable
     |          for streaming.
     |      thumb (`filelike object`, optional): Thumbnail of the
     |          file sent. The thumbnail should be in JPEG format and less than 200 kB in size.
     |          A thumbnail's width and height should not exceed 90. Ignored if the file is not
     |          is passed as a string or file_id.
     |  
     |  Note:
     |      When using a :class:`telegram.Video` for the :attr:`media` attribute. It will take the
     |      width, height and duration from that video, unless otherwise specified with the optional
     |      arguments.
     |  
     |  Method resolution order:
     |      InputMediaVideo
     |      InputMedia
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, media, caption=None, width=None, height=None, duration=None, supports_streaming=None, parse_mode=None, thumb=None)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from telegram.base.TelegramObject:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class IInnppuuttMMeessssaaggeeCCoonntteenntt(telegram.base.TelegramObject)
     |  Base class for Telegram InputMessageContent Objects.
     |  
     |  See: :class:`telegram.InputContactMessageContent`,
     |  :class:`telegram.InputLocationMessageContent`, :class:`telegram.InputTextMessageContent` and
     |  :class:`telegram.InputVenueMessageContent` for more details.
     |  
     |  Method resolution order:
     |      InputMessageContent
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from telegram.base.TelegramObject:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class IInnppuuttTTeexxttMMeessssaaggeeCCoonntteenntt(telegram.inline.inputmessagecontent.InputMessageContent)
     |  Represents the content of a text message to be sent as the result of an inline query.
     |  
     |  Attributes:
     |      message_text (:obj:`str`): Text of the message to be sent, 1-4096 characters.
     |      parse_mode (:obj:`str`): Optional. Send Markdown or HTML, if you want Telegram apps to show
     |          bold, italic, fixed-width text or inline URLs in your bot's message.
     |      disable_web_page_preview (:obj:`bool`): Optional. Disables link previews for links in the
     |          sent message.
     |  
     |  Args:
     |      message_text (:obj:`str`): Text of the message to be sent, 1-4096 characters.  Also found
     |          as :attr:`telegram.constants.MAX_MESSAGE_LENGTH`.
     |      parse_mode (:obj:`str`, optional): Send Markdown or HTML, if you want Telegram apps to show
     |          bold, italic, fixed-width text or inline URLs in your bot's message.
     |      disable_web_page_preview (:obj:`bool`, optional): Disables link previews for links in the
     |          sent message.
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      InputTextMessageContent
     |      telegram.inline.inputmessagecontent.InputMessageContent
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, message_text, parse_mode=None, disable_web_page_preview=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from telegram.base.TelegramObject:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class IInnppuuttVVeennuueeMMeessssaaggeeCCoonntteenntt(telegram.inline.inputmessagecontent.InputMessageContent)
     |  Represents the content of a venue message to be sent as the result of an inline query.
     |  
     |  Attributes:
     |      latitude (:obj:`float`): Latitude of the location in degrees.
     |      longitude (:obj:`float`): Longitude of the location in degrees.
     |      title (:obj:`str`): Name of the venue.
     |      address (:obj:`str`): Address of the venue.
     |      foursquare_id (:obj:`str`): Optional. Foursquare identifier of the venue, if known.
     |      foursquare_type (:obj:`str`): Optional. Foursquare type of the venue, if known.
     |          (For example, "arts_entertainment/default", "arts_entertainment/aquarium" or
     |          "food/icecream".)
     |  
     |  Args:
     |      latitude (:obj:`float`): Latitude of the location in degrees.
     |      longitude (:obj:`float`): Longitude of the location in degrees.
     |      title (:obj:`str`): Name of the venue.
     |      address (:obj:`str`): Address of the venue.
     |      foursquare_id (:obj:`str`, optional): Foursquare identifier of the venue, if known.
     |      foursquare_type (:obj:`str`, optional): Foursquare type of the venue, if known.
     |          (For example, "arts_entertainment/default", "arts_entertainment/aquarium" or
     |          "food/icecream".)
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      InputVenueMessageContent
     |      telegram.inline.inputmessagecontent.InputMessageContent
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, latitude, longitude, title, address, foursquare_id=None, foursquare_type=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from telegram.base.TelegramObject:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class IInnvvooiiccee(telegram.base.TelegramObject)
     |  This object contains basic information about an invoice.
     |  
     |  Attributes:
     |      title (:obj:`str`): Product name.
     |      description (:obj:`str`): Product description.
     |      start_parameter (:obj:`str`): Unique bot deep-linking parameter.
     |      currency (:obj:`str`): Three-letter ISO 4217 currency code.
     |      total_amount (:obj:`int`): Total price in the smallest units of the currency.
     |  
     |  Args:
     |      title (:obj:`str`): Product name.
     |      description (:obj:`str`): Product description.
     |      start_parameter (:obj:`str`): Unique bot deep-linking parameter that can be used to
     |          generate this invoice.
     |      currency (:obj:`str`): Three-letter ISO 4217 currency code.
     |      total_amount (:obj:`int`): Total price in the smallest units of the currency (integer, not
     |          float/double). For example, for a price of US$ 1.45 pass amount = 145.
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      Invoice
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, title, description, start_parameter, currency, total_amount, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class KKeeyybbooaarrddBBuuttttoonn(telegram.base.TelegramObject)
     |  This object represents one button of the reply keyboard. For simple text buttons String can be
     |  used instead of this object to specify text of the button.
     |  
     |  Note:
     |      Optional fields are mutually exclusive.
     |  
     |  Attributes:
     |      text (:obj:`str`): Text of the button.
     |      request_contact (:obj:`bool`): Optional. If the user's phone number will be sent.
     |      request_location (:obj:`bool`): Optional. If the user's current location will be sent.
     |  
     |  Args:
     |      text (:obj:`str`): Text of the button. If none of the optional fields are used, it will be
     |          sent to the bot as a message when the button is pressed.
     |      request_contact (:obj:`bool`, optional): If True, the user's phone number will be sent as
     |          a contact when the button is pressed. Available in private chats only.
     |      request_location (:obj:`bool`, optional): If True, the user's current location will be sent
     |          when the button is pressed. Available in private chats only.
     |  
     |  Note:
     |      :attr:`request_contact` and :attr:`request_location` options will only work in Telegram
     |      versions released after 9 April, 2016. Older clients will ignore them.
     |  
     |  Method resolution order:
     |      KeyboardButton
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, text, request_contact=None, request_location=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from telegram.base.TelegramObject:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class LLaabbeelleeddPPrriiccee(telegram.base.TelegramObject)
     |  This object represents a portion of the price for goods or services.
     |  
     |  Attributes:
     |      label (:obj:`str`): Portion label.
     |      amount (:obj:`int`): Price of the product in the smallest units of the currency.
     |  
     |  Args:
     |      label (:obj:`str`): Portion label
     |      amount (:obj:`int`): Price of the product in the smallest units of the currency (integer,
     |          not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp
     |          parameter in currencies.json, it shows the number of digits past the decimal point for
     |          each currency (2 for the majority of currencies).
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      LabeledPrice
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, label, amount, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from telegram.base.TelegramObject:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class LLooccaattiioonn(telegram.base.TelegramObject)
     |  This object represents a point on the map.
     |  
     |  Attributes:
     |      longitude (:obj:`float`): Longitude as defined by sender.
     |      latitude (:obj:`float`): Latitude as defined by sender.
     |  
     |  Args:
     |      longitude (:obj:`float`): Longitude as defined by sender.
     |      latitude (:obj:`float`): Latitude as defined by sender.
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      Location
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, longitude, latitude, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class MMaasskkPPoossiittiioonn(telegram.base.TelegramObject)
     |  This object describes the position on faces where a mask should be placed by default.
     |  
     |  Attributes:
     |      point (:obj:`str`): The part of the face relative to which the mask should be placed.
     |      x_shift (:obj:`float`): Shift by X-axis measured in widths of the mask scaled to the face
     |          size, from left to right.
     |      y_shift (:obj:`float`): Shift by Y-axis measured in heights of the mask scaled to the face
     |          size, from top to bottom.
     |      scale (:obj:`float`): Mask scaling coefficient. For example, 2.0 means double size.
     |  
     |  Notes:
     |      :attr:`type` should be one of the following: `forehead`, `eyes`, `mouth` or `chin`. You can
     |      use the classconstants for those.
     |  
     |  Args:
     |      point (:obj:`str`): The part of the face relative to which the mask should be placed.
     |      x_shift (:obj:`float`): Shift by X-axis measured in widths of the mask scaled to the face
     |          size, from left to right. For example, choosing -1.0 will place mask just to the left
     |          of the default mask position.
     |      y_shift (:obj:`float`): Shift by Y-axis measured in heights of the mask scaled to the face
     |          size, from top to bottom. For example, 1.0 will place the mask just below the default
     |          mask position.
     |      scale (:obj:`float`): Mask scaling coefficient. For example, 2.0 means double size.
     |  
     |  Method resolution order:
     |      MaskPosition
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, point, x_shift, y_shift, scale, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  CCHHIINN = 'chin'
     |  
     |  EEYYEESS = 'eyes'
     |  
     |  FFOORREEHHEEAADD = 'forehead'
     |  
     |  MMOOUUTTHH = 'mouth'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class MMeessssaaggee(telegram.base.TelegramObject)
     |  This object represents a message.
     |  
     |  Note:
     |      * In Python `from` is a reserved word, use `from_user` instead.
     |  
     |  Attributes:
     |      message_id (:obj:`int`): Unique message identifier inside this chat.
     |      from_user (:class:`telegram.User`): Optional. Sender.
     |      date (:class:`datetime.datetime`): Date the message was sent.
     |      chat (:class:`telegram.Chat`): Conversation the message belongs to.
     |      forward_from (:class:`telegram.User`): Optional. Sender of the original message.
     |      forward_from_chat (:class:`telegram.Chat`): Optional. Information about the original
     |          channel.
     |      forward_from_message_id (:obj:`int`): Optional. Identifier of the original message in the
     |          channel.
     |      forward_date (:class:`datetime.datetime`): Optional. Date the original message was sent.
     |      reply_to_message (:class:`telegram.Message`): Optional. The original message.
     |      edit_date (:class:`datetime.datetime`): Optional. Date the message was last edited.
     |      media_group_id (:obj:`str`): Optional. The unique identifier of a media message group this
     |          message belongs to.
     |      text (:obj:`str`): Optional. The actual UTF-8 text of the message.
     |      entities (List[:class:`telegram.MessageEntity`]): Optional. Special entities like
     |          usernames, URLs, bot commands, etc. that appear in the text. See
     |          :attr:`Message.parse_entity` and :attr:`parse_entities` methods for how to use
     |          properly.
     |      caption_entities (List[:class:`telegram.MessageEntity`]): Optional. Special entities like
     |          usernames, URLs, bot commands, etc. that appear in the caption. See
     |          :attr:`Message.parse_caption_entity` and :attr:`parse_caption_entities` methods for how
     |          to use properly.
     |      audio (:class:`telegram.Audio`): Optional. Information about the file.
     |      document (:class:`telegram.Document`): Optional. Information about the file.
     |      animation (:class:`telegram.Animation`) Optional. Information about the file.
     |          For backward compatibility, when this field is set, the document field will also be
     |          set.
     |      game (:class:`telegram.Game`): Optional. Information about the game.
     |      photo (List[:class:`telegram.PhotoSize`]): Optional. Available sizes of the photo.
     |      sticker (:class:`telegram.Sticker`): Optional. Information about the sticker.
     |      video (:class:`telegram.Video`): Optional. Information about the video.
     |      voice (:class:`telegram.Voice`): Optional. Information about the file.
     |      video_note (:class:`telegram.VideoNote`): Optional. Information about the video message.
     |      new_chat_members (List[:class:`telegram.User`]): Optional. Information about new members to
     |          the chat. (the bot itself may be one of these members).
     |      caption (:obj:`str`): Optional. Caption for the document, photo or video, 0-200 characters.
     |      contact (:class:`telegram.Contact`): Optional. Information about the contact.
     |      location (:class:`telegram.Location`): Optional. Information about the location.
     |      venue (:class:`telegram.Venue`): Optional. Information about the venue.
     |      left_chat_member (:class:`telegram.User`): Optional. Information about the user that left
     |          the group. (this member may be the bot itself).
     |      new_chat_title (:obj:`str`): Optional. A chat title was changed to this value.
     |      new_chat_photo (List[:class:`telegram.PhotoSize`]): Optional. A chat photo was changed to
     |          this value.
     |      delete_chat_photo (:obj:`bool`): Optional. The chat photo was deleted.
     |      group_chat_created (:obj:`bool`): Optional. The group has been created.
     |      supergroup_chat_created (:obj:`bool`): Optional. The supergroup has been created.
     |      channel_chat_created (:obj:`bool`): Optional. The channel has been created.
     |      migrate_to_chat_id (:obj:`int`): Optional. The group has been migrated to a supergroup with
     |          the specified identifier.
     |      migrate_from_chat_id (:obj:`int`): Optional. The supergroup has been migrated from a group
     |          with the specified identifier.
     |      pinned_message (:class:`telegram.message`): Optional. Specified message was pinned.
     |      invoice (:class:`telegram.Invoice`): Optional. Information about the invoice.
     |      successful_payment (:class:`telegram.SuccessfulPayment`): Optional. Information about the
     |          payment.
     |      connected_website (:obj:`str`): Optional. The domain name of the website on which the user
     |          has logged in.
     |      forward_signature (:obj:`str`): Optional. Signature of the post author for messages
     |          forwarded from channels.
     |      author_signature (:obj:`str`): Optional. Signature of the post author for messages
     |          in channels.
     |      passport_data (:class:`telegram.PassportData`): Optional. Telegram Passport data
     |      bot (:class:`telegram.Bot`): Optional. The Bot to use for instance methods.
     |  
     |  Args:
     |      message_id (:obj:`int`): Unique message identifier inside this chat.
     |      from_user (:class:`telegram.User`, optional): Sender, can be empty for messages sent
     |          to channels.
     |      date (:class:`datetime.datetime`): Date the message was sent in Unix time. Converted to
     |          :class:`datetime.datetime`.
     |      chat (:class:`telegram.Chat`): Conversation the message belongs to.
     |      forward_from (:class:`telegram.User`, optional): For forwarded messages, sender of
     |          the original message.
     |      forward_from_chat (:class:`telegram.Chat`, optional): For messages forwarded from a
     |          channel, information about the original channel.
     |      forward_from_message_id (:obj:`int`, optional): For forwarded channel posts, identifier of
     |          the original message in the channel.
     |      forward_date (:class:`datetime.datetime`, optional): For forwarded messages, date the
     |          original message was sent in Unix time. Converted to :class:`datetime.datetime`.
     |      reply_to_message (:class:`telegram.Message`, optional): For replies, the original message.
     |          Note that the Message object in this field will not contain further
     |          ``reply_to_message`` fields even if it itself is a reply.
     |      edit_date (:class:`datetime.datetime`, optional): Date the message was last edited in Unix
     |          time. Converted to :class:`datetime.datetime`.
     |      media_group_id (:obj:`str`, optional): The unique identifier of a media message group this
     |          message belongs to.
     |      text (str, optional): For text messages, the actual UTF-8 text of the message, 0-4096
     |          characters. Also found as :attr:`telegram.constants.MAX_MESSAGE_LENGTH`.
     |      entities (List[:class:`telegram.MessageEntity`], optional): For text messages, special
     |          entities like usernames, URLs, bot commands, etc. that appear in the text. See
     |          attr:`parse_entity` and attr:`parse_entities` methods for how to use properly.
     |      caption_entities (List[:class:`telegram.MessageEntity`]): Optional. For Messages with a
     |          Caption. Special entities like usernames, URLs, bot commands, etc. that appear in the
     |          caption. See :attr:`Message.parse_caption_entity` and :attr:`parse_caption_entities`
     |          methods for how to use properly.
     |      audio (:class:`telegram.Audio`, optional): Message is an audio file, information
     |          about the file.
     |      document (:class:`telegram.Document`, optional): Message is a general file, information
     |          about the file.
     |      animation (:class:`telegram.Animation`, optional): Message is an animation, information
     |          about the animation. For backward compatibility, when this field is set, the document
     |          field will also be set.
     |      game (:class:`telegram.Game`, optional): Message is a game, information about the game.
     |      photo (List[:class:`telegram.PhotoSize`], optional): Message is a photo, available
     |          sizes of the photo.
     |      sticker (:class:`telegram.Sticker`, optional): Message is a sticker, information
     |          about the sticker.
     |      video (:class:`telegram.Video`, optional): Message is a video, information about the video.
     |      voice (:class:`telegram.Voice`, optional): Message is a voice message, information about
     |          the file.
     |      video_note (:class:`telegram.VideoNote`, optional): Message is a video note, information
     |          about the video message.
     |      new_chat_members (List[:class:`telegram.User`], optional): New members that were added to
     |          the group or supergroup and information about them (the bot itself may be one of these
     |          members).
     |      caption (:obj:`str`, optional): Caption for the document, photo or video, 0-200 characters.
     |      contact (:class:`telegram.Contact`, optional): Message is a shared contact, information
     |          about the contact.
     |      location (:class:`telegram.Location`, optional): Message is a shared location, information
     |          about the location.
     |      venue (:class:`telegram.Venue`, optional): Message is a venue, information about the venue.
     |      left_chat_member (:class:`telegram.User`, optional): A member was removed from the group,
     |          information about them (this member may be the bot itself).
     |      new_chat_title (:obj:`str`, optional): A chat title was changed to this value.
     |      new_chat_photo (List[:class:`telegram.PhotoSize`], optional): A chat photo was change to
     |          this value.
     |      delete_chat_photo (:obj:`bool`, optional): Service message: The chat photo was deleted.
     |      group_chat_created (:obj:`bool`, optional): Service message: The group has been created.
     |      supergroup_chat_created (:obj:`bool`, optional): Service message: The supergroup has been
     |          created. This field can't be received in a message coming through updates, because bot
     |          can't be a member of a supergroup when it is created. It can only be found in
     |          :attr:`reply_to_message` if someone replies to a very first message in a directly
     |          created supergroup.
     |      channel_chat_created (:obj:`bool`, optional): Service message: The channel has been
     |          created. This field can't be received in a message coming through updates, because bot
     |          can't be a member of a channel when it is created. It can only be found in
     |          attr:`reply_to_message` if someone replies to a very first message in a channel.
     |      migrate_to_chat_id (:obj:`int`, optional): The group has been migrated to a supergroup with
     |          the specified identifier. This number may be greater than 32 bits and some programming
     |          languages may have difficulty/silent defects in interpreting it. But it is smaller than
     |          52 bits, so a signed 64 bit integer or double-precision float type are safe for storing
     |          this identifier.
     |      migrate_from_chat_id (:obj:`int`, optional): The supergroup has been migrated from a group
     |          with the specified identifier. This number may be greater than 32 bits and some
     |          programming languages may have difficulty/silent defects in interpreting it. But it is
     |          smaller than 52 bits, so a signed 64 bit integer or double-precision float type are
     |          safe for storing this identifier.
     |      pinned_message (:class:`telegram.message`, optional): Specified message was pinned. Note
     |          that the Message object in this field will not contain further attr:`reply_to_message`
     |          fields even if it is itself a reply.
     |      invoice (:class:`telegram.Invoice`, optional): Message is an invoice for a payment,
     |          information about the invoice.
     |      successful_payment (:class:`telegram.SuccessfulPayment`, optional): Message is a service
     |          message about a successful payment, information about the payment.
     |      connected_website (:obj:`str`, optional): The domain name of the website on which the user
     |          has logged in.
     |      forward_signature (:obj:`str`, optional): Signature of the post author for messages
     |          forwarded from channels.
     |      author_signature (:obj:`str`, optional): Signature of the post author for messages
     |          in channels.
     |      passport_data (:class:`telegram.PassportData`, optional): Telegram Passport data
     |  
     |  Method resolution order:
     |      Message
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____iinniitt____(self, message_id, from_user, date, chat, forward_from=None, forward_from_chat=None, forward_from_message_id=None, forward_date=None, reply_to_message=None, edit_date=None, text=None, entities=None, caption_entities=None, audio=None, document=None, game=None, photo=None, sticker=None, video=None, voice=None, video_note=None, new_chat_members=None, caption=None, contact=None, location=None, venue=None, left_chat_member=None, new_chat_title=None, new_chat_photo=None, delete_chat_photo=False, group_chat_created=False, supergroup_chat_created=False, channel_chat_created=False, migrate_to_chat_id=None, migrate_from_chat_id=None, pinned_message=None, invoice=None, successful_payment=None, forward_signature=None, author_signature=None, media_group_id=None, connected_website=None, animation=None, passport_data=None, bot=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ddeelleettee(self, *args, **kwargs)
     |      Shortcut for::
     |      
     |           bot.delete_message(chat_id=message.chat_id,
     |                              message_id=message.message_id,
     |                              *args,
     |                              **kwargs)
     |      
     |      Returns:
     |          :obj:`bool`: On success, ``True`` is returned.
     |  
     |  eeddiitt__ccaappttiioonn(self, *args, **kwargs)
     |      Shortcut for::
     |      
     |          bot.edit_message_caption(chat_id=message.chat_id,
     |                                   message_id=message.message_id,
     |                                   *args,
     |                                   **kwargs)
     |      
     |      Note:
     |          You can only edit messages that the bot sent itself,
     |          therefore this method can only be used on the
     |          return value of the ``bot.send_*`` family of methods.
     |      
     |      Returns:
     |          :class:`telegram.Message`: On success, instance representing the edited message.
     |  
     |  eeddiitt__mmeeddiiaa(self, media, *args, **kwargs)
     |      Shortcut for::
     |      
     |          bot.edit_message_media(chat_id=message.chat_id,
     |                                   message_id=message.message_id,
     |                                   *args,
     |                                   **kwargs)
     |      
     |      Note:
     |          You can only edit messages that the bot sent itself,
     |          therefore this method can only be used on the
     |          return value of the ``bot.send_*`` family of methods.
     |      
     |      Returns:
     |          :class:`telegram.Message`: On success, instance representing the edited
     |          message.
     |  
     |  eeddiitt__rreeppllyy__mmaarrkkuupp(self, *args, **kwargs)
     |      Shortcut for::
     |      
     |          bot.edit_message_reply_markup(chat_id=message.chat_id,
     |                                        message_id=message.message_id,
     |                                        *args,
     |                                        **kwargs)
     |      
     |      Note:
     |          You can only edit messages that the bot sent itself,
     |          therefore this method can only be used on the
     |          return value of the ``bot.send_*`` family of methods.
     |      
     |      Returns:
     |          :class:`telegram.Message`: On success, instance representing the edited message.
     |  
     |  eeddiitt__tteexxtt(self, *args, **kwargs)
     |      Shortcut for::
     |      
     |          bot.edit_message_text(chat_id=message.chat_id,
     |                                message_id=message.message_id,
     |                                *args,
     |                                **kwargs)
     |      
     |      Note:
     |          You can only edit messages that the bot sent itself,
     |          therefore this method can only be used on the
     |          return value of the ``bot.send_*`` family of methods.
     |      
     |      Returns:
     |          :class:`telegram.Message`: On success, instance representing the edited message.
     |  
     |  ffoorrwwaarrdd(self, chat_id, disable_notification=False)
     |      Shortcut for::
     |      
     |          bot.forward_message(chat_id=chat_id,
     |                              from_chat_id=update.message.chat_id,
     |                              disable_notification=disable_notification,
     |                              message_id=update.message.message_id)
     |      
     |      Returns:
     |          :class:`telegram.Message`: On success, instance representing the message forwarded.
     |  
     |  ppaarrssee__ccaappttiioonn__eennttiittiieess(self, types=None)
     |      Returns a :obj:`dict` that maps :class:`telegram.MessageEntity` to :obj:`str`.
     |      It contains entities from this message's caption filtered by their
     |      :attr:`telegram.MessageEntity.type` attribute as the key, and the text that each entity
     |      belongs to as the value of the :obj:`dict`.
     |      
     |      Note:
     |          This method should always be used instead of the :attr:`caption_entities` attribute,
     |          since it calculates the correct substring from the message text based on UTF-16
     |          codepoints. See :attr:`parse_entity` for more info.
     |      
     |      Args:
     |          types (List[:obj:`str`], optional): List of :class:`telegram.MessageEntity` types as
     |              strings. If the ``type`` attribute of an entity is contained in this list, it will
     |              be returned. Defaults to a list of all types. All types can be found as constants
     |              in :class:`telegram.MessageEntity`.
     |      
     |      Returns:
     |          Dict[:class:`telegram.MessageEntity`, :obj:`str`]: A dictionary of entities mapped to
     |          the text that belongs to them, calculated based on UTF-16 codepoints.
     |  
     |  ppaarrssee__ccaappttiioonn__eennttiittyy(self, entity)
     |      Returns the text from a given :class:`telegram.MessageEntity`.
     |      
     |      Note:
     |          This method is present because Telegram calculates the offset and length in
     |          UTF-16 codepoint pairs, which some versions of Python don't handle automatically.
     |          (That is, you can't just slice ``Message.caption`` with the offset and length.)
     |      
     |      Args:
     |          entity (:class:`telegram.MessageEntity`): The entity to extract the text from. It must
     |          be an entity that belongs to this message.
     |      
     |      Returns:
     |          :obj:`str`: The text of the given entity
     |  
     |  ppaarrssee__eennttiittiieess(self, types=None)
     |      Returns a :obj:`dict` that maps :class:`telegram.MessageEntity` to :obj:`str`.
     |      It contains entities from this message filtered by their
     |      :attr:`telegram.MessageEntity.type` attribute as the key, and the text that each entity
     |      belongs to as the value of the :obj:`dict`.
     |      
     |      Note:
     |          This method should always be used instead of the :attr:`entities` attribute, since it
     |          calculates the correct substring from the message text based on UTF-16 codepoints.
     |          See :attr:`parse_entity` for more info.
     |      
     |      Args:
     |          types (List[:obj:`str`], optional): List of :class:`telegram.MessageEntity` types as
     |              strings. If the ``type`` attribute of an entity is contained in this list, it will
     |              be returned. Defaults to a list of all types. All types can be found as constants
     |              in :class:`telegram.MessageEntity`.
     |      
     |      Returns:
     |          Dict[:class:`telegram.MessageEntity`, :obj:`str`]: A dictionary of entities mapped to
     |          the text that belongs to them, calculated based on UTF-16 codepoints.
     |  
     |  ppaarrssee__eennttiittyy(self, entity)
     |      Returns the text from a given :class:`telegram.MessageEntity`.
     |      
     |      Note:
     |          This method is present because Telegram calculates the offset and length in
     |          UTF-16 codepoint pairs, which some versions of Python don't handle automatically.
     |          (That is, you can't just slice ``Message.text`` with the offset and length.)
     |      
     |      Args:
     |          entity (:class:`telegram.MessageEntity`): The entity to extract the text from. It must
     |          be an entity that belongs to this message.
     |      
     |      Returns:
     |          :obj:`str`: The text of the given entity
     |  
     |  rreeppllyy__aanniimmaattiioonn(self, *args, **kwargs)
     |      Shortcut for::
     |      
     |          bot.send_animation(update.message.chat_id, *args, **kwargs)
     |      
     |      Keyword Args:
     |          quote (:obj:`bool`, optional): If set to ``True``, the photo is sent as an actual reply
     |              to this message. If ``reply_to_message_id`` is passed in ``kwargs``, this parameter
     |              will be ignored. Default: ``True`` in group chats and ``False`` in private chats.
     |      
     |      Returns:
     |          :class:`telegram.Message`: On success, instance representing the message posted.
     |  
     |  rreeppllyy__aauuddiioo(self, *args, **kwargs)
     |      Shortcut for::
     |      
     |          bot.send_audio(update.message.chat_id, *args, **kwargs)
     |      
     |      Keyword Args:
     |          quote (:obj:`bool`, optional): If set to ``True``, the photo is sent as an actual reply
     |              to this message. If ``reply_to_message_id`` is passed in ``kwargs``, this parameter
     |              will be ignored. Default: ``True`` in group chats and ``False`` in private chats.
     |      
     |      Returns:
     |          :class:`telegram.Message`: On success, instance representing the message posted.
     |  
     |  rreeppllyy__ccoonnttaacctt(self, *args, **kwargs)
     |      Shortcut for::
     |      
     |          bot.send_contact(update.message.chat_id, *args, **kwargs)
     |      
     |      Keyword Args:
     |          quote (:obj:`bool`, optional): If set to ``True``, the photo is sent as an actual reply
     |              to this message. If ``reply_to_message_id`` is passed in ``kwargs``, this parameter
     |              will be ignored. Default: ``True`` in group chats and ``False`` in private chats.
     |      
     |      Returns:
     |          :class:`telegram.Message`: On success, instance representing the message posted.
     |  
     |  rreeppllyy__ddooccuummeenntt(self, *args, **kwargs)
     |      Shortcut for::
     |      
     |          bot.send_document(update.message.chat_id, *args, **kwargs)
     |      
     |      Keyword Args:
     |          quote (:obj:`bool`, optional): If set to ``True``, the photo is sent as an actual reply
     |              to this message. If ``reply_to_message_id`` is passed in ``kwargs``, this parameter
     |              will be ignored. Default: ``True`` in group chats and ``False`` in private chats.
     |      
     |      Returns:
     |          :class:`telegram.Message`: On success, instance representing the message posted.
     |  
     |  rreeppllyy__hhttmmll(self, *args, **kwargs)
     |      Shortcut for::
     |      
     |          bot.send_message(update.message.chat_id, parse_mode=ParseMode.HTML, *args, **kwargs)
     |      
     |      Sends a message with HTML formatting.
     |      
     |      Keyword Args:
     |          quote (:obj:`bool`, optional): If set to ``True``, the message is sent as an actual
     |              reply to this message. If ``reply_to_message_id`` is passed in ``kwargs``, this
     |              parameter will be ignored. Default: ``True`` in group chats and ``False`` in
     |              private chats.
     |  
     |  rreeppllyy__llooccaattiioonn(self, *args, **kwargs)
     |      Shortcut for::
     |      
     |          bot.send_location(update.message.chat_id, *args, **kwargs)
     |      
     |      Keyword Args:
     |          quote (:obj:`bool`, optional): If set to ``True``, the photo is sent as an actual reply
     |              to this message. If ``reply_to_message_id`` is passed in ``kwargs``, this parameter
     |              will be ignored. Default: ``True`` in group chats and ``False`` in private chats.
     |      
     |      Returns:
     |          :class:`telegram.Message`: On success, instance representing the message posted.
     |  
     |  rreeppllyy__mmaarrkkddoowwnn(self, *args, **kwargs)
     |      Shortcut for::
     |      
     |          bot.send_message(update.message.chat_id, parse_mode=ParseMode.MARKDOWN, *args,
     |          **kwargs)
     |      
     |      Sends a message with markdown formatting.
     |      
     |      Keyword Args:
     |          quote (:obj:`bool`, optional): If set to ``True``, the message is sent as an actual
     |              reply to this message. If ``reply_to_message_id`` is passed in ``kwargs``, this
     |              parameter will be ignored. Default: ``True`` in group chats and ``False`` in
     |              private chats.
     |  
     |  rreeppllyy__mmeeddiiaa__ggrroouupp(self, *args, **kwargs)
     |      Shortcut for::
     |      
     |          bot.reply_media_group(update.message.chat_id, *args, **kwargs)
     |      
     |      Keyword Args:
     |          quote (:obj:`bool`, optional): If set to ``True``, the media group is sent as an
     |              actual reply to this message. If ``reply_to_message_id`` is passed in ``kwargs``,
     |              this parameter will be ignored. Default: ``True`` in group chats and ``False`` in
     |              private chats.
     |      
     |      Returns:
     |          List[:class:`telegram.Message`]: An array of the sent Messages.
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  rreeppllyy__pphhoottoo(self, *args, **kwargs)
     |      Shortcut for::
     |      
     |          bot.send_photo(update.message.chat_id, *args, **kwargs)
     |      
     |      Keyword Args:
     |          quote (:obj:`bool`, optional): If set to ``True``, the photo is sent as an actual reply
     |              to this message. If ``reply_to_message_id`` is passed in ``kwargs``, this parameter
     |              will be ignored. Default: ``True`` in group chats and ``False`` in private chats.
     |      
     |      Returns:
     |          :class:`telegram.Message`: On success, instance representing the message posted.
     |  
     |  rreeppllyy__ssttiicckkeerr(self, *args, **kwargs)
     |      Shortcut for::
     |      
     |          bot.send_sticker(update.message.chat_id, *args, **kwargs)
     |      
     |      Keyword Args:
     |          quote (:obj:`bool`, optional): If set to ``True``, the photo is sent as an actual reply
     |              to this message. If ``reply_to_message_id`` is passed in ``kwargs``, this parameter
     |              will be ignored. Default: ``True`` in group chats and ``False`` in private chats.
     |      
     |      Returns:
     |          :class:`telegram.Message`: On success, instance representing the message posted.
     |  
     |  rreeppllyy__tteexxtt(self, *args, **kwargs)
     |      Shortcut for::
     |      
     |          bot.send_message(update.message.chat_id, *args, **kwargs)
     |      
     |      Keyword Args:
     |          quote (:obj:`bool`, optional): If set to ``True``, the message is sent as an actual
     |              reply to this message. If ``reply_to_message_id`` is passed in ``kwargs``, this
     |              parameter will be ignored. Default: ``True`` in group chats and ``False`` in
     |              private chats.
     |  
     |  rreeppllyy__vveennuuee(self, *args, **kwargs)
     |      Shortcut for::
     |      
     |          bot.send_venue(update.message.chat_id, *args, **kwargs)
     |      
     |      Keyword Args:
     |          quote (:obj:`bool`, optional): If set to ``True``, the photo is sent as an actual reply
     |              to this message. If ``reply_to_message_id`` is passed in ``kwargs``, this parameter
     |              will be ignored. Default: ``True`` in group chats and ``False`` in private chats.
     |      
     |      Returns:
     |          :class:`telegram.Message`: On success, instance representing the message posted.
     |  
     |  rreeppllyy__vviiddeeoo(self, *args, **kwargs)
     |      Shortcut for::
     |      
     |          bot.send_video(update.message.chat_id, *args, **kwargs)
     |      
     |      Keyword Args:
     |          quote (:obj:`bool`, optional): If set to ``True``, the photo is sent as an actual reply
     |              to this message. If ``reply_to_message_id`` is passed in ``kwargs``, this parameter
     |              will be ignored. Default: ``True`` in group chats and ``False`` in private chats.
     |      
     |      Returns:
     |          :class:`telegram.Message`: On success, instance representing the message posted.
     |  
     |  rreeppllyy__vviiddeeoo__nnoottee(self, *args, **kwargs)
     |      Shortcut for::
     |      
     |          bot.send_video_note(update.message.chat_id, *args, **kwargs)
     |      
     |      Keyword Args:
     |          quote (:obj:`bool`, optional): If set to ``True``, the photo is sent as an actual reply
     |              to this message. If ``reply_to_message_id`` is passed in ``kwargs``, this parameter
     |              will be ignored. Default: ``True`` in group chats and ``False`` in private chats.
     |      
     |      Returns:
     |          :class:`telegram.Message`: On success, instance representing the message posted.
     |  
     |  rreeppllyy__vvooiiccee(self, *args, **kwargs)
     |      Shortcut for::
     |      
     |          bot.send_voice(update.message.chat_id, *args, **kwargs)
     |      
     |      Keyword Args:
     |          quote (:obj:`bool`, optional): If set to ``True``, the photo is sent as an actual reply
     |              to this message. If ``reply_to_message_id`` is passed in ``kwargs``, this parameter
     |              will be ignored. Default: ``True`` in group chats and ``False`` in private chats.
     |      
     |      Returns:
     |          :class:`telegram.Message`: On success, instance representing the message posted.
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  ccaappttiioonn__hhttmmll
     |      Creates an HTML-formatted string from the markup entities found in the message's
     |      caption.
     |      
     |      Use this if you want to retrieve the message caption with the caption entities formatted as
     |      HTML in the same way the original message was formatted.
     |      
     |      Returns:
     |          :obj:`str`: Message caption with captionentities formatted as HTML.
     |  
     |  ccaappttiioonn__hhttmmll__uurrlleedd
     |      Creates an HTML-formatted string from the markup entities found in the message's
     |      caption.
     |      
     |      Use this if you want to retrieve the message caption with the caption entities formatted as
     |      HTML. This also formats :attr:`telegram.MessageEntity.URL` as a hyperlink.
     |      
     |      Returns:
     |          :obj:`str`: Message caption with caption entities formatted as HTML.
     |  
     |  ccaappttiioonn__mmaarrkkddoowwnn
     |      Creates an Markdown-formatted string from the markup entities found in the message's
     |      caption.
     |      
     |      Use this if you want to retrieve the message caption with the caption entities formatted as
     |      Markdown in the same way the original message was formatted.
     |      
     |      Returns:
     |          :obj:`str`: Message caption with caption entities formatted as Markdown.
     |  
     |  ccaappttiioonn__mmaarrkkddoowwnn__uurrlleedd
     |      Creates an Markdown-formatted string from the markup entities found in the message's
     |      caption.
     |      
     |      Use this if you want to retrieve the message caption with the caption entities formatted as
     |      Markdown. This also formats :attr:`telegram.MessageEntity.URL` as a hyperlink.
     |      
     |      Returns:
     |          :obj:`str`: Message caption with caption entities formatted as Markdown.
     |  
     |  cchhaatt__iidd
     |      :obj:`int`: Shortcut for :attr:`telegram.Chat.id` for :attr:`chat`.
     |  
     |  eeffffeeccttiivvee__aattttaacchhmmeenntt
     |      :class:`telegram.Audio`
     |          or :class:`telegram.Contact`
     |          or :class:`telegram.Document`
     |          or :class:`telegram.Animation`
     |          or :class:`telegram.Game`
     |          or :class:`telegram.Invoice`
     |          or :class:`telegram.Location`
     |          or List[:class:`telegram.PhotoSize`]
     |          or :class:`telegram.Sticker`
     |          or :class:`telegram.SuccessfulPayment`
     |          or :class:`telegram.Venue`
     |          or :class:`telegram.Video`
     |          or :class:`telegram.VideoNote`
     |          or :class:`telegram.Voice`: The attachment that this message was sent with. May be
     |          ``None`` if no attachment was sent.
     |  
     |  lliinnkk
     |      :obj:`str`: Convenience property. If the chat of the message is a supergroup or a
     |      channel and has a :attr:`Chat.username`, returns a t.me link of the message.
     |  
     |  tteexxtt__hhttmmll
     |      Creates an HTML-formatted string from the markup entities found in the message.
     |      
     |      Use this if you want to retrieve the message text with the entities formatted as HTML in
     |      the same way the original message was formatted.
     |      
     |      Returns:
     |          :obj:`str`: Message text with entities formatted as HTML.
     |  
     |  tteexxtt__hhttmmll__uurrlleedd
     |      Creates an HTML-formatted string from the markup entities found in the message.
     |      
     |      Use this if you want to retrieve the message text with the entities formatted as HTML.
     |      This also formats :attr:`telegram.MessageEntity.URL` as a hyperlink.
     |      
     |      Returns:
     |          :obj:`str`: Message text with entities formatted as HTML.
     |  
     |  tteexxtt__mmaarrkkddoowwnn
     |      Creates an Markdown-formatted string from the markup entities found in the message.
     |      
     |      Use this if you want to retrieve the message text with the entities formatted as Markdown
     |      in the same way the original message was formatted.
     |      
     |      Returns:
     |          :obj:`str`: Message text with entities formatted as Markdown.
     |  
     |  tteexxtt__mmaarrkkddoowwnn__uurrlleedd
     |      Creates an Markdown-formatted string from the markup entities found in the message.
     |      
     |      Use this if you want to retrieve the message text with the entities formatted as Markdown.
     |      This also formats :attr:`telegram.MessageEntity.URL` as a hyperlink.
     |      
     |      Returns:
     |          :obj:`str`: Message text with entities formatted as Markdown.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  AATTTTAACCHHMMEENNTT__TTYYPPEESS = ['audio', 'game', 'animation', 'document', 'photo',...
     |  
     |  MMEESSSSAAGGEE__TTYYPPEESS = ['text', 'new_chat_members', 'new_chat_title', 'new_ch...
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class MMeessssaaggeeEEnnttiittyy(telegram.base.TelegramObject)
     |  This object represents one special entity in a text message. For example, hashtags,
     |  usernames, URLs, etc.
     |  
     |  Attributes:
     |      type (:obj:`str`): Type of the entity.
     |      offset (:obj:`int`): Offset in UTF-16 code units to the start of the entity.
     |      length (:obj:`int`): Length of the entity in UTF-16 code units.
     |      url (:obj:`str`): Optional. Url that will be opened after user taps on the text.
     |      user (:class:`telegram.User`): Optional. The mentioned user.
     |  
     |  Args:
     |      type (:obj:`str`): Type of the entity. Can be mention (@username), hashtag, bot_command,
     |          url, email, bold (bold text), italic (italic text), code (monowidth string), pre
     |          (monowidth block), text_link (for clickable text URLs), text_mention (for users
     |          without usernames).
     |      offset (:obj:`int`): Offset in UTF-16 code units to the start of the entity.
     |      length (:obj:`int`): Length of the entity in UTF-16 code units.
     |      url (:obj:`str`, optional): For "text_link" only, url that will be opened after usertaps on
     |          the text.
     |      user (:class:`telegram.User`, optional): For "text_mention" only, the mentioned user.
     |  
     |  Method resolution order:
     |      MessageEntity
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, type, offset, length, url=None, user=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ddee__lliisstt(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  AALLLL__TTYYPPEESS = ['mention', 'hashtag', 'cashtag', 'phone_number', 'bot_com...
     |  
     |  BBOOLLDD = 'bold'
     |  
     |  BBOOTT__CCOOMMMMAANNDD = 'bot_command'
     |  
     |  CCAASSHHTTAAGG = 'cashtag'
     |  
     |  CCOODDEE = 'code'
     |  
     |  EEMMAAIILL = 'email'
     |  
     |  HHAASSHHTTAAGG = 'hashtag'
     |  
     |  IITTAALLIICC = 'italic'
     |  
     |  MMEENNTTIIOONN = 'mention'
     |  
     |  PPHHOONNEE__NNUUMMBBEERR = 'phone_number'
     |  
     |  PPRREE = 'pre'
     |  
     |  TTEEXXTT__LLIINNKK = 'text_link'
     |  
     |  TTEEXXTT__MMEENNTTIIOONN = 'text_mention'
     |  
     |  UURRLL = 'url'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class OOrrddeerrIInnffoo(telegram.base.TelegramObject)
     |  This object represents information about an order.
     |  
     |  Attributes:
     |      name (:obj:`str`): Optional. User name.
     |      phone_number (:obj:`str`): Optional. User's phone number.
     |      email (:obj:`str`): Optional. User email.
     |      shipping_address (:class:`telegram.ShippingAddress`): Optional. User shipping address.
     |  
     |  Args:
     |      name (:obj:`str`, optional): User name.
     |      phone_number (:obj:`str`, optional): User's phone number.
     |      email (:obj:`str`, optional): User email.
     |      shipping_address (:class:`telegram.ShippingAddress`, optional): User shipping address.
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      OrderInfo
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, name=None, phone_number=None, email=None, shipping_address=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class PPaarrsseeMMooddee(builtins.object)
     |  This object represents a Telegram Message Parse Modes.
     |  
     |  Data descriptors defined here:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  HHTTMMLL = 'HTML'
     |  
     |  MMAARRKKDDOOWWNN = 'Markdown'
    
    class PPaassssppoorrttDDaattaa(telegram.base.TelegramObject)
     |  Contains information about Telegram Passport data shared with the bot by the user.
     |  
     |  Attributes:
     |      data (List[:class:`telegram.EncryptedPassportElement`]): Array with encrypted information
     |          about documents and other Telegram Passport elements that was shared with the bot.
     |      credentials (:class:`telegram.EncryptedCredentials`): Encrypted credentials.
     |      bot (:class:`telegram.Bot`, optional): The Bot to use for instance methods.
     |  
     |  Args:
     |      data (List[:class:`telegram.EncryptedPassportElement`]): Array with encrypted information
     |          about documents and other Telegram Passport elements that was shared with the bot.
     |      credentials (:obj:`str`): Encrypted credentials.
     |      bot (:class:`telegram.Bot`, optional): The Bot to use for instance methods.
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Note:
     |      To be able to decrypt this object, you must pass your private_key to either
     |      :class:`telegram.Updater` or :class:`telegram.Bot`. Decrypted data is then found in
     |      :attr:`decrypted_data` and the payload can be found in :attr:`decrypted_credentials`'s
     |      attribute :attr:`telegram.Credentials.payload`.
     |  
     |  Method resolution order:
     |      PassportData
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, data, credentials, bot=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  ddeeccrryypptteedd__ccrreeddeennttiiaallss
     |      :class:`telegram.Credentials`: Lazily decrypt and return credentials that were used
     |          to decrypt the data. This object also contains the user specified payload as
     |          `decrypted_data.payload`.
     |      
     |      Raises:
     |          telegram.TelegramDecryptionError: Decryption failed. Usually due to bad
     |              private/public key but can also suggest malformed/tampered data.
     |  
     |  ddeeccrryypptteedd__ddaattaa
     |      List[:class:`telegram.EncryptedPassportElement`]: Lazily decrypt and return information
     |          about documents and other Telegram Passport elements which were shared with the bot.
     |      
     |      Raises:
     |          telegram.TelegramDecryptionError: Decryption failed. Usually due to bad
     |              private/public key but can also suggest malformed/tampered data.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class PPaassssppoorrttEElleemmeennttEErrrroorr(telegram.base.TelegramObject)
     |  Baseclass for the PassportElementError* classes.
     |  
     |  Attributes:
     |      source (:obj:`str`): Error source.
     |      type (:obj:`str`): The section of the user's Telegram Passport which has the error.
     |      message (:obj:`str`): Error message
     |  
     |  Args:
     |      source (:obj:`str`): Error source.
     |      type (:obj:`str`): The section of the user's Telegram Passport which has the error.
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      PassportElementError
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, source, type, message, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from telegram.base.TelegramObject:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class PPaassssppoorrttEElleemmeennttEErrrroorrDDaattaaFFiieelldd(PassportElementError)
     |  Represents an issue in one of the data fields that was provided by the user. The error is
     |  considered resolved when the field's value changes.
     |  
     |  Attributes:
     |      type (:obj:`str`): The section of the user's Telegram Passport which has the error, one of
     |          "personal_details", "passport", "driver_license", "identity_card", "internal_passport",
     |          "address".
     |      field_name (:obj:`str`): Name of the data field which has the error.
     |      data_hash (:obj:`str`): Base64-encoded data hash.
     |      message (:obj:`str`): Error message.
     |  
     |  Args:
     |      type (:obj:`str`): The section of the user's Telegram Passport which has the error, one of
     |          "personal_details", "passport", "driver_license", "identity_card", "internal_passport",
     |          "address".
     |      field_name (:obj:`str`): Name of the data field which has the error.
     |      data_hash (:obj:`str`): Base64-encoded data hash.
     |      message (:obj:`str`): Error message.
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      PassportElementErrorDataField
     |      PassportElementError
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, type, field_name, data_hash, message, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from telegram.base.TelegramObject:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class PPaassssppoorrttEElleemmeennttEErrrroorrFFiillee(PassportElementError)
     |  Represents an issue with a document scan. The error is considered resolved when the file with
     |  the document scan changes.
     |  
     |  Attributes:
     |      type (:obj:`str`): The section of the user's Telegram Passport which has the issue, one of
     |          "utility_bill", "bank_statement", "rental_agreement", "passport_registration",
     |          "temporary_registration".
     |      file_hash (:obj:`str`): Base64-encoded file hash.
     |      message (:obj:`str`): Error message.
     |  
     |  Args:
     |      type (:obj:`str`): The section of the user's Telegram Passport which has the issue, one of
     |          "utility_bill", "bank_statement", "rental_agreement", "passport_registration",
     |          "temporary_registration".
     |      file_hash (:obj:`str`): Base64-encoded file hash.
     |      message (:obj:`str`): Error message.
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      PassportElementErrorFile
     |      PassportElementError
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, type, file_hash, message, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from telegram.base.TelegramObject:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class PPaassssppoorrttEElleemmeennttEErrrroorrFFiilleess(PassportElementError)
     |  Represents an issue with a list of scans. The error is considered resolved when the file with
     |  the document scan changes.
     |  
     |  Attributes:
     |      type (:obj:`str`): The section of the user's Telegram Passport which has the issue, one of
     |          "utility_bill", "bank_statement", "rental_agreement", "passport_registration",
     |          "temporary_registration".
     |      file_hash (:obj:`str`): Base64-encoded file hash.
     |      message (:obj:`str`): Error message.
     |  
     |  Args:
     |      type (:obj:`str`): The section of the user's Telegram Passport which has the issue, one of
     |          "utility_bill", "bank_statement", "rental_agreement", "passport_registration",
     |          "temporary_registration".
     |      file_hashes (List[:obj:`str`]): List of base64-encoded file hashes.
     |      message (:obj:`str`): Error message.
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      PassportElementErrorFiles
     |      PassportElementError
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, type, file_hashes, message, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from telegram.base.TelegramObject:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class PPaassssppoorrttEElleemmeennttEErrrroorrFFrroonnttSSiiddee(PassportElementError)
     |  Represents an issue with the front side of a document. The error is considered resolved when
     |  the file with the front side of the document changes.
     |  
     |  Attributes:
     |      type (:obj:`str`): The section of the user's Telegram Passport which has the issue, one of
     |          "passport", "driver_license", "identity_card", "internal_passport".
     |      file_hash (:obj:`str`): Base64-encoded hash of the file with the front side of the
     |          document.
     |      message (:obj:`str`): Error message.
     |  
     |  Args:
     |      type (:obj:`str`): The section of the user's Telegram Passport which has the issue, one of
     |          "passport", "driver_license", "identity_card", "internal_passport".
     |      file_hash (:obj:`str`): Base64-encoded hash of the file with the front side of the
     |          document.
     |      message (:obj:`str`): Error message.
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      PassportElementErrorFrontSide
     |      PassportElementError
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, type, file_hash, message, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from telegram.base.TelegramObject:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class PPaassssppoorrttEElleemmeennttEErrrroorrRReevveerrsseeSSiiddee(PassportElementError)
     |  Represents an issue with the front side of a document. The error is considered resolved when
     |  the file with the reverse side of the document changes.
     |  
     |  Attributes:
     |      type (:obj:`str`): The section of the user's Telegram Passport which has the issue, one of
     |          "passport", "driver_license", "identity_card", "internal_passport".
     |      file_hash (:obj:`str`): Base64-encoded hash of the file with the reverse side of the
     |          document.
     |      message (:obj:`str`): Error message.
     |  
     |  Args:
     |      type (:obj:`str`): The section of the user's Telegram Passport which has the issue, one of
     |          "driver_license", "identity_card".
     |      file_hash (:obj:`str`): Base64-encoded hash of the file with the reverse side of the
     |          document.
     |      message (:obj:`str`): Error message.
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      PassportElementErrorReverseSide
     |      PassportElementError
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, type, file_hash, message, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from telegram.base.TelegramObject:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class PPaassssppoorrttEElleemmeennttEErrrroorrSSeellffiiee(PassportElementError)
     |  Represents an issue with the selfie with a document. The error is considered resolved when
     |  the file with the selfie changes.
     |  
     |  Attributes:
     |      type (:obj:`str`): The section of the user's Telegram Passport which has the issue, one of
     |          "passport", "driver_license", "identity_card", "internal_passport".
     |      file_hash (:obj:`str`): Base64-encoded hash of the file with the selfie.
     |      message (:obj:`str`): Error message.
     |  
     |  Args:
     |      type (:obj:`str`): The section of the user's Telegram Passport which has the issue, one of
     |          "passport", "driver_license", "identity_card", "internal_passport".
     |      file_hash (:obj:`str`): Base64-encoded hash of the file with the selfie.
     |      message (:obj:`str`): Error message.
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      PassportElementErrorSelfie
     |      PassportElementError
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, type, file_hash, message, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from telegram.base.TelegramObject:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class PPaassssppoorrttEElleemmeennttEErrrroorrTTrraannssllaattiioonnFFiillee(PassportElementError)
     |  Represents an issue with one of the files that constitute the translation of a document.
     |  The error is considered resolved when the file changes.
     |  
     |  Attributes:
     |      type (:obj:`str`): Type of element of the user's Telegram Passport which has the issue,
     |          one of "passport", "driver_license", "identity_card", "internal_passport",
     |          "utility_bill", "bank_statement", "rental_agreement", "passport_registration",
     |          "temporary_registration".
     |      file_hash (:obj:`str`): Base64-encoded hash of the file.
     |      message (:obj:`str`): Error message.
     |  
     |  Args:
     |      type (:obj:`str`): Type of element of the user's Telegram Passport which has the issue,
     |          one of "passport", "driver_license", "identity_card", "internal_passport",
     |          "utility_bill", "bank_statement", "rental_agreement", "passport_registration",
     |          "temporary_registration".
     |      file_hash (:obj:`str`): Base64-encoded hash of the file.
     |      message (:obj:`str`): Error message.
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      PassportElementErrorTranslationFile
     |      PassportElementError
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, type, file_hash, message, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from telegram.base.TelegramObject:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class PPaassssppoorrttEElleemmeennttEErrrroorrTTrraannssllaattiioonnFFiilleess(PassportElementError)
     |  Represents an issue with the translated version of a document. The error is considered
     |  resolved when a file with the document translation change.
     |  
     |  Attributes:
     |      type (:obj:`str`): Type of element of the user's Telegram Passport which has the issue,
     |          one of "passport", "driver_license", "identity_card", "internal_passport",
     |          "utility_bill", "bank_statement", "rental_agreement", "passport_registration",
     |          "temporary_registration"
     |      file_hash (:obj:`str`): Base64-encoded file hash.
     |      message (:obj:`str`): Error message.
     |  
     |  Args:
     |      type (:obj:`str`): Type of element of the user's Telegram Passport which has the issue,
     |          one of "passport", "driver_license", "identity_card", "internal_passport",
     |          "utility_bill", "bank_statement", "rental_agreement", "passport_registration",
     |          "temporary_registration"
     |      file_hashes (List[:obj:`str`]): List of base64-encoded file hashes.
     |      message (:obj:`str`): Error message.
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      PassportElementErrorTranslationFiles
     |      PassportElementError
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, type, file_hashes, message, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from telegram.base.TelegramObject:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class PPaassssppoorrttEElleemmeennttEErrrroorrUUnnssppeecciiffiieedd(PassportElementError)
     |  Represents an issue in an unspecified place. The error is considered resolved when new
     |  data is added.
     |  
     |  Attributes:
     |      type (:obj:`str`): Type of element of the user's Telegram Passport which has the issue.
     |      element_hash (:obj:`str`): Base64-encoded element hash.
     |      message (:obj:`str`): Error message.
     |  
     |  Args:
     |      type (:obj:`str`): Type of element of the user's Telegram Passport which has the issue.
     |      element_hash (:obj:`str`): Base64-encoded element hash.
     |      message (:obj:`str`): Error message.
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      PassportElementErrorUnspecified
     |      PassportElementError
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, type, element_hash, message, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from telegram.base.TelegramObject:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class PPaassssppoorrttFFiillee(telegram.base.TelegramObject)
     |  This object represents a file uploaded to Telegram Passport. Currently all Telegram Passport
     |  files are in JPEG format when decrypted and don't exceed 10MB.
     |  
     |  Attributes:
     |      file_id (:obj:`str`): Unique identifier for this file.
     |      file_size (:obj:`int`): File size.
     |      file_date (:obj:`int`): Unix time when the file was uploaded.
     |      bot (:class:`telegram.Bot`): Optional. The Bot to use for instance methods.
     |  
     |  Args:
     |      file_id (:obj:`str`): Unique identifier for this file.
     |      file_size (:obj:`int`): File size.
     |      file_date (:obj:`int`): Unix time when the file was uploaded.
     |      bot (:class:`telegram.Bot`, optional): The Bot to use for instance methods.
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      PassportFile
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, file_id, file_date, file_size=None, bot=None, credentials=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ggeett__ffiillee(self, timeout=None, **kwargs)
     |      Wrapper over :attr:`telegram.Bot.get_file`. Will automatically assign the correct
     |      credentials to the returned :class:`telegram.File` if originating from
     |      :obj:`telegram.PassportData.decrypted_data`.
     |      
     |      Args:
     |          timeout (:obj:`int` | :obj:`float`, optional): If this value is specified, use it as
     |              the read timeout from the server (instead of the one specified during creation of
     |              the connection pool).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |      
     |      Returns:
     |          :class:`telegram.File`
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ddee__jjssoonn__ddeeccrryypptteedd(data, bot, credentials) from builtins.type
     |  
     |  ddee__lliisstt(data, bot) from builtins.type
     |  
     |  ddee__lliisstt__ddeeccrryypptteedd(data, bot, credentials) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class PPeerrssoonnaallDDeettaaiillss(telegram.base.TelegramObject)
     |  This object represents personal details.
     |  
     |  Attributes:
     |      first_name (:obj:`str`): First Name.
     |      middle_name (:obj:`str`): Optional. First Name.
     |      last_name (:obj:`str`): Last Name.
     |      birth_date (:obj:`str`): Date of birth in DD.MM.YYYY format.
     |      gender (:obj:`str`): Gender, male or female.
     |      country_code (:obj:`str`): Citizenship (ISO 3166-1 alpha-2 country code).
     |      residence_country_code (:obj:`str`): Country of residence (ISO 3166-1 alpha-2 country
     |          code).
     |      first_name (:obj:`str`): First Name in the language of the user's country of residence.
     |      middle_name (:obj:`str`): Optional. Middle Name in the language of the user's country of
     |          residence.
     |      last_name (:obj:`str`): Last Name in the language of the user's country of residence.
     |  
     |  Method resolution order:
     |      PersonalDetails
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, first_name, last_name, birth_date, gender, country_code, residence_country_code, first_name_native, last_name_native, middle_name=None, middle_name_native=None, bot=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class PPhhoottooSSiizzee(telegram.base.TelegramObject)
     |  This object represents one size of a photo or a file/sticker thumbnail.
     |  
     |  Attributes:
     |      file_id (:obj:`str`): Unique identifier for this file.
     |      width (:obj:`int`): Photo width.
     |      height (:obj:`int`): Photo height.
     |      file_size (:obj:`int`): Optional. File size.
     |      bot (:class:`telegram.Bot`): Optional. The Bot to use for instance methods.
     |  
     |  Args:
     |      file_id (:obj:`str`): Unique identifier for this file.
     |      width (:obj:`int`): Photo width.
     |      height (:obj:`int`): Photo height.
     |      file_size (:obj:`int`, optional): File size.
     |      bot (:class:`telegram.Bot`, optional): The Bot to use for instance methods.
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      PhotoSize
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, file_id, width, height, file_size=None, bot=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ggeett__ffiillee(self, timeout=None, **kwargs)
     |      Convenience wrapper over :attr:`telegram.Bot.get_file`
     |      
     |      Args:
     |          timeout (:obj:`int` | :obj:`float`, optional): If this value is specified, use it as
     |              the read timeout from the server (instead of the one specified during creation of
     |              the connection pool).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |      
     |      Returns:
     |          :class:`telegram.File`
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ddee__lliisstt(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class PPrreeCChheecckkoouuttQQuueerryy(telegram.base.TelegramObject)
     |  This object contains information about an incoming pre-checkout query.
     |  
     |  Note:
     |      * In Python `from` is a reserved word, use `from_user` instead.
     |  
     |  Attributes:
     |      id (:obj:`str`): Unique query identifier.
     |      from_user (:class:`telegram.User`): User who sent the query.
     |      currency (:obj:`str`): Three-letter ISO 4217 currency code.
     |      total_amount (:obj:`int`): Total price in the smallest units of the currency.
     |      invoice_payload (:obj:`str`): Bot specified invoice payload.
     |      shipping_option_id (:obj:`str`): Optional. Identifier of the shipping option chosen by the
     |          user.
     |      order_info (:class:`telegram.OrderInfo`): Optional. Order info provided by the user.
     |      bot (:class:`telegram.Bot`): Optional. The Bot to use for instance methods.
     |  
     |  Args:
     |      id (:obj:`str`): Unique query identifier.
     |      from_user (:class:`telegram.User`): User who sent the query.
     |      currency (:obj:`str`): Three-letter ISO 4217 currency code
     |      total_amount (:obj:`int`): Total price in the smallest units of the currency (integer, not
     |          float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp
     |          parameter in currencies.json, it shows the number of digits past the decimal point for
     |          each currency (2 for the majority of currencies).
     |      invoice_payload (:obj:`str`): Bot specified invoice payload.
     |      shipping_option_id (:obj:`str`, optional): Identifier of the shipping option chosen by the
     |          user.
     |      order_info (:class:`telegram.OrderInfo`, optional): Order info provided by the user.
     |      bot (:class:`telegram.Bot`, optional): The Bot to use for instance methods.
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      PreCheckoutQuery
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, id, from_user, currency, total_amount, invoice_payload, shipping_option_id=None, order_info=None, bot=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  aannsswweerr(self, *args, **kwargs)
     |      Shortcut for::
     |      
     |          bot.answer_pre_checkout_query(update.pre_checkout_query.id, *args, **kwargs)
     |      
     |      Args:
     |          ok (:obj:`bool`): Specify True if everything is alright (goods are available, etc.) and
     |              the bot is ready to proceed with the order. Use False if there are any problems.
     |          error_message (:obj:`str`, optional): Required if ok is False. Error message in human
     |              readable form that explains the reason for failure to proceed with the checkout
     |              (e.g. "Sorry, somebody just bought the last of our amazing black T-shirts while you
     |              were busy filling out your payment details. Please choose a different color or
     |              garment!"). Telegram will display this message to the user.
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class RReeppllyyKKeeyybbooaarrddMMaarrkkuupp(telegram.replymarkup.ReplyMarkup)
     |  This object represents a custom keyboard with reply options.
     |  
     |  Attributes:
     |      keyboard (List[List[:class:`telegram.KeyboardButton` | :obj:`str`]]): Array of button rows.
     |      resize_keyboard (:obj:`bool`): Optional. Requests clients to resize the keyboard.
     |      one_time_keyboard (:obj:`bool`): Optional. Requests clients to hide the keyboard as soon as
     |          it's been used.
     |      selective (:obj:`bool`): Optional. Show the keyboard to specific users only.
     |  
     |  Example:
     |      A user requests to change the bot's language, bot replies to the request with a keyboard
     |      to select the new language. Other users in the group don't see the keyboard.
     |  
     |  Args:
     |      keyboard (List[List[:obj:`str` | :class:`telegram.KeyboardButton`]]): Array of button rows,
     |              each represented by an Array of :class:`telegram.KeyboardButton` objects.
     |      resize_keyboard (:obj:`bool`, optional): Requests clients to resize the keyboard vertically
     |          for optimal fit (e.g., make the keyboard smaller if there are just two rows of
     |          buttons). Defaults to false, in which case the custom keyboard is always of the same
     |          height as the app's standard keyboard. Defaults to ``False``
     |      one_time_keyboard (:obj:`bool`, optional): Requests clients to hide the keyboard as soon as
     |          it's been used. The keyboard will still be available, but clients will automatically
     |          display the usual letter-keyboard in the chat - the user can press a special button in
     |          the input field to see the custom keyboard again. Defaults to ``False``.
     |      selective (:obj:`bool`, optional): Use this parameter if you want to show the keyboard to
     |          specific users only. Targets:
     |  
     |          1) users that are @mentioned in the text of the Message object
     |          2) if the bot's message is a reply (has reply_to_message_id), sender of the original
     |             message.
     |  
     |          Defaults to ``False``.
     |  
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      ReplyKeyboardMarkup
     |      telegram.replymarkup.ReplyMarkup
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, keyboard, resize_keyboard=False, one_time_keyboard=False, selective=False, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from telegram.base.TelegramObject:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class RReeppllyyKKeeyybbooaarrddRReemmoovvee(telegram.replymarkup.ReplyMarkup)
     |  Upon receiving a message with this object, Telegram clients will remove the current custom
     |  keyboard and display the default letter-keyboard. By default, custom keyboards are displayed
     |  until a new keyboard is sent by a bot. An exception is made for one-time keyboards that are
     |  hidden immediately after the user presses a button (see :class:`telegram.ReplyKeyboardMarkup`).
     |  
     |  Attributes:
     |      remove_keyboard (:obj:`True`): Requests clients to remove the custom keyboard.
     |      selective (:obj:`bool`): Optional. Use this parameter if you want to remove the keyboard
     |          for specific users only.
     |  
     |  Example:
     |      A user votes in a poll, bot returns confirmation message in reply to the vote and removes
     |      the keyboard for that user, while still showing the keyboard with poll options to users who
     |      haven't voted yet.
     |  
     |  Args:
     |      selective (:obj:`bool`, optional): Use this parameter if you want to remove the keyboard
     |          for specific users only. Targets:
     |  
     |          1) users that are @mentioned in the text of the Message object
     |          2) if the bot's message is a reply (has reply_to_message_id), sender of the original
     |             message.
     |  
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      ReplyKeyboardRemove
     |      telegram.replymarkup.ReplyMarkup
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, selective=False, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from telegram.base.TelegramObject:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class RReeppllyyMMaarrkkuupp(telegram.base.TelegramObject)
     |  Base class for Telegram ReplyMarkup Objects.
     |  
     |  See :class:`telegram.ReplyKeyboardMarkup` and :class:`telegram.InlineKeyboardMarkup` for
     |  detailed use.
     |  
     |  Method resolution order:
     |      ReplyMarkup
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from telegram.base.TelegramObject:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class RReessiiddeennttiiaallAAddddrreessss(telegram.base.TelegramObject)
     |  This object represents a residential address.
     |  
     |  Attributes:
     |      street_line1 (:obj:`str`): First line for the address.
     |      street_line2 (:obj:`str`): Optional. Second line for the address.
     |      city (:obj:`str`): City.
     |      state (:obj:`str`): Optional. State.
     |      country_code (:obj:`str`): ISO 3166-1 alpha-2 country code.
     |      post_code (:obj:`str`): Address post code.
     |  
     |  Method resolution order:
     |      ResidentialAddress
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, street_line1, street_line2, city, state, country_code, post_code, bot=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class SSeeccuurreeDDaattaa(telegram.base.TelegramObject)
     |  This object represents the credentials that were used to decrypt the encrypted data.
     |  All fields are optional and depend on fields that were requested.
     |  
     |  Attributes:
     |      personal_details (:class:`telegram.SecureValue`, optional): Credentials for encrypted
     |          personal details.
     |      passport (:class:`telegram.SecureValue`, optional): Credentials for encrypted passport.
     |      internal_passport (:class:`telegram.SecureValue`, optional): Credentials for encrypted
     |          internal passport.
     |      driver_license (:class:`telegram.SecureValue`, optional): Credentials for encrypted
     |          driver license.
     |      identity_card (:class:`telegram.SecureValue`, optional): Credentials for encrypted ID card
     |      address (:class:`telegram.SecureValue`, optional): Credentials for encrypted
     |          residential address.
     |      utility_bill (:class:`telegram.SecureValue`, optional): Credentials for encrypted
     |          utility bill.
     |      bank_statement (:class:`telegram.SecureValue`, optional): Credentials for encrypted
     |          bank statement.
     |      rental_agreement (:class:`telegram.SecureValue`, optional): Credentials for encrypted
     |          rental agreement.
     |      passport_registration (:class:`telegram.SecureValue`, optional): Credentials for encrypted
     |          registration from internal passport.
     |      temporary_registration (:class:`telegram.SecureValue`, optional): Credentials for encrypted
     |          temporary registration.
     |  
     |  Method resolution order:
     |      SecureData
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, personal_details=None, passport=None, internal_passport=None, driver_license=None, identity_card=None, address=None, utility_bill=None, bank_statement=None, rental_agreement=None, passport_registration=None, temporary_registration=None, bot=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class SShhiippppiinnggAAddddrreessss(telegram.base.TelegramObject)
     |  This object represents a Telegram ShippingAddress.
     |  
     |  Attributes:
     |      country_code (:obj:`str`): ISO 3166-1 alpha-2 country code.
     |      state (:obj:`str`): State, if applicable.
     |      city (:obj:`str`): City.
     |      street_line1 (:obj:`str`): First line for the address.
     |      street_line2 (:obj:`str`): Second line for the address.
     |      post_code (:obj:`str`): Address post code.
     |  
     |  Args:
     |      country_code (:obj:`str`): ISO 3166-1 alpha-2 country code.
     |      state (:obj:`str`): State, if applicable.
     |      city (:obj:`str`): City.
     |      street_line1 (:obj:`str`): First line for the address.
     |      street_line2 (:obj:`str`): Second line for the address.
     |      post_code (:obj:`str`): Address post code.
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      ShippingAddress
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, country_code, state, city, street_line1, street_line2, post_code, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class SShhiippppiinnggOOppttiioonn(telegram.base.TelegramObject)
     |  This object represents one shipping option.
     |  
     |  Attributes:
     |      id (:obj:`str`): Shipping option identifier.
     |      title (:obj:`str`): Option title.
     |      prices (List[:class:`telegram.LabeledPrice`]): List of price portions.
     |  
     |  Args:
     |      id (:obj:`str`): Shipping option identifier.
     |      title (:obj:`str`): Option title.
     |      prices (List[:class:`telegram.LabeledPrice`]): List of price portions.
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      ShippingOption
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, id, title, prices, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from telegram.base.TelegramObject:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class SShhiippppiinnggQQuueerryy(telegram.base.TelegramObject)
     |  This object contains information about an incoming shipping query.
     |  
     |  Note:
     |      * In Python `from` is a reserved word, use `from_user` instead.
     |  
     |  Attributes:
     |      id (:obj:`str`): Unique query identifier.
     |      from_user (:class:`telegram.User`): User who sent the query.
     |      invoice_payload (:obj:`str`): Bot specified invoice payload.
     |      shipping_address (:class:`telegram.ShippingAddress`): User specified shipping address.
     |      bot (:class:`telegram.Bot`): Optional. The Bot to use for instance methods.
     |  
     |  Args:
     |      id (:obj:`str`): Unique query identifier.
     |      from_user (:class:`telegram.User`): User who sent the query.
     |      invoice_payload (:obj:`str`): Bot specified invoice payload.
     |      shipping_address (:class:`telegram.ShippingAddress`): User specified shipping address.
     |      bot (:class:`telegram.Bot`, optional): The Bot to use for instance methods.
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      ShippingQuery
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, id, from_user, invoice_payload, shipping_address, bot=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  aannsswweerr(self, *args, **kwargs)
     |      Shortcut for::
     |      
     |          bot.answer_shipping_query(update.shipping_query.id, *args, **kwargs)
     |      
     |      Args:
     |          ok (:obj:`bool`): Specify True if delivery to the specified address is possible and
     |              False if there are any problems (for example, if delivery to the specified address
     |              is not possible).
     |          shipping_options (List[:class:`telegram.ShippingOption`], optional): Required if ok is
     |              True. A JSON-serialized array of available shipping options.
     |          error_message (:obj:`str`, optional): Required if ok is False. Error message in human
     |              readable form that explains why it is impossible to complete the order (e.g.
     |              "Sorry, delivery to your desired address is unavailable'). Telegram will display
     |              this message to the user.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class SSttiicckkeerr(telegram.base.TelegramObject)
     |  This object represents a sticker.
     |  
     |  Attributes:
     |      file_id (:obj:`str`): Unique identifier for this file.
     |      width (:obj:`int`): Sticker width.
     |      height (:obj:`int`): Sticker height.
     |      thumb (:class:`telegram.PhotoSize`): Optional. Sticker thumbnail in the .webp or .jpg
     |          format.
     |      emoji (:obj:`str`): Optional. Emoji associated with the sticker.
     |      set_name (:obj:`str`): Optional. Name of the sticker set to which the sticker belongs.
     |      mask_position (:class:`telegram.MaskPosition`): Optional. For mask stickers, the position
     |          where the mask should be placed.
     |      file_size (:obj:`int`): Optional. File size.
     |      bot (:class:`telegram.Bot`): Optional. The Bot to use for instance methods.
     |  
     |  Args:
     |      file_id (:obj:`str`): Unique identifier for this file.
     |      width (:obj:`int`): Sticker width.
     |      height (:obj:`int`): Sticker height.
     |      thumb (:class:`telegram.PhotoSize`, optional): Sticker thumbnail in the .webp or .jpg
     |          format.
     |      emoji (:obj:`str`, optional): Emoji associated with the sticker
     |      set_name (:obj:`str`, optional): Name of the sticker set to which the sticker
     |          belongs.
     |      mask_position (:class:`telegram.MaskPosition`, optional): For mask stickers, the
     |          position where the mask should be placed.
     |      file_size (:obj:`int`, optional): File size.
     |      **kwargs (obj:`dict`): Arbitrary keyword arguments.7
     |      bot (:class:`telegram.Bot`, optional): The Bot to use for instance methods.
     |  
     |  Method resolution order:
     |      Sticker
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, file_id, width, height, thumb=None, emoji=None, file_size=None, set_name=None, mask_position=None, bot=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ggeett__ffiillee(self, timeout=None, **kwargs)
     |      Convenience wrapper over :attr:`telegram.Bot.get_file`
     |      
     |      Args:
     |          timeout (:obj:`int` | :obj:`float`, optional): If this value is specified, use it as
     |              the read timeout from the server (instead of the one specified during creation of
     |              the connection pool).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |      
     |      Returns:
     |          :class:`telegram.File`
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ddee__lliisstt(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class SSttiicckkeerrSSeett(telegram.base.TelegramObject)
     |  This object represents a sticker set.
     |  
     |  Attributes:
     |      name (:obj:`str`): Sticker set name.
     |      title (:obj:`str`): Sticker set title.
     |      contains_masks (:obj:`bool`): True, if the sticker set contains masks.
     |      stickers (List[:class:`telegram.Sticker`]): List of all set stickers.
     |  
     |  Args:
     |      name (:obj:`str`): Sticker set name.
     |      title (:obj:`str`): Sticker set title.
     |      contains_masks (:obj:`bool`): True, if the sticker set contains masks.
     |      stickers (List[:class:`telegram.Sticker`]): List of all set stickers.
     |  
     |  Method resolution order:
     |      StickerSet
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, name, title, contains_masks, stickers, bot=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  ddee__jjssoonn(data, bot)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class SSuucccceessssffuullPPaayymmeenntt(telegram.base.TelegramObject)
     |  This object contains basic information about a successful payment.
     |  
     |  Attributes:
     |      currency (:obj:`str`): Three-letter ISO 4217 currency code.
     |      total_amount (:obj:`int`): Total price in the smallest units of the currency.
     |      invoice_payload (:obj:`str`): Bot specified invoice payload.
     |      shipping_option_id (:obj:`str`): Optional. Identifier of the shipping option chosen by the
     |          user.
     |      order_info (:class:`telegram.OrderInfo`): Optional. Order info provided by the user.
     |      telegram_payment_charge_id (:obj:`str`): Telegram payment identifier.
     |      provider_payment_charge_id (:obj:`str`): Provider payment identifier.
     |  
     |  Args:
     |      currency (:obj:`str`): Three-letter ISO 4217 currency code.
     |      total_amount (:obj:`int`): Total price in the smallest units of the currency (integer, not
     |          float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp
     |          parameter in currencies.json, it shows the number of digits past the decimal point for
     |          each currency (2 for the majority of currencies).
     |      invoice_payload (:obj:`str`): Bot specified invoice payload.
     |      shipping_option_id (:obj:`str`, optional): Identifier of the shipping option chosen by the
     |          user.
     |      order_info (:class:`telegram.OrderInfo`, optional): Order info provided by the user
     |      telegram_payment_charge_id (:obj:`str`): Telegram payment identifier.
     |      provider_payment_charge_id (:obj:`str`): Provider payment identifier.
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      SuccessfulPayment
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, currency, total_amount, invoice_payload, telegram_payment_charge_id, provider_payment_charge_id, shipping_option_id=None, order_info=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class TTeelleeggrraammDDeeccrryyppttiioonnEErrrroorr(telegram.error.TelegramError)
     |  Something went wrong with decryption.
     |  
     |  Method resolution order:
     |      TelegramDecryptionError
     |      telegram.error.TelegramError
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, message)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.error.TelegramError:
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.error.TelegramError:
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.Exception:
     |  
     |  ____nneeww____(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |  
     |  ____ddeellaattttrr____(self, name, /)
     |      Implement delattr(self, name).
     |  
     |  ____ggeettaattttrriibbuuttee____(self, name, /)
     |      Return getattr(self, name).
     |  
     |  ____rreedduuccee____(...)
     |      helper for pickle
     |  
     |  ____rreepprr____(self, /)
     |      Return repr(self).
     |  
     |  ____sseettaattttrr____(self, name, value, /)
     |      Implement setattr(self, name, value).
     |  
     |  ____sseettssttaattee____(...)
     |  
     |  wwiitthh__ttrraacceebbaacckk(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |  
     |  ____ccaauussee____
     |      exception cause
     |  
     |  ____ccoonntteexxtt____
     |      exception context
     |  
     |  ____ddiicctt____
     |  
     |  ____ssuupppprreessss__ccoonntteexxtt____
     |  
     |  ____ttrraacceebbaacckk____
     |  
     |  aarrggss
    
    class TTeelleeggrraammEErrrroorr(builtins.Exception)
     |  Common base class for all non-exit exceptions.
     |  
     |  Method resolution order:
     |      TelegramError
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, message)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.Exception:
     |  
     |  ____nneeww____(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |  
     |  ____ddeellaattttrr____(self, name, /)
     |      Implement delattr(self, name).
     |  
     |  ____ggeettaattttrriibbuuttee____(self, name, /)
     |      Return getattr(self, name).
     |  
     |  ____rreedduuccee____(...)
     |      helper for pickle
     |  
     |  ____rreepprr____(self, /)
     |      Return repr(self).
     |  
     |  ____sseettaattttrr____(self, name, value, /)
     |      Implement setattr(self, name, value).
     |  
     |  ____sseettssttaattee____(...)
     |  
     |  wwiitthh__ttrraacceebbaacckk(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |  
     |  ____ccaauussee____
     |      exception cause
     |  
     |  ____ccoonntteexxtt____
     |      exception context
     |  
     |  ____ddiicctt____
     |  
     |  ____ssuupppprreessss__ccoonntteexxtt____
     |  
     |  ____ttrraacceebbaacckk____
     |  
     |  aarrggss
    
    class TTeelleeggrraammOObbjjeecctt(builtins.object)
     |  Base class for most telegram objects.
     |  
     |  Methods defined here:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class UUppddaattee(telegram.base.TelegramObject)
     |  This object represents an incoming update.
     |  
     |  Note:
     |      At most one of the optional parameters can be present in any given update.
     |  
     |  Attributes:
     |      update_id (:obj:`int`): The update's unique identifier.
     |      message (:class:`telegram.Message`): Optional. New incoming message.
     |      edited_message (:class:`telegram.Message`): Optional. New version of a message.
     |      channel_post (:class:`telegram.Message`): Optional. New incoming channel post.
     |      edited_channel_post (:class:`telegram.Message`): Optional. New version of a channel post.
     |      inline_query (:class:`telegram.InlineQuery`): Optional. New incoming inline query.
     |      chosen_inline_result (:class:`telegram.ChosenInlineResult`): Optional. The result of an
     |          inline query that was chosen by a user.
     |      callback_query (:class:`telegram.CallbackQuery`): Optional. New incoming callback query.
     |      shipping_query (:class:`telegram.ShippingQuery`): Optional. New incoming shipping query.
     |      pre_checkout_query (:class:`telegram.PreCheckoutQuery`): Optional. New incoming
     |          pre-checkout query.
     |  
     |  Args:
     |      update_id (:obj:`int`): The update's unique identifier. Update identifiers start from a
     |          certain positive number and increase sequentially. This ID becomes especially handy if
     |          you're using Webhooks, since it allows you to ignore repeated updates or to restore the
     |          correct update sequence, should they get out of order.
     |      message (:class:`telegram.Message`, optional): New incoming message of any kind - text,
     |          photo, sticker, etc.
     |      edited_message (:class:`telegram.Message`, optional): New version of a message that is
     |          known to the bot and was edited.
     |      channel_post (:class:`telegram.Message`, optional): New incoming channel post of any kind
     |          - text, photo, sticker, etc.
     |      edited_channel_post (:class:`telegram.Message`, optional): New version of a channel post
     |          that is known to the bot and was edited.
     |      inline_query (:class:`telegram.InlineQuery`, optional): New incoming inline query.
     |      chosen_inline_result (:class:`telegram.ChosenInlineResult`, optional): The result of an
     |          inline query that was chosen by a user and sent to their chat partner.
     |      callback_query (:class:`telegram.CallbackQuery`, optional): New incoming callback query.
     |      shipping_query (:class:`telegram.ShippingQuery`, optional): New incoming shipping query.
     |          Only for invoices with flexible price.
     |      pre_checkout_query (:class:`telegram.PreCheckoutQuery`, optional): New incoming
     |          pre-checkout query. Contains full information about checkout
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      Update
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, update_id, message=None, edited_message=None, channel_post=None, edited_channel_post=None, inline_query=None, chosen_inline_result=None, callback_query=None, shipping_query=None, pre_checkout_query=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  eeffffeeccttiivvee__cchhaatt
     |      :class:`telegram.Chat`: The chat that this update was sent in, no matter what kind of
     |          update this is. Will be ``None`` for :attr:`inline_query`,
     |          :attr:`chosen_inline_result`, :attr:`callback_query` from inline messages,
     |          :attr:`shipping_query` and :attr:`pre_checkout_query`.
     |  
     |  eeffffeeccttiivvee__mmeessssaaggee
     |      :class:`telegram.Message`: The message included in this update, no matter what kind of
     |          update this is. Will be ``None`` for :attr:`inline_query`,
     |          :attr:`chosen_inline_result`, :attr:`callback_query` from inline messages,
     |          :attr:`shipping_query` and :attr:`pre_checkout_query`.
     |  
     |  eeffffeeccttiivvee__uusseerr
     |      :class:`telegram.User`: The user that sent this update, no matter what kind of update this
     |          is. Will be ``None`` for :attr:`channel_post`.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class UUsseerr(telegram.base.TelegramObject)
     |  This object represents a Telegram user or bot.
     |  
     |  Attributes:
     |      id (:obj:`int`): Unique identifier for this user or bot.
     |      is_bot (:obj:`bool`): True, if this user is a bot
     |      first_name (:obj:`str`): User's or bot's first name.
     |      last_name (:obj:`str`): Optional. User's or bot's last name.
     |      username (:obj:`str`): Optional. User's or bot's username.
     |      language_code (:obj:`str`): Optional. IETF language tag of the user's language.
     |      bot (:class:`telegram.Bot`): Optional. The Bot to use for instance methods.
     |  
     |  Args:
     |      id (:obj:`int`): Unique identifier for this user or bot.
     |      is_bot (:obj:`bool`): True, if this user is a bot
     |      first_name (:obj:`str`): User's or bot's first name.
     |      last_name (:obj:`str`, optional): User's or bot's last name.
     |      username (:obj:`str`, optional): User's or bot's username.
     |      language_code (:obj:`str`, optional): IETF language tag of the user's language.
     |      bot (:class:`telegram.Bot`, optional): The Bot to use for instance methods.
     |  
     |  Method resolution order:
     |      User
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, id, first_name, is_bot, last_name=None, username=None, language_code=None, bot=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ggeett__pprrooffiillee__pphhoottooss(self, *args, **kwargs)
     |      Shortcut for::
     |      
     |              bot.get_user_profile_photos(update.message.from_user.id, *args, **kwargs)
     |  
     |  mmeennttiioonn__hhttmmll(self, name=None)
     |      Args:
     |          name (:obj:`str`): The name used as a link for the user. Defaults to :attr:`full_name`.
     |      
     |      Returns:
     |          :obj:`str`: The inline mention for the user as HTML.
     |  
     |  mmeennttiioonn__mmaarrkkddoowwnn(self, name=None)
     |      Args:
     |          name (:obj:`str`): The name used as a link for the user. Defaults to :attr:`full_name`.
     |      
     |      Returns:
     |          :obj:`str`: The inline mention for the user as markdown.
     |  
     |  sseenndd__aanniimmaattiioonn(self, *args, **kwargs)
     |      Shortcut for::
     |      
     |          bot.send_animation(User.id, *args, **kwargs)
     |      
     |      Where User is the current instance.
     |      
     |      Returns:
     |          :class:`telegram.Message`: On success, instance representing the message posted.
     |  
     |  sseenndd__aauuddiioo(self, *args, **kwargs)
     |      Shortcut for::
     |      
     |          bot.send_audio(User.id, *args, **kwargs)
     |      
     |      Where User is the current instance.
     |      
     |      Returns:
     |          :class:`telegram.Message`: On success, instance representing the message posted.
     |  
     |  sseenndd__ddooccuummeenntt(self, *args, **kwargs)
     |      Shortcut for::
     |      
     |          bot.send_document(User.id, *args, **kwargs)
     |      
     |      Where User is the current instance.
     |      
     |      Returns:
     |          :class:`telegram.Message`: On success, instance representing the message posted.
     |  
     |  sseenndd__mmeessssaaggee(self, *args, **kwargs)
     |      Shortcut for::
     |      
     |          bot.send_message(User.id, *args, **kwargs)
     |      
     |      Where User is the current instance.
     |      
     |      Returns:
     |          :class:`telegram.Message`: On success, instance representing the message posted.
     |  
     |  sseenndd__pphhoottoo(self, *args, **kwargs)
     |      Shortcut for::
     |      
     |          bot.send_photo(User.id, *args, **kwargs)
     |      
     |      Where User is the current instance.
     |      
     |      Returns:
     |          :class:`telegram.Message`: On success, instance representing the message posted.
     |  
     |  sseenndd__ssttiicckkeerr(self, *args, **kwargs)
     |      Shortcut for::
     |      
     |          bot.send_sticker(User.id, *args, **kwargs)
     |      
     |      Where User is the current instance.
     |      
     |      Returns:
     |          :class:`telegram.Message`: On success, instance representing the message posted.
     |  
     |  sseenndd__vviiddeeoo(self, *args, **kwargs)
     |      Shortcut for::
     |      
     |          bot.send_video(User.id, *args, **kwargs)
     |      
     |      Where User is the current instance.
     |      
     |      Returns:
     |          :class:`telegram.Message`: On success, instance representing the message posted.
     |  
     |  sseenndd__vviiddeeoo__nnoottee(self, *args, **kwargs)
     |      Shortcut for::
     |      
     |          bot.send_video_note(User.id, *args, **kwargs)
     |      
     |      Where User is the current instance.
     |      
     |      Returns:
     |          :class:`telegram.Message`: On success, instance representing the message posted.
     |  
     |  sseenndd__vvooiiccee(self, *args, **kwargs)
     |      Shortcut for::
     |      
     |          bot.send_voice(User.id, *args, **kwargs)
     |      
     |      Where User is the current instance.
     |      
     |      Returns:
     |          :class:`telegram.Message`: On success, instance representing the message posted.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ddee__lliisstt(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  ffuullll__nnaammee
     |      :obj:`str`: Convenience property. The user's :attr:`first_name`, followed by (if
     |      available) :attr:`last_name`.
     |  
     |  lliinnkk
     |      :obj:`str`: Convenience property. If :attr:`username` is available, returns a t.me link
     |      of the user.
     |  
     |  nnaammee
     |      :obj:`str`: Convenience property. If available, returns the user's :attr:`username`
     |      prefixed with "@". If :attr:`username` is not available, returns :attr:`full_name`.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class UUsseerrPPrrooffiilleePPhhoottooss(telegram.base.TelegramObject)
     |  This object represent a user's profile pictures.
     |  
     |  Attributes:
     |      total_count (:obj:`int`): Total number of profile pictures.
     |      photos (List[List[:class:`telegram.PhotoSize`]]): Requested profile pictures.
     |  
     |  Args:
     |      total_count (:obj:`int`): Total number of profile pictures the target user has.
     |      photos (List[List[:class:`telegram.PhotoSize`]]): Requested profile pictures (in up to 4
     |          sizes each).
     |  
     |  Method resolution order:
     |      UserProfilePhotos
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, total_count, photos, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class VVeennuuee(telegram.base.TelegramObject)
     |  This object represents a venue.
     |  
     |  Attributes:
     |      location (:class:`telegram.Location`): Venue location.
     |      title (:obj:`str`): Name of the venue.
     |      address (:obj:`str`): Address of the venue.
     |      foursquare_id (:obj:`str`): Optional. Foursquare identifier of the venue.
     |      foursquare_type (:obj:`str`): Optional. Foursquare type of the venue. (For example,
     |          "arts_entertainment/default", "arts_entertainment/aquarium" or "food/icecream".)
     |  
     |  Args:
     |      location (:class:`telegram.Location`): Venue location.
     |      title (:obj:`str`): Name of the venue.
     |      address (:obj:`str`): Address of the venue.
     |      foursquare_id (:obj:`str`, optional): Foursquare identifier of the venue.
     |      foursquare_type (:obj:`str`, optional): Foursquare type of the venue. (For example,
     |          "arts_entertainment/default", "arts_entertainment/aquarium" or "food/icecream".)
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      Venue
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, location, title, address, foursquare_id=None, foursquare_type=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class VViiddeeoo(telegram.base.TelegramObject)
     |  This object represents a video file.
     |  
     |  Attributes:
     |      file_id (:obj:`str`): Unique identifier for this file.
     |      width (:obj:`int`): Video width as defined by sender.
     |      height (:obj:`int`): Video height as defined by sender.
     |      duration (:obj:`int`): Duration of the video in seconds as defined by sender.
     |      thumb (:class:`telegram.PhotoSize`): Optional. Video thumbnail.
     |      mime_type (:obj:`str`): Optional. Mime type of a file as defined by sender.
     |      file_size (:obj:`int`): Optional. File size.
     |      bot (:class:`telegram.Bot`): Optional. The Bot to use for instance methods.
     |  
     |  Args:
     |      file_id (:obj:`str`): Unique identifier for this file.
     |      width (:obj:`int`): Video width as defined by sender.
     |      height (:obj:`int`): Video height as defined by sender.
     |      duration (:obj:`int`): Duration of the video in seconds as defined by sender.
     |      thumb (:class:`telegram.PhotoSize`, optional): Video thumbnail.
     |      mime_type (:obj:`str`, optional): Mime type of a file as defined by sender.
     |      file_size (:obj:`int`, optional): File size.
     |      bot (:class:`telegram.Bot`, optional): The Bot to use for instance methods.
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      Video
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, file_id, width, height, duration, thumb=None, mime_type=None, file_size=None, bot=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ggeett__ffiillee(self, timeout=None, **kwargs)
     |      Convenience wrapper over :attr:`telegram.Bot.get_file`
     |      
     |      Args:
     |          timeout (:obj:`int` | :obj:`float`, optional): If this value is specified, use it as
     |              the read timeout from the server (instead of the one specified during creation of
     |              the connection pool).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |      
     |      Returns:
     |          :class:`telegram.File`
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class VViiddeeooNNoottee(telegram.base.TelegramObject)
     |  This object represents a video message (available in Telegram apps as of v.4.0).
     |  
     |  Attributes:
     |      file_id (:obj:`str`): Unique identifier for this file.
     |      length (:obj:`int`): Video width and height as defined by sender.
     |      duration (:obj:`int`): Duration of the video in seconds as defined by sender.
     |      thumb (:class:`telegram.PhotoSize`): Optional. Video thumbnail.
     |      file_size (:obj:`int`): Optional. File size.
     |      bot (:class:`telegram.Bot`): Optional. The Bot to use for instance methods.
     |  
     |  Args:
     |      file_id (:obj:`str`): Unique identifier for this file.
     |      length (:obj:`int`): Video width and height as defined by sender.
     |      duration (:obj:`int`): Duration of the video in seconds as defined by sender.
     |      thumb (:class:`telegram.PhotoSize`, optional): Video thumbnail.
     |      file_size (:obj:`int`, optional): File size.
     |      bot (:class:`telegram.Bot`, optional): The Bot to use for instance methods.
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      VideoNote
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, file_id, length, duration, thumb=None, file_size=None, bot=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ggeett__ffiillee(self, timeout=None, **kwargs)
     |      Convenience wrapper over :attr:`telegram.Bot.get_file`
     |      
     |      Args:
     |          timeout (:obj:`int` | :obj:`float`, optional): If this value is specified, use it as
     |              the read timeout from the server (instead of the one specified during creation of
     |              the connection pool).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |      
     |      Returns:
     |          :class:`telegram.File`
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class VVooiiccee(telegram.base.TelegramObject)
     |  This object represents a voice note.
     |  
     |  Attributes:
     |      file_id (:obj:`str`): Unique identifier for this file.
     |      duration (:obj:`int`): Duration of the audio in seconds as defined by sender.
     |      mime_type (:obj:`str`): Optional. MIME type of the file as defined by sender.
     |      file_size (:obj:`int`): Optional. File size.
     |      bot (:class:`telegram.Bot`): Optional. The Bot to use for instance methods.
     |  
     |  Args:
     |      file_id (:obj:`str`): Unique identifier for this file.
     |      duration (:obj:`int`, optional): Duration of the audio in seconds as defined by sender.
     |      mime_type (:obj:`str`, optional): MIME type of the file as defined by sender.
     |      file_size (:obj:`int`, optional): File size.
     |      bot (:class:`telegram.Bot`, optional): The Bot to use for instance methods.
     |      **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |  
     |  Method resolution order:
     |      Voice
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, file_id, duration, mime_type=None, file_size=None, bot=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ggeett__ffiillee(self, timeout=None, **kwargs)
     |      Convenience wrapper over :attr:`telegram.Bot.get_file`
     |      
     |      Args:
     |          timeout (:obj:`int` | :obj:`float`, optional): If this value is specified, use it as
     |              the read timeout from the server (instead of the one specified during creation of
     |              the connection pool).
     |          **kwargs (:obj:`dict`): Arbitrary keyword arguments.
     |      
     |      Returns:
     |          :class:`telegram.File`
     |      
     |      Raises:
     |          :class:`telegram.TelegramError`
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).
    
    class WWeebbhhooookkIInnffoo(telegram.base.TelegramObject)
     |  This object represents a Telegram WebhookInfo.
     |  
     |  Contains information about the current status of a webhook.
     |  
     |  Attributes:
     |      url (:obj:`str`): Webhook URL.
     |      has_custom_certificate (:obj:`bool`): If a custom certificate was provided for webhook.
     |      pending_update_count (:obj:`int`): Number of updates awaiting delivery.
     |      last_error_date (:obj:`int`): Optional. Unix time for the most recent error that happened.
     |      last_error_message (:obj:`str`): Optional. Error message in human-readable format.
     |      max_connections (:obj:`int`): Optional. Maximum allowed number of simultaneous HTTPS
     |          connections.
     |      allowed_updates (List[:obj:`str`]): Optional. A list of update types the bot is subscribed
     |          to.
     |  
     |  Args:
     |      url (:obj:`str`): Webhook URL, may be empty if webhook is not set up.
     |      has_custom_certificate (:obj:`bool`): True, if a custom certificate was provided for
     |          webhook certificate checks.
     |      pending_update_count (:obj:`int`): Number of updates awaiting delivery.
     |      last_error_date (:obj:`int`, optional): Unix time for the most recent error that happened
     |          when trying todeliver an update via webhook.
     |      last_error_message (:obj:`str`, optional): Error message in human-readable format for the
     |          most recent error that happened when trying to deliver an update via webhook.
     |      max_connections (:obj:`int`, optional): Maximum allowed number of simultaneous HTTPS
     |          connections to the webhook for update delivery.
     |      allowed_updates (List[:obj:`str`], optional): A list of update types the bot is subscribed
     |          to. Defaults to all update types.
     |  
     |  Method resolution order:
     |      WebhookInfo
     |      telegram.base.TelegramObject
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ____iinniitt____(self, url, has_custom_certificate, pending_update_count, last_error_date=None, last_error_message=None, max_connections=None, allowed_updates=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  ddee__jjssoonn(data, bot) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from telegram.base.TelegramObject:
     |  
     |  ____eeqq____(self, other)
     |      Return self==value.
     |  
     |  ____ggeettiitteemm____(self, item)
     |  
     |  ____hhaasshh____(self)
     |      Return hash(self).
     |  
     |  ____ssttrr____(self)
     |      Return str(self).
     |  
     |  ttoo__ddiicctt(self)
     |  
     |  ttoo__jjssoonn(self)
     |      Returns:
     |          :obj:`str`
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from telegram.base.TelegramObject:
     |  
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from telegram.base.TelegramObject:
     |  
     |  ____mmeettaaccllaassss____ = <class 'abc.ABCMeta'>
     |      Metaclass for defining Abstract Base Classes (ABCs).
     |      
     |      Use this metaclass to create an ABC.  An ABC can be subclassed
     |      directly, and then acts as a mix-in class.  You can also register
     |      unrelated concrete classes (even built-in classes) and unrelated
     |      ABCs as 'virtual subclasses' -- these and their descendants will
     |      be considered subclasses of the registering ABC by the built-in
     |      issubclass() function, but the registering ABC won't show up in
     |      their MRO (Method Resolution Order) nor will method
     |      implementations defined by the registering ABC be callable (not
     |      even via super()).

DDAATTAA
    MMAAXX__CCAAPPTTIIOONN__LLEENNGGTTHH = 200
    MMAAXX__FFIILLEESSIIZZEE__DDOOWWNNLLOOAADD = 20000000
    MMAAXX__FFIILLEESSIIZZEE__UUPPLLOOAADD = 50000000
    MMAAXX__MMEESSSSAAGGEESS__PPEERR__MMIINNUUTTEE__PPEERR__GGRROOUUPP = 20
    MMAAXX__MMEESSSSAAGGEESS__PPEERR__SSEECCOONNDD = 30
    MMAAXX__MMEESSSSAAGGEESS__PPEERR__SSEECCOONNDD__PPEERR__CCHHAATT = 1
    MMAAXX__MMEESSSSAAGGEE__LLEENNGGTTHH = 4096
    SSUUPPPPOORRTTEEDD__WWEEBBHHOOOOKK__PPOORRTTSS = [443, 80, 88, 8443]
    ____aallll____ = ['Audio', 'Bot', 'Chat', 'ChatMember', 'ChatAction', 'Chosen...

VVEERRSSIIOONN
    11.1.0

AAUUTTHHOORR
    devs@python-telegram-bot.org

FFIILLEE
    /home/jeen/Bash/Python/venv/lib/python3.6/site-packages/telegram/__init__.py

